|Link|Heading|Abstract|Claims
0|http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=85&p=2&f=G&l=50&d=PTXT&S1=(python.CLTX.+or+python.DCTX.)&OS=ACLM/python&RS=ACLM/python|Replacement of build to order parts with post configured images in any manufacturing environment|An embedded imaging system for addressing burn rack time issues. The embedded imaging system focuses on flexibility, control, and the ability to run without manufacturer specific IT capabilities (which allows the use of the embedded imaging system at outside manufacturing facilities).|1. A method for installing a software onto an information handling system comprising: generating a request for a post-configured image, the post-configured image comprisingan operating system, drivers and application software, the request being generated in response to actual demand for the post-configured image; creating, via an information handling system, the post-configured image; and, installing, via the informationhandling system, the post-configured image onto a plurality of target information handling systems while allowing additional software to be layered on top of the post-configured image using a layered software installation process; and wherein the actualdemand ensuring that the post-configured image directly impacts provision of fixed images on information handling systems. 2. The method of claim 1 wherein: the actual demand for the post-configured image is identified via one of a manufacturing organization, a marketing organization and a sales team. 3. The method of claim 2 wherein: the manufacturing organization uses build data to project where an embedded image is needed; and, the marketing organization and sales teams have advance knowledge of when any large retail builds are planned. 4. The method of claim 2 wherein: when the request has been received, an automated download process creates an embedded image. 5. The method of claim 4 wherein: embedded image python scripts perform all of the actions to create the embedded image. 6. An apparatus for installing a fixed image onto an information handling system comprising: means for generating a request for a post-configured image, the post-configured image comprising an operating system, drivers and application software,the request being generated in response to actual demand for the post-configured image; means for creating the post-configured image; and, means for installing the post-configured image onto a plurality of target information handling systems whileallowing additional software to be layered on top of the post-configured image using a layered software installation process; and wherein the actual demand ensuring that the post-configured image directly impacts provision of fixed images on informationhandling systems. 7. The apparatus of claim 6 wherein: the actual demand for the post-configured image is identified via one of a manufacturing organization, a marketing organization and a sales team. 8. The apparatus of claim 7 wherein: the manufacturing organization uses build data to project where an embedded image is needed; and, the marketing organization and sales teams have advance knowledge of when any large retail builds areplanned. 9. The apparatus of claim 7 wherein: when the request has been received, an automated download process creates an embedded image. 10. The apparatus of claim 9 wherein: embedded image python scripts perform all of the actions to create the embedded image. Description FIELD OF THE INVENTION The present invention relates to information handling systems and more particularly to the replacement of build to order parts with post configured images in any manufacturing environment.DESCRIPTION OF THE RELATED ART As the value and use of information continues to increase, individuals and businesses seek additional ways to process and store information. One option available to users is information handling systems. An information handling systemgenerally processes, compiles, stores, and/or communicates information or data for business, personal, or other purposes thereby allowing users to take advantage of the value of the information. Because technology and information handling needs andrequirements vary between different users or applications, information handling systems may also vary regarding what information is handled, how the information is handled, how much information is processed, stored, or communicated, and how quickly andefficiently the information may be processed, stored, or communicated. The variations in information handling systems allow for information handling systems to be general or configured for a specific user or specific use such as financial transactionprocessing, airline reservations, enterprise data storage, or global communications. In addition, information handling systems may include a variety of hardware and software components that may be configured to process, store, and communicateinformation and may include one or more computer systems, data storage systems, and networking systems. As operating systems (such as the Windows operating system available from Microsoft Inc.) grow in complexity and size, the time it takes to set-up and install build to order software stacks on customer's machines takes longer and longer. Thiscan limit a manufacture's ability to meet through put requirements and potentially could result in higher costs at outside development manufacturers (ODMs) that are fulfilling systems for the manufacturer. It can be challenging to reduce set-up time while keeping a build to order capability and as well as out of box customer experience. To address the issue of long set-up times, one attempted solution involved the creation of post-configuredimages of certain operating system and application combinations that were a high take rate had high attach rates. With this solution, a deployment team determined what images with to create. An information technology (IT) system was built to managesubstitution of a standard operating system image with one of the post configured images if the software parts in the order matched the post configured image. By including the applications in a post-configured state, the time to install thoseapplications was eliminated from the burn rack. This known solution has a number of issues that prevented the solution from being widely utilized. For example, the solution often required real-time data on high take application installs. Also, the solution often had manufacturer specific ITrequirements which limited the use of the solution to particular manufacturer specific factories. Also, the solution did not have controls in place to limit the utilization. Once the solution was turned on for a line of business, every system beingmanufactured for that line of business was open to the image substitution engine. Also, the solution did not have any controls in place to end of life an image, so stale images could potentially be installed on a customer's system.SUMMARY OF THE INVENTION In accordance with the present invention, an embedded imaging system is disclosed for addressing burn rack time issues. The embedded imaging system focuses on flexibility, control, and the ability to run without manufacturer specific ITcapabilities (which allows the use of the embedded imaging system at ODM facilities). More specifically, the embedded imaging system creates post-configured images that contain the operating system and other software installs to reduce the time of setup of this installs in the burn rack. The embedded imaging system makes use ofa request from manufacturing or from platform/marketing or retail sales teams depending on the situations. This request ensures that teams aware of real impacts are making the requests, rather than depending on guesses. The manufacturing teams usetheir build data to project where they may need an embedded image. The platform/marketing and retail sales teams have advance knowledge of when any large retail builds are planned. These retail builds are an excellent opportunity for embedded imaging. Because retail builds usually contain large numbers of a single configuration, a single embedded image can be generated that contains all possible software in a post-configurated state (note: some software cannot be installed in a post configured stare). When the request has been received by the embedded imaging system, an automated download process creates an embedded image. Embedded Image Python scripts perform all of the actions to create an image. A Python script is a small program that can beexecuted using a Python interpreter to execute commands. The build to order download is executed, certain operating system customizations are skipped during this process, certain files are cleaned from the system, and a Windows Imaging (WIM) File of the embedded image is created and posted to aserver. A Windows Imaging File format is a collection of files bound together in a single file. The WIM file formal uses known technology to compress the size of the overall file package. This image is used as the replacement of the standard operatingsystem image if an order matches the appropriate criteria. Additionally, a script is generated to handle the application of the embedded image. Also in certain embodiments, an XML file is updated with the details of the image substitution of the embedded image. Also in certain embodiments, an XML fileis updated with the details of the image substitution criteria. This XML file allows the embedded image to be used in very specific cases. Also, the XML indicates the status of the image and the date at which the image becomes invalid. This indicationensures that stale images do not accidentally get deployed to customer systems. Next, the image and the update XML are promoted to factories via an Automated File Promotion (AFP) (i.e., a tool that is used to move files to different levels on a downloadserver) or included in a build to order anywhere (BTOA) package (i.e., a process which encapsulates a factory process into a portable mechanism which allows ODMs to generate substantially build to order results) delivered to an ODM. The software download process updates compare the contents of an order against the XML file to determine whether a match is made. If so, the process makes any necessary adds and deletes from the SDR to allow for the embedded image to functionproperly. Such a system minimizes the need for costly IT infrastructure and allows for a streamlined process for updates. In a retail order configuration example, one result is a greater time savings, because the embedded image can be built to includea larger set of software than systems that guessed based on high take rate data. The embedded image process can be used in both internal dedicated manufacturing facilities as well as outside manufacturers (OMs), so it is a solution that can work wellregardless of manufacturing model. BRIEF DESCRIPTION OF THE DRAWINGS The present invention may be better understood, and its numerous objects, features and advantages made apparent to those skilled in the art by referencing the accompanying drawings. The use of the same reference number throughout the severalfigures designates a like or similar element. FIG. 1 shows a system block diagram of an information handling system. FIG. 2 shows an example of an automated build to order system for installing software on an information handling system. FIGS. 3A-3D show a flow chart of the operation of an embedded imaging request, creation and delivery system. FIGS. 4A and 4B show a flow chart of the operation of an embedded image substitution process. FIGS. 5A and 5B show an example XML file for the embedded imaging system.DETAILED DESCRIPTION Referring briefly to FIG. 1, a system block diagram of an information handling system 100 is shown. The information handling system 100 includes a processor 102, input/output (I/O) devices 104, such as a display, a keyboard, a mouse, andassociated controllers (each of which may be coupled remotely to the information handling system 100), a memory 106 including volatile memory such as random access memory (RAM) and non-volatile memory such as a hard disk and drive, and other storagedevices 108, such as an optical disk and drive and other memory devices, and various other subsystems 110, all interconnected via one or more buses 112. For purposes of this disclosure, an information handling system may include any instrumentality or aggregate of instrumentalities operable to compute, classify, process, transmit, receive, retrieve, originate, switch, store, display, manifest,detect, record, reproduce, handle, or utilize any form of information, intelligence, or data for business, scientific, control, or other purposes. For example, an information handling system may be a personal computer, a network storage device, or anyother suitable device and may vary in size, shape, performance, functionality, and price. The information handling system may include random access memory (RAM), one or more processing resources such as a central processing unit (CPU) or hardware orsoftware control logic, ROM, and/or other types of nonvolatile memory. Additional components of the information handling system may include one or more disk drives, one or more network ports for communicating with external devices as well as variousinput and output (I/O) devices, such as a keyboard, a mouse, and a video display. The information handling system may also include one or more buses operable to transmit communications between the various hardware components. Referring to FIG. 2, a schematic diagram of a software installation system 200 at an information handling system manufacturing site is shown. In operation, an order 210 is placed to purchase a target information handling system 220 (e.g., theinformation handling system 100). The target information handling system 220 to be manufactured contains a plurality of hardware and software components. For instance, target information handling system 220 might include a certain brand of hard drive,a particular type of monitor, a certain brand of processor, and software. The software includes a particular version of an operating system along with all appropriate driver software and other application software along with appropriate software bugfixes. The software also includes ordered subscription software along with an associated key creation utility. Before target information handling system 120 is shipped to the customer, the plurality of components are installed and tested from, for example, a fixed image of the software. Such software installation and testing advantageously ensures areliable, working information handling system which is ready to operate when received by a customer. Because different families of information handling systems and different individual computer components require different software installation, it is necessary to determine which software to install on a target information handling system 220. A descriptor file 230 (e.g., a system descriptor record (SDR)) is provided by converting an order 210, which corresponds to a desired information handling system having desired components, into a computer readable format via conversion module 232. Component descriptors are computer readable descriptions of the components of target information handling system 220 which components are defined by the order 210. In a preferred embodiment, the component descriptors are included in adescriptor file called a system descriptor record which is a computer readable file containing a listing of the components, both hardware and software, to be installed onto target information handling system 220. Having read the plurality of componentdescriptors, database server 240 provides a plurality of software components corresponding to the component descriptors to file server 242 over network connection 244. Network connections 244 may be any network connection well-known in the art, such asa local area network, an intranet, or the internet. The information contained in database server 240 is often updated such that the database contains a new factory build environment. The software is then installed on the target information handlingsystem 220. The software installation is controlled by a software installation management server that is operable to control the installation of the operating system and other software packages specified by a customer. Referring to FIGS. 3A-3D, a flowchart of the operation of an embedded imaging request, creation and delivery system is shown. The embedded imaging request, creation and delivery system 300 includes a platform marketing and retail sales portion302, a factory portion 303, an embedded image development team portion 304, an embedded image project management (PM) portion 305 and a Factory Install Validation (FIV) portion 306. A FIV tests the integration of factory installed software on amanufacturer download process. The embedded imaging request, creation and delivery system begins operation with a determination of a need for an embedded image within the platform marketing and retail sales portion 302 of the system at step 310 or within the factory portionof the system at step 311. The determination may be made by analyzing data such as sales data or order data that is obtained via and stored on an information handling system such as the information handling system 100. The determination may further bemade by a program executing on an information handling system in response to analyzing the data. Next, the system 300 automatically submits a request to an embedded image project manager portion at step 312 for the platform marketing and retail salesportion and at step 313 for the factory portion 303. Next, at step 320, a determination is made by the system regarding whether resources are available for generating the embedded image within the embedded image project management portion 305. If it is determined that resources are not available,then the system continues to perform image fulfillment operations using existing capabilities within the factory portion 303. If it is determined that resources are available, then the request is analyzed at step 324 to determine whether an embeddedimage is a viable solution to the submitted request at step 325. An embedded image is a viable solution if the configuration contains software components that can be pre-setup and applied to multiple systems. Some software installs capture systemspecific information, so they can not be pre-installed and then images to multiple systems. If it is determined that an embedded image is not a viable solution then the system continues to perform image fulfillment operations using existing capabilitieswithin the factory portion 303. If it is determined that an embedded image is a viable solution, then at step 330 an embedded image software release vehicle (SRV) and AFP project are created within the embedded image project management portion 305. The software releasevehicle is also referred to as a software part. Next, at step 332, an embedded image is created and an Embedded image Extensible Markup Language (EI XML) file is updated within the embedded image development team portion 304 of the system 300. Using anEI XML file allows for the use of standard tools for reading the data from the file. Next, a unit test is performed on the embedded image and updated EI XML file at step 334. The system 300 then determines whether the embedded image and updated EI XMLfile test was successful at step 340. If the test was successful, then the embedded image and updated XML file are promoted to Software Validation (SV) at step 342. Software Validation is a directory level within certain download servers that is usedby test groups for their validation efforts prior to promoting the software to a factory environment. If the test was not successful then a trouble shooting operation is performed at step 344 and a determination is made whether the troubleshooting wassuccessful at step 346. If the troubleshooting operation was not successful, then the operation returns to perform image fulfillment operations using existing capabilities within the factory portion 303. If the troubleshooting operation was successful,then the system returns to step 332 where an embedded image is created and an EI XML file is updated. After the embedded image and updated XML file are promoted, the system proceeds to the FIV portion 306 where the embedded image and the updated XML file are tested at step 350. If the test is successful, as determined at step 352, then thesystem promotes the AFP to a pilot program at step 354. If the test was not successful, then the system returns to the embedded image development team portion 304 where the embedded image and the updated XML file are pulled from the AFP project and arereturned to a prototype stage for troubleshooting at step 344. After the embedded image and updated XML file are promoted to the pilot program, then the system proceeds to the factory portion 303 where the system performs a test on the pilot program at step 360. If the test is successful, as determined bystep 362, then the system analyzes the embedded image and updated XML file to determine whether the embedded image and updated XML file are to be used within an outside manufacturer at step 362. If the embedded image and updated XML file are to be usedwithin an outside manufacturer, then the system includes the embedded image and updated XML file within a build to order anywhere (BTOA) package at step 364. If the embedded image and updated XML file are to be used within an internal factory, then thesystem 300 promotes the AFP to the factory at step 366. In either case, at step 370 the embedded image and updated XML file is activated in the factory (either internally or externally). Referring to FIGS. 4A and 4B, a flow chart of the operation of an embedded image substitution system 400 is shown. More specifically, the embedded image substitution process starts operation by initiating a manufacturing operating system bootoperation at step 410 (e.g., via a VistaPE manufacturing OS boot). The Vista preinstallation environment (VistaPE) manufacturing OS is a lightweight version of the Windows Vista operating system that is used for deployment of information handlingsystems. The VistaPE manufacturing OS is used during an installation phase of Windows, and can be booted via CD-ROM, USB flash drive or hard disk. The VistaPE manufacturing OS is used to preinstall Windows client operating systems to informationhandling systems during manufacturing). Next the system 400 determines any environment variables and parses a software descriptor record (SDR) for hardware, software and into parts at step 420. The SDR is a text file that contains information about the hardware and software to beloaded on the system. Next, the system 400 checks the information handling system for an EI.XML file at step 430. If the EI.XML file does not exist, then at step 438 the system 400 uses a known process for installing an image according to an originalSDR associated with the information handling system. If the EI.XML file does exist on the information handling system then the system 400 searches for all active images within the EI.XML file at step 440. Active images are images where the current date is less than an invalid date stored withinthe EI.XML file (i.e., images which are current). Next, at step 445, for each active image, the system 400 compares environment variables and SDR entries to criteria included within the EI.XML file. The Embedded Image XML file contains a list ofcriteria needed to make a replacement. The criteria include any information included in the SDR or any environment variable set up for the system. The SDR contains a list of software items, hardware items and information lines. Any of these entriescan be used as criteria for a replacement. For example, the EI XML file may indicate that a replacement can only be made if the SDR includes the specific software entry for a version of Office, a specific software entry for a version of a DVD playbacksoftware, an information line indicating that the order is a retail order and a hardware line indicting the presence of a DVD drive. In addition, in the download environment, certain environment variables are set up for the procedure. These environmentvariables can also be used as criteria. For example, there are environment variables that indicate platform, operating system type, operating system language and service pack. As such, the EI XML file could indicate that a replacement could only bemade for a certain portable system having a certain operating system with a certain language (e.g., a Dell Latitude E6400 type portable with a Vista Operating System and an English Service Pack). If there are no matches as determined by step 450, then at step 438 the system 400 uses a known process for installing an image according to an original SDR associated with the information handling system. If there is a match as determined bystep 450, then the system 400 determines whether all active SRVs in the additions section of the EI.XML file are accessible and valid at step 455. If there are no accessible and valid SRVs as determined by step 455, then at step 438 the system 400 usesa known process for installing an image according to an original SDR associated with the information handling system. If there are accessible and valid SRVs, then the system adds the SRVs to the SDR that is located within the additions section of the EI.XML file at step 460. Next, at step 470, the system 400 removes all SRVs from the SDR that are in theremoval section of the EI.XML file. Next, at step 480, the system 400 continues the download process with the modified SDR containing the embedded image. The embedded system process allows installation of software while still allowing for full configurability. For example, a customer can choose whatever software they want installed on their system. In one example, assume a customer choosessoftware items A, B, C, and D. With known installation processes, those items are installed one at a time in a manufacturing environment on that customer's system (e.g., A installs, then B installs, then C installs, and then D installs.) Eachinstallation takes time because it has to be set up for that system. With the present embedded system imaging process, a system manufacturer analyzes relevant data and determines that software items A, B, and C are selected together by customers a largenumber of times or that they will likely be included in some upcoming retail build or other large order. Based upon this determination, in a development environment, the embedded system processes and identifies tools to run the install of A, B, and C ona generic system and captures an image of that, (e.g., which may be identified as item Z). Because the installs were executed in a development environment and an image was captured, the time it takes to run the installs does not occur when the image isdeployed to a customer's system. Now, if a customer orders a system having software A, B, C, and D, the embedded system process replaces A, B, and C in the order with Z, leaving the order to contain Z and D. The image of Z is deployed to the customer'ssystem and then only item D has to execute through an install, thus saving time over running the install for everything. In addition, if a different customer orders A, B, C, and E, the process still works. In that case, A, B, and C are replaced with Zleaving Z and E in the order, so that only E has to execute through installation. Another advantage of this process is that the systems can still run through a known layered process for installing software and making customizations on each specific customer's system for their configuration. The embedded imaging system usescommonly bundled items or pre-identified items and creates an image of these items in a pre-installed state to use as a base to speed up the process and then dynamically handles the replacement during the execution in the manufacturing environment. Referring to FIGS. 5A and 5B, an example XML file 500 for the embedded imaging system is shown. This example XML file shows examples of the invalid date information 510, info Part information 520, SRV information 530 as well as removalinformation 540 and addition information 550. The present invention is well adapted to attain the advantages mentioned as well as others inherent therein. While the present invention has been depicted, described, and is defined by reference to particular embodiments of the invention, suchreferences do not imply a limitation on the invention, and no such limitation is to be inferred. The invention is capable of considerable modification, alteration, and equivalents in form and function, as will occur to those ordinarily skilled in thepertinent arts. The depicted and described embodiments are examples only, and are not exhaustive of the scope of the invention. Also for example, the above-discussed embodiments include software modules that perform certain tasks. The software modules discussed herein may include script, batch, or other executable files. The software modules may be stored on amachine-readable or computer-readable storage medium such as a disk drive. Storage devices used for storing software modules in accordance with an embodiment of the invention may be magnetic floppy disks, hard disks, or optical discs such as CD-ROMs orCD-Rs, for example. A storage device used for storing firmware or hardware modules in accordance with an embodiment of the invention may also include a semiconductor-based memory, which may be permanently, removably, or remotely coupled to amicroprocessor/memory system. Thus, the modules may be stored within a computer system memory to configure the computer system to perform the functions of the module. Other new and various types of computer-readable storage media may be used to storethe modules discussed herein. Additionally, those skilled in the art will recognize that the separation of functionality into modules is for illustrative purposes. Alternative embodiments may merge the functionality of multiple modules into a singlemodule or may impose an alternate decomposition of functionality of modules. For example, a software module for calling sub-modules may be decomposed so that each sub-module performs its function and passes control directly to another sub-module. Consequently, the invention is intended to be limited only by the spirit and scope of the appended claims, giving full cognizance to equivalents in all respects.
1|http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=86&p=2&f=G&l=50&d=PTXT&S1=(python.CLTX.+or+python.DCTX.)&OS=ACLM/python&RS=ACLM/python|Pattern modeling methods and systems|In a computer-implemented method, models are designed with a design tool. A selected construct is determined. A selected computing environment, into which the selected construct is being placed, is identified, the computing environment being selected from at least one textual and at least one graphical computing environments. A template based on the selected computing environment is selected. The selected template is inserted into the selected computing environment.|"1. A computer-implemented method comprising: determining, by a computer, a user selected construct within a design tool; receiving, by the computer, a selection of acomputing environment within the design tool, the computing environment being selected from at least one textual computing environment and at least one graphical computing environment; identifying, by the computer, the selected computing environmentinto which the user selected construct is placed; determining, by the computer, a position of the user selected construct placed in the selected computing environment; selecting, by the computer, a template based on the selected computing environmentand the user selected construct; and inserting, by the computer, the selected template into the selected computing environment at the determined position in the selected computing environment. 2. The method according to claim 1, wherein the textual computing environment includes at least one of a C environment, a Python environment, a Javascript environment, a hardware description language environment, an Octave environment, or adynamically typed language environment, and the graphical computing environment includes at least one of a time-based graphical modeling environment, a block-based environment, a chart-based environment, a state-based diagram environment, a data flowdiagram environment, an entity flow network diagram environment, an electronic design automation environment, a Schematic Layout environment, or a Unified Modeling Language environment. 3. The method according to claim 1, wherein the construct includes computer-readable medium encoded with at least one of: IF-END-IF, IF-cascade of ELSE IF-END IF, SWITCH condition--cascade of CASE, DO-WHILE loop, REPEAT-UNTIL loop,Proportional-Integral-Derivative controller, Proportional-Integral controller, Proportional-Derivative controller, Integral-Derivative controller, Proportional controller, Derivative controller, Integral controller, IF-nested IF condition-nested IFcondition-END IF-END IF, FOR loop, SIMPLE STATE MACHINE, TOP LEVEL ARCHITECTURE, IF-THEN-ELSE-IF, IF-THEN-IF, IF-THEN, IF-THEN-ELSE, IF, cascade of IF-THEN, FOR-WHILE, FOR-loop, WHILE-loop, parameterized construct, case, combination of logical signals,vector signals, conditions, conditions with subconditions, UNLESS conditions, algorithmic components, physical systems, physical subsystems, or conditions that are visually separated. 4. The method according to claim 1, wherein the design tool is a standalone graphical application. 5. The method according to claim 1, wherein the design tool comprises a floating tool bar window. 6. The method according to claim 1, further comprising: creating a construct based on a user input; storing the created construct in the design tool; creating a construct icon that corresponds to the created construct; and displaying theconstruct icon corresponding to the created construct in a list of constructs on a user interface screen. 7. The method according to claim 6, further comprising: at least one of exporting or importing the created construct among selected client computers; and sharing the created construct among the selected computers. 8. The method according to claim 7, further comprising: automatically updating design tools of the selected client computers with the created construct. 9. The method according to claim 7, further comprising: automatically updating a list of constructs of a user interface screen associated with selected client computers with the created construct icon; and displaying the created construct iconin the updated list of constructs of the user interface screen of selected client computers. 10. A method for designing models, comprising at least one of: downloading software to a computer system, which software, when executed by the computer system, causes the computer system to perform operations comprising the method of claim 1; or providing downloadable software to a computer system, which software, when executed by the computer system, causes the computer system to perform operations comprising the method of claim 1. 11. A non-transitory computer-readable medium comprising software that, when executed by a computer, causes the computer to perform operations, the computer-readable medium comprising: instructions for determining a user selected constructwithin a design tool; instructions for receiving a selection of a computing environment within the design tool, the computing environment being selected from at least one textual computing environment and at least one graphical computing environment; instructions for identifying the selected computing environment into which the selected user construct is placed; instructions for determining a position of the user selected construct placed in the selected computing environment; instructions forselecting a template based on the selected computing environment and the user selected construct; and instructions for inserting the selected template into the selected computing environment at the determined position in the selected computingenvironment. 12. The non-transitory medium according to claim 11, wherein the textual computing environment includes at least one of a C environment, a Python environment, a Javascript environment, a hardware description language environment, an Octaveenvironment, or a dynamically typed language environment, and the graphical computing environment includes at least one of a time-based graphical modeling environment, a block-based environment, a chart-based environment, a state-based diagramenvironment, a data flow diagram environment, an entity flow network diagram environment, an electronic design automation environment, a Schematic Layout environment, or a Unified Modeling Language environment. 13. The non-transitory medium according to claim 11, wherein the construct includes at least one of: IF-END-IF, IF-cascade of ELSE IF-END IF, SWITCH condition--cascade of CASE, DO-WHILE loop, REPEAT-UNTIL loop, Proportional-Integral-Derivativecontroller, Proportional-Integral controller, Proportional-Derivative controller, Integral-Derivative controller, Proportional controller, Derivative controller, Integral controller, IF-nested IF condition-nested IF condition-END IF-END IF, FOR loop,SIMPLE STATE MACHINE, TOP LEVEL ARCHITECTURE, IF-THEN-ELSE-IF, IF-THEN-IF, IF-THEN, IF-THEN-ELSE, IF, cascade of IF-THEN, FOR-WHILE, FOR-loop, WHILE-loop, parameterized construct, case, combination of logical signals, vector signals, conditions,conditions with subconditions, UNLESS conditions, algorithmic components, physical systems, physical subsystems, or conditions which are visually separated. 14. The non-transitory medium according to claim 11, wherein the design tool is a standalone graphical application. 15. The non-transitory medium according to claim 11, wherein the design tool comprises a floating tool bar window. 16. The non-transitory medium according to claim 11, further comprising: instructions for creating a construct based on a user input; instructions for storing the created construct in the design tool; instructions for creating a constructicon which corresponds to the created construct; and instructions for displaying the construct icon corresponding to the created construct in a list of constructs on a user interface screen. 17. The non-transitory medium according to claim 16, further comprising: instructions for at least one of exporting or importing the created construct among selected client computers. 18. The non-transitory medium according to claim 17, wherein the exporting and importing the created construct comprises: automatically updating design tools of the selected client computers with the created construct. 19. The non-transitory medium according to claim 17, further comprising: automatically updating a list of constructs of a user interface screen associated with selected client computers with the created construct icon; and displaying thecreated construct icon in the updated list of constructs of the user interface screen of selected client computers. 20. A computer and a non-transitory computer-readable medium comprising software that, when executed by the computer, causes the computer to perform operations, the computer-readable medium comprising: instructions for determining a userselected construct within a design tool; instructions for receiving a selection of a computing environment within the design tool, the computing environment being selected from at least one textual computing environment and at least one graphicalcomputing environment; instructions for identifying the selected computing environment into which the selected construct is placed; instructions for determining a position of the selected user construct placed in the selected computing environment; instructions for selecting a template based on the selected computing environment and the user selected construct; and instructions for inserting the selected template into the selected computing environment at the determined position in the selectedcomputing environment. 21. The computer and non-transitory computer-readable medium according to claim 20, wherein the textual computing environment includes at least one of a C environment, a Python environment, a Javascript environment, a hardware descriptionlanguage environment, an Octave environment, or a dynamically typed language environment, and the graphical computing environment includes at least one of a time-based graphical modeling environment, a block-based environment, a chart-based environment,a state-based diagram environment, a data flow diagram environment, an entity flow network diagram environment, an electronic design automation environment, a Schematic Layout environment, or a Unified Modeling Language environment. 22. The computer and non-transitory computer-readable medium according to claim 20, wherein the construct includes at least one of: IF-END-IF, IF-cascade of ELSE IF-END IF, SWITCH condition--cascade of CASE, DO-WHILE loop, REPEAT-UNTIL loop,Proportional-Integral-Derivative controller, Proportional-Integral controller, Proportional-Derivative controller, Integral-Derivative controller, Proportional controller, Derivative controller, Integral controller, IF-nested IF condition-nested IFcondition-END IF-END IF, FOR loop, SIMPLE STATE MACHINE, TOP LEVEL ARCHITECTURE, IF-THEN-ELSE-IF, IF-THEN-IF, IF-THEN, IF-THEN-ELSE, IF, cascade of IF-THEN, FOR-WHILE, FOR-loop, WHILE-loop, parameterized construct, case, combination of logical signals,vector signals, conditions, conditions with subconditions, UNLESS conditions, algorithmic components, physical systems, physical subsystems, or conditions which are visually separated. 23. The computer and non-transitory computer-readable medium according to claim 20, wherein the design tool is a standalone graphical application. 24. The computer and non-transitory computer-readable medium according to claim 20, wherein the design tool comprises a floating tool bar window. 25. The computer and non-transitory computer-readable medium according to claim 20, the computer-readable medium further comprising: instructions for creating a construct based on a user input; instructions for storing the created construct inthe design tool; instructions for creating a construct icon which corresponds to the created construct; and instructions for displaying the construct icon corresponding to the created construct in a list of constructs on a user interface screen. 26. The computer and non-transitory computer-readable medium according to claim 25, the computer-readable medium further comprising: instructions for at least one of exporting or importing the created construct among selected client computers. 27. The computer and non-transitory computer-readable medium according to claim 26, further comprising: automatically updating design tools of the selected client computers with the created construct. 28. The computer and non-transitory computer-readable medium according to claim 26, further comprising: automatically updating a list of constructs of a user interface screen associated with each selected computer with the created constructicon; and displaying the created construct icon in the updated list of constructs of the user interface screen of each selected computer. 29. A design tool comprising: a processor configured to: determine a user selected construct within the design tool; receive a selection of a computing environment within the design tool, the computing environment being selected from at leastone textual computing environment and at least one graphical computing environment; identify the selected computing environment into which the selected construct is placed; determine a position of the user selected construct placed in the selectedcomputing environment; select a template based on the selected computing environment and the user selected construct; and insert the selected template into the selected computing environment at the determined position in the selected computingenvironment. 30. The design tool according to claim 29, wherein the textual computing environment includes at least one of a C environment, a Python environment, a Javascript environment, a hardware description language environment, an Octave environment,or a dynamically typed language environment, and the graphical computing environment includes at least one of a time-based graphical modeling environment, a block-based environment, a chart-based environment, a state-based diagram environment, a dataflow diagram environment, an entity flow network diagram environment, an electronic design automation environment, a Schematic Layout environment, or a Unified Modeling Language environment. 31. The design tool according to claim 29, wherein the construct includes at least one of: IF-END-IF, IF-cascade of ELSE IF-END IF, SWITCH condition--cascade of CASE, DO-WHILE loop, REPEAT-UNTIL loop, Proportional-Integral-Derivativecontroller, Proportional-Integral controller, Proportional-Derivative controller, Integral-Derivative controller, Proportional controller, Derivative controller, Integral controller, IF-nested IF condition-nested IF condition-END IF-END IF, FOR loop,SIMPLE STATE MACHINE, TOP LEVEL ARCHITECTURE, IF-THEN-ELSE-IF, IF-THEN-IF, IF-THEN, IF-THEN-ELSE, IF, cascade of IF-THEN, FOR-WHILE, FOR-loop, WHILE-loop, parameterized construct, case, combination of logical signals, vector signals, conditions,conditions with subconditions, UNLESS conditions, algorithmic components, physical systems, physical subsystems, or conditions which are visually separated. 32. The design tool according to claim 29, wherein the design tool comprises a standalone graphical application. 33. The design tool according to claim 29, wherein the design tool comprises a floating tool bar window. 34. The design tool according to claim 29, wherein the processor is further configured to: create a construct based on a user input; store the created construct; create a construct icon which corresponds to the created construct; and displaythe construct icon corresponding to the created construct. 35. The design tool according to claim 34, wherein the processor is further configured to: at least one of export or import the created construct among selected client computers. 36. The design tool according to claim 35, wherein the export or import comprises: automatically updating storage of each selected client computer with the created construct and displaying selected client computers with the created constructicon. 37. A system comprising: a construct determining mechanism to determine a user selected construct within a design tool, the construct determining mechanism comprising at least one processor; a computing environment determining mechanism toidentify a selected computing environment into which the user selected construct is placed, the computing environment being selected from at least one textual computing environment and at least one graphical computing environment, the computingenvironment determining mechanism comprising at least one processor; a position determining mechanism to determine a position of the user selected construct laced into the selected computing environment, the position determining mechanism comprising atleast one processor; a template selector to select a template based on the selected computing environment and the user selected construct, the template selector comprising at least one processor; and a template inserter to insert the selected templateinto the selected computing environment, wherein the template inserter inserts the selected template at the determined position into the selected computing environment, the template inserter comprising at least one processor. 38. The system according to claim 37, wherein the textual computing environment includes at least one of a C environment, a Python environment, a Javascript environment, a hardware description language environment, an Octave environment, or adynamically typed language environment, and the graphical computing environment includes at least one of a time-based graphical modeling environment, a block-based environment, a chart-based environment, a state-based diagram environment, a data flowdiagram environment, an entity flow network diagram environment, an electronic design automation environment, a Schematic Layout environment, or a Unified Modeling Language environment. 39. The system according to claim 37, wherein the construct includes at least one of: IF-END-IF, IF-cascade of ELSE IF-END IF, SWITCH condition--cascade of CASE, DO-WHILE loop, REPEAT-UNTIL loop, Proportional-Integral-Derivative controller,Proportional-Integral controller, Proportional-Derivative controller, Integral-Derivative controller, Proportional controller, Derivative controller, Integral controller, IF-nested IF condition-nested IF condition-END IF-END IF, FOR loop, SIMPLE STATEMACHINE, TOP LEVEL ARCHITECTURE, IF-THEN-ELSE-IF, IF-THEN-IF, IF-THEN, IF-THEN-ELSE, IF, cascade of IF-THEN, FOR-WHILE, FOR-loop, WHILE-loop, parameterized construct, case, combination of logical signals, vector signals, conditions, conditions withsubconditions, UNLESS conditions, algorithmic components, physical systems, physical subsystems, or conditions which are visually separated. 40. The system according to claim 37, wherein the design tool is a standalone graphical application. 41. The system according to claim 37, wherein the design tool comprises a floating tool bar window. 42. The system according to claim 37, further comprising: a construct creating mechanism to create a construct based on a user input and store the created construct in the design tool; a mechanism to create a construct icon corresponding tothe created construct; and a design tool bar window to store an icon of the created construct and display the construct icon corresponding to the created construct. 43. The system according to claim 42, further comprising: an exporting and importing mechanism to at least one of export or import the created construct among selected client computers. 44. The system according to claim 43, wherein the exporting and importing mechanism comprises: an updating mechanism to automatically update design tools and design tool windows of the selected client computers with respective created constructand created construct icon. 45. The system according to claim 37, further comprising: a host computer which is programmed for perform steps of: creating a construct based on a user input; creating a construct icon corresponding to the created construct; and exportingthe created construct among selected client computers so that users of the selected computers share the created construct. 46. A hierarchical computing system comprising: one or more processors configured to execute: a first computing layer including at least one textual computing environment; a second computing layer including at least one graphical computingenvironment; a third computing layer disposed on the first and second computing layers; a fourth computing layer disposed on the third computing layer and including constructs, the one or more processors configured to execute instructions to performsteps of: determining a user selected construct for placing into a selected computing environment, identifying the selected computing environment, transforming the user selected construct with the third layer into a format compatible with the selectedcomputing environment, and inserting the transformed construct into a corresponding first or second computing layer. 47. The method according to claim 2, wherein the dynamically typed language environment is MATLAB.RTM., the time-based graphical modeling environment is SIMULINK.RTM., or the state-based diagram environment is STATEFLOW.RTM.. 48. The non-transitory medium according to claim 12, wherein the dynamically typed language environment is MATLAB.RTM., the time-based graphical modeling environment is SIMULINK.RTM., or the state-based diagram environment is STATEFLOW.RTM.. 49. The computer and non-transitory computer-readable medium according to claim 21, wherein the dynamically typed language environment is MATLAB.RTM., the time-based graphical modeling environment is SIMULINK.RTM., or the state-based diagramenvironment is STATEFLOW.RTM.. 50. The system according to claim 30, wherein the dynamically typed language environment is MATLAB.RTM., the time-based graphical modeling environment is SIMULINK.RTM., or the state-based diagram environment is STATEFLOW.RTM.. 51. The system according to claim 38, wherein the dynamically typed language environment is MATLAB.RTM., the time-based graphical modeling environment is SIMULINK.RTM., or the state-based diagram environment is STATEFLOW.RTM.. Description BACKGROUND The following relates to model-based systems development. More particularly, the following relates to systems modeling patterns in textual and graphical computing environments. It is to be appreciated, however, that the following may beapplicable to other computing environments, computing systems and the like. Many organizations are employing the practice of specifying, simulating, analyzing, verifying, validating and implementing systems using a model of system behavior. System implementation typically consists of automatically generating code forportions of the model, particularly portions corresponding to the system's control and signal and image processing algorithms. Modeling environments may refer to computing environments that enable a user to construct and analyze a model of a process or system. Model-based design tools included within the modeling environments and features of the model design tools mayprovide techniques for users to approach the modeling process. Some users may find these model-based design tools unsatisfactory, especially in complex modeling environments. In addition, existing model-based design tools may make models difficult tounderstand and/or maintain, which may lead to inefficient system implementation.BRIEF DESCRIPTION In accordance with one aspect, a computer-implemented method for designing models with a design tool is disclosed. A selected construct is determined. A selected computing environment into which the selected construct is being placed isidentified, the computing environment being selected from at least one textual and at least one graphical computing environments. A template based on the selected computing environment is selected. The selected template is inserted into the selectedcomputing environment. In accordance with another aspect, a design tool for designing models is disclosed. A means determines a selected construct. A means identifies a selected computing environment into which the selected construct is being placed, the computingenvironment being selected from at least one textual and at least one graphical computing environments. A means selects a template based on the selected computing environment. A means inserts the selected template into the selected computingenvironment. BRIEF DESCRIPTION OF THE DRAWINGS Various embodiments of the present application will be understood and appreciated more fully from the following detailed description, taken in conjunction with the drawings, in which: FIG. 1A is a diagrammatic illustration of an exemplary modeling system according to an exemplary embodiment; FIG. 1B is a diagrammatic illustration of exemplary multiple computing layers according to an exemplary embodiment; FIG. 1C is a diagrammatic illustration of an exemplary construct according to an exemplary embodiment; FIG. 1D is a diagrammatic illustration of another exemplary construct according to an exemplary embodiment; FIG. 1E is a diagrammatic illustration of another exemplary construct according to an exemplary embodiment; FIG. 1F is a diagrammatic illustration of another exemplary construct according to an exemplary embodiment; FIG. 2A is a diagrammatic illustration of a detailed portion of the modeling system according to an exemplary embodiment; FIG. 2B is a diagrammatic illustration of an exemplary display screen according to an exemplary embodiment; FIG. 3 is a flow diagram of an exemplary data modeling method according to an exemplary embodiment; FIG. 4A is a diagrammatic illustration of an exemplary modeling system according to an exemplary embodiment; FIG. 4B is a diagrammatic illustration of an exemplary display screen according to an exemplary embodiment; FIG. 4C is a diagrammatic illustration of an exemplary display screen according to an exemplary embodiment; FIG. 4D is a diagrammatic illustration of an exemplary display screen according to an exemplary embodiment; and FIG. 5 is a diagrammatic illustration of a computer system for use with the exemplary embodiments.DEFINITIONS In the following description, the following definitions are applicable throughout (including above). A ""computer"" may refer to one or more apparatus and/or one or more systems that are capable of accepting a structured input, processing the structured input according to predetermined rules, and producing results of the processing as output. Examples of a computer may include: a computer; a stationary and/or portable computer; a computer having a single processor, multiple processors, or multi-core processors, which may operate in parallel and/or not in parallel; a general purpose computer;a supercomputer; a mainframe; a super mini-computer; a mini-computer; a workstation; a micro-computer; a server; a client; an interactive television; a web appliance; a telecommunications device with internet access; a hybrid combination of a computerand an interactive television; a portable computer; a personal digital assistant (PDA); a portable telephone; application-specific hardware to emulate a computer and/or software, such as, for example, a digital signal processor (DSP), afield-programmable gate array (FPGA), a general graphics processor (GPA), a graphics processing unit (GPU), a general purpose processors (GPP), an application specific instruction-set processor (ASIP), an application specific integrated circuit (ASIC),an embedded processor, a chip, chips, a system on a chip, multi-processor system on chip (MPSoC), or a chip set; a data acquisition device; an optical computer; and an apparatus that may accept data, may process data in accordance with one or more storedsoftware programs, may generate results, and typically may include input, output, storage, arithmetic, logic, and control units. ""Software"" may refer to predetermined rules to operate a computer. Examples of software may include: software; code segments; instructions; applets; pre-compiled code; interpreted code; compiled code; computer programs; and programmed logic. A ""computer-readable medium"" may refer to any storage device used for storing data accessible by a computer. Examples of a computer-readable medium may include: a magnetic hard disk; a floppy disk; an optical disk, such as a CD-ROM and a DVD; amagnetic tape; a flash removable memory; a memory chip; and/or other types of media that can store machine-readable instructions thereon. A ""computer system"" may refer to a system having one or more computers, where each computer may include a computer-readable medium embodying software to operate the computer. Examples of a computer system may include: a distributed computersystem for processing information via computer systems linked by a network; two or more computer systems connected together via a network for transmitting and/or receiving information between the computer systems; and one or more apparatuses and/or oneor more systems that may accept data, may process data in accordance with one or more stored software programs, may generate results, and typically may include input, output, storage, arithmetic, logic, and control units. A ""network"" may refer to a number of computers and associated devices that may be connected by communication facilities. A network may involve permanent connections such as cables or temporary connections such as those made through telephone orother communication links. A network may further include hard-wired connections (e.g., coaxial cable, twisted pair, optical fiber, waveguides, etc.) and/or wireless connections (e.g., radio frequency waveforms, free-space optical waveforms, acousticwaveforms, etc.). Examples of a network may include: an internet, such as the Internet; an intranet; a local area network (LAN); a wide area network (WAN); and a combination of networks, such as an internet and an intranet. Exemplary networks mayoperate with any of a number of protocols, such as Internet protocol (IP), asynchronous transfer mode (ATM), and/or synchronous optical network (SONET), user datagram protocol (UDP), IEEE 802.x, etc. A ""modeling environment"" may refer to a graphical application where a model may be translated into executable instructions. A ""computing environment context"" may refer to circumstances under which a device or system is used or a metadata about items created externally. Such metadata may include resources, events, etc. about items.DETAILED DESCRIPTION Exemplary embodiments are described in detail below. While specific exemplary embodiments are discussed, it should be understood that this is done for illustration purposes only. In describing and illustrating the exemplary embodiments,specific terminology is employed for the sake of clarity. However, the following is not intended to be limited to the specific terminology so selected. A person skilled in the relevant art will recognize that other components and configurations may beused without parting from the spirit and scope of the application. It is to be understood that each specific element includes all technical equivalents that operate in a similar manner to accomplish a similar purpose. The examples and embodimentsdescribed herein are non-limiting examples. According to the exemplary embodiments, a design tool includes a palette of constructs or patterns. The pattern palette may be predefined by a system administrator, created by a user, and/or modified by the user. The design tool isimplementation dependent and operates across various types of computing environments such as text-based, graphics-based, etc. The design tool further operates above particular typical model types (text, graphical, etc.) The patterns automatically take onan appropriate form for the context of the particular computing environment they are used in. Such design tool relieves the user from having to keep track of things and makes models easier to understand and create. With reference to FIG. 1A, an exemplary model designing system 100 includes an exemplary computer 110 which may include a bus 112, a processor 114, a computer-readable medium or memory 116, a read only memory (ROM) 118, a storage device 120, aninput device 122, an output device 130, and a communication interface 132. The bus 112 may include one or more interconnects that permit communication among the components of the computer 110. The processor 114 may include any type of processor, microprocessor, multi-core processor, or processing logic that mayinterpret and execute instructions. The memory 116 may include a random access memory (RAM) or another type of dynamic storage device that may store information and instructions for execution by the processor 114. The memory 116 may also be used tostore temporary variables or other intermediate information during execution of instructions by the processor 114. The ROM 118 may include a ROM device and/or another type of static storage device that may store static information and instructions for the processor 114. The storage device 120 may include a magnetic disk and/or optical disk and itscorresponding drive for storing information and/or instructions. The storage device 120 may include a single storage device or multiple storage devices, such as multiple storage devices operating in parallel. Moreover, the storage device 120 may residelocally on the computer 110 and/or may be remote with respect to the computer 110 and connected thereto via a network and/or another type of connection, such as a dedicated link or channel. For example, the storage device 120 may store code 140 for theoperating system (OS) of the computer 110, code 150 for applications running on the operation system including modeling applications such as a design tool 152, a textual or text-based computing environment 154, a graphical or graphics-based computingenvironment 156, and a model database 160 to store the models created with the design tool 152. The input device 122 may include any mechanism or combination of mechanisms that permit an operator or user to input information to the computer 110, such as a keyboard, a mouse, accelerometer and gyroscope based input devices, neuro-basedinterface devices, a touch sensitive display device, a microphone, a pen-based pointing device, and/or a biometric input device, such as a voice recognition device and/or a finger print scanning device. The computer 110 may receive through the inputdevice 122 input data necessary for creating patterns and models in one of the computing environments 154, 156 with the design tool 152. The output device 130 may include any mechanism or combination of mechanisms that outputs information to the operator, including a display, a printer, a speaker, etc. The computer 110 may display on the display 130 a user interface screen orscreens such as a design tool bar window or screen 170 interfaced with the design tool 152, a textual or text-based computing environment screen 172 interfaced with the textual computing environment 154, and a graphical or graphics-based computingenvironment screen 174 interfaced with the graphical computing environment 156. With continuing reference to FIG. 1A, constructs or patterns 176 may be predefined by a user or a system administrator for each computing environment context and stored in a constructs memory 178. The constructs 176 may be displayed as a list180 or palette of associated construct icons 182 in the tool bar window 170. As described in detail below, the users may modify the constructs 176, construct icons 182 or the list 180 of construct icons 182. For example, the users may add, delete,rename, import or export the constructs 176 or construct icons 182. The users may organize the list 180 of constructs 182 in accordance with their preferences. With continuing reference to FIG. 1A and further reference to FIG. 1B, an exemplary model designing system 100 may include multiple layers, e.g. computing layers. The model designing system 100 may include the textual and graphical environments152, 154 illustrated as first and second layers 184, 186. A third layer 188 may be a transformation layer. A fourth layer 190 may be the design tool 152. In an exemplary embodiment, the design tool 152 may be a standalone graphical application whichmay include a floating bar window. The transformation layer may transform the construct icons 182 as the construct icons 182 pass through the transformation layer and into one of the first and second layer 184, 186. A layer may be added in betweenexisting layers. Further, the order of two or more layers may be switched. One or more layers may be switched to an on- or off-state. The layer may be locked to prevent changes to the layer, or unlocked to allow changes to the layer. The layer 182,184 may have one or more windows cut out of it, such as a window 191 in the second layer 186. With continuing reference to FIG. 1A, an example of the textual computing environment 154 includes a text-based computing environment such as a computer script language such as MATLAB.RTM. by The MathWorks, Inc. of Natick, Mass. TheMATLAB.RTM. is a high-performance language for technical computing. It integrates computation, visualization, and programming in one environment where problems and solutions are expressed in familiar mathematical notation. MATLAB.RTM. employs amatrix-based mathematical programming language which can operate on numeric arrays of vectors and matrices, character arrays, cell arrays, etc. Other examples of the text-based environment include C code, Python script, Javascript script, hardwaredescription language, and Octave. The examples of the graphical computing environment 156 may include graphical modeling environments such as a block-based SIMULINK.RTM. and a chart-based STATEFLOW.RTM. by The MathWorks, Inc. of Natick, Mass. The SIMULINK.RTM. andSTATEFLOW.RTM. are software packages that enable the user to model, simulate, and analyze systems whose outputs change over time using the block diagrams or charts. Such systems are often referred to as dynamic systems. The SIMULINK.RTM. andSTATEFLOW.RTM. can be used to explore the behavior of a wide range of real-world dynamic systems, including electrical circuits, shock absorbers, braking systems, and many other electrical, mechanical, fluid, thermodynamic, quantum and biological/lifesystems. Block diagrams and charts are graphical entities having an ""executable meaning"" that are created within the modeling computing environment for modeling a dynamic system, and generally comprise one or more graphical objects. For example, a block diagram model of a dynamic system is represented schematically as a first collection of graphical objects, such as nodes, that are interconnected by another set of graphical objects, generally illustrated as lines, whichrepresent logical or physical connections or decision/process flow between the first collection of graphical objects. The line segments are often referred to as ""signals"". Signals correspond to the time-varying quantities represented by each lineconnection and have values at each time instant and are not electromagnetic signals. A signal can be read from a location and stored at another location. Each node may represent an elemental dynamic system, component or algorithm, and the relationshipsbetween signals and state variables may be defined by computations, sets of equations, etc. represented by the nodes. Inherent in the definition of the relationship between the signals and the state variables is the notion of parameters, which are thecoefficients of the equations. The equations define a relationship between the input signals, output signals, state, and time, so that each line represents the input and/or output of an associated elemental dynamic system. A line emanating at one nodeand terminating at another signifies that the output of the first node is an input to the second node. The source node of a signal writes to the signal at a given time instant when its system equations are solved. The destination nodes of this signalread from the signal when their system equations are being solved. Those skilled in the art will recognize that the term ""nodes"" does not refer exclusively to elemental dynamic systems but may also include other modeling elements that aid in readabilityand modularity of block diagrams. The STATEFLOW.RTM. charts are graphical diagrams used to capture behavior of reactive systems and processes. The data flow blocks are block diagrams that describe a graphical programming paradigm where the availability of data may be used toinitiate the execution of blocks, where a block represents an operation and a line represents execution dependency describing the direction of data flowing between blocks. For example, in a model of a physical system, the blocks may represent physicalentities such as gears, bodies, joints, pipes and the like, and the lines represent physical connection between the physical entities. The techniques and exemplary embodiments described herein may be embodied in various user interfaces, graphical models, modeling environment, and technical computing environments, including state-based and flow diagram environments, data flowdiagram environments, entity flow network diagrams, electronic design automation (EDA) environments, Schematic Layout environments, and Unified Modeling Language (UML) environments, such as those using software products of LabVIEW.RTM. or MATRIX fromNational Instruments, Inc. of Austin, Tex., Virtuoso, Incisive, or Encounter from Cadence of San Jose, Calif., Dymola from Dynasim AB of Lund, Sweden, SystemView from Elanix of Norcross, Ga., MATHEMATICA.RTM. from Wolfram Research, Inc. of Champaign,Ill., MATHCAD.RTM. from Mathsoft Engineering & Education Inc. of Cambridge, Mass., MAPLE.TM. from Maplesoft, a division of Waterloo Maple Inc. of Waterloo, Ontario of Canada, GALAXY.TM. or DISCOVERY.TM. from Synopsis, Inc. of Mountain View,Calif., Design Architect, Questa, or Board Station from Mentor Graphics Corp. of Wilsonville, Oreg., Rose from International Business Machine Corporation of Armonk, N.Y., Rhapsody from I-Logix, Inc. of Andover, Mass., or Artisan from Artisan SoftwareTools, Inc. of Beaverton, Oreg. and the like. With reference to FIG. 1C, an illustrated exemplary construct template IF-END IF 194 is predefined by the user or system administrator as a pattern of blocks for the graphical modeling or computing environment. With reference to FIG. 1D, an illustrated exemplary construct template IF-END IF 196 is predefined by the user or system administrator as a flowchart for the graphical modeling or computing environment. With reference to FIG. 1E, an illustrated exemplary construct template IF-END IF 198 is predefined by the user or system administrator as text for the text-based modeling or computing environment. With reference to FIG. 1F, an illustrated exemplary construct template TOP LEVEL ARCHITECTURE 199 is predefined by the user or system administrator for the graphical modeling or computing environment. Other examples of the constructs, which may be predefined by the user, include IF-cascade of ELSE IF-END IF, SWITCH condition--cascade of CASE, DO-WHILE loop, REPEAT-UNTIL loop, IF-nested IF condition-nested IF condition-END IF-END IF, FOR loop,SIMPLE STATE MACHINE, IF-THEN-ELSE-IF, IF-THEN-IF, IF-THEN, IF-THEN-ELSE, IF, cascade of IF-THEN, FOR-WHILE, FOR-loop, WHILE-loop, case, combination of logical signals, vector signals, conditions, conditions with subconditions, conditions which arevisually separated, UNLESS conditions, a proportional-integral-derivative (PID) controller, a proportional-integral (PI) controller, a proportional-derivative (PD) controller, an integral-derivative (ID) controller, a proportional (P) controller, aderivative (D) controller, first order through nth order filters as well as other kind of filters, joints, arms, masses, pipes, pressure vessels and combinations thereof, etc. The constructs may include parameterized constructs. For example, for aSWITCH construct, the user may be queried for a number of cases. The communication interface 132 may include any transceiver like mechanism that enables the computer 110 to communicate with other devices and/or systems, such as client computers. For example, the communication interface 132 may include one ormore interfaces. Alternatively, the communication interface 132 may include other mechanisms for communicating via a network, such as a wireless network. In one implementation, the communication interface 132 may include logic to send code to adestination device, such as a target device that can include general purpose hardware (e.g., a personal computer form factor), dedicated hardware (e.g., a digital signal processing (DSP) device or a field programmable gate array (FPGA) adapted to executea compiled version of a model or a part of a model), etc. The computer 110 may perform certain functions in response to the processor 114 executing software instructions included in the computer-readable medium, such as memory 116. A computer-readable medium may be defined as one or more memorydevices. In alternative embodiments, hardwired circuitry may be used in place of or in combination with software instructions to implement features consistent with principles of the exemplary embodiments. Thus, implementations consistent withprinciples of the application are not limited to any specific combination of hardware circuitry and software. With continuing reference to FIG. 1A and further reference to FIG. 2A, the user may select the construct icon 182 on the design tool screen 170 with the input device 122 and place the selected construct icon 182 into the computing environmentinterface screen 172, 174 associated with the desired computing environment such as the textual computing environment 154 or graphical computing environment 156. For example, the user may click with the input device, such as the mouse 122, on theconstruct icon 182 associated with a respective construct 176 within, for example, a list of construct icons 182 displayed in the design tool bar window 170, may select an appropriate entry from a pull down menu, and the like. The user may drag theselected construct icon 182 with the mouse 122, release the mouse 122 and drop the dragged construct icon 182 into one of the computing environment interface screens 172, 174 which each interfaces with a respective one of the computing environments 154,156. A monitor 220 may monitor the design tool bar window 170, detect that the construct icon 182 is selected and dropped into one of the computing environment interface screens 172, 174. More specifically, a construct determining mechanism, device,algorithm, processor, software module, or other means 230 may determine a type of a construct 176 associated with the selected construct icon 182 and placed by the user into the computing environment screen 172, 174. A computing environment determining mechanism, device, algorithm, processor, software module, or other means 240 may determine a type of the computing environment into which the user dropped the selected construct icon 182. A positiondetermining mechanism, device, algorithm, processor, software module, or other means 250 may determine a position into which the construct icon 182 is dropped. A template selector, mechanism, device, algorithm, processor, software module, or other means258 may select an appropriate template based on the determined type of the selected computing environment 154, 156 and/or other criteria such as preferred style which may be entered by the user or selected automatically based on user identification. With reference to FIG. 2B, the user may select a construct icon 260 representing and associated, for example, with a construct ""DO-WHILE"". For example, if the user drops the selected construct icon 260 into a text-based modeling or computingenvironment screen 262, a corresponding template including text ""DO-WHILE"" 264 is selected. If the user drops the selected construct icon 260 into a block-based graphical modeling or computing environment screen 266, a corresponding template includingblock diagram 268 representing the construct ""DO-WHILE"" is selected. If the user drops the selected construct icon 260 into a chart-based graphical modeling or computing environment screen 270, a corresponding template including a flowchart 272representing the construct ""DO-WHILE"" is selected. With reference again to FIG. 2A, a template inserter, mechanism, device, algorithm, processor, software module, or other means 280 may insert the selected template at the determined position in the computing environment 154, 156 with theknowledge of context. After the model is created in the manner described above, time-dependent mathematical relationships among the selected system's inputs, states, and outputs may be determined. The system further may be simulated from a specifiedstart time to a specified stop time. The deployable software systems or descriptions of hardware systems that mimic the behavior of either the entire model or portions of the model may be produced. With reference again to FIG. 1A and further reference to FIG. 3, the user may select 310 the construct icon 182 on the design tool bar window 170 with the mouse 122. The user may drag 320 the selected construct icon 182 into a selectedcomputing environment interface screen 172, 174. A type of the construct 176 associated with the selected construct icon 182 may be determined 322. The user may drop 330 the dragged construct icon 182 into the selected computing environment interfacescreen 172, 174 which interfaces with respective textual or graphical computing environment 154, 156. A position of the dropped construct icon 182 may be determined 340. A type of the selected computing environment 154, 156 may be determined 350. Atemplate, corresponding to the selected construct and selected computing environment, may be selected 360. The selected template may be inserted 370 in the position of determined construct icon drop. With continuing reference to FIG. 1A and further reference to FIG. 4A, first second, third, . . . , Nth client computers 400, 410, 420, 430 of selected users may be interconnected through a network 440. For example, the selected users all areemployees of the same entity such as a corporation or the same department within the entity. Each client computer 400, 410, 420, 430 is embodied similarly to the computer 110 of FIG. 1A and includes at least the components of the computer 110 asdescribed above. A construct creating mechanism, device, algorithm, processor, software module, or other means 442 facilitates modifications of the design tool 152 and design tool bar window 170 based, for example, on a user input. With continuing reference to FIGS. 1A and 4A and further reference to FIGS. 4B and 4C, the user may create or modify the constructs 176, construct icons 182, or the constructs palette 180. The user may build a new construct using the existentconstructs. The construct palette 180 may display first icon or icons 452 for the predefined constructs and second icon or icons 454 for user created constructs. For example, the user may add, delete, rename, or export the constructs. The user mayclick on a pattern icon, button, wizard or window 460 which may guide the user through the pattern building steps. For example, the user may be presented with a pull down menu, windows or icons to select a computing environment in which the user prefersto build a new pattern. The icons may include a block icon 462 for the block-based graphical modeling or computing environment, a flowchart icon 464 for the chart-based graphical modeling or computing environment, or a text icon 466 for the text-basedmodeling or computing environment. The user may select the block icon 462 to build the new pattern as a block diagram in the block-based graphical modeling or computing environment. A block screen or window 470 may be displayed. The user may create anew pattern 472 on the block screen 470 by using the mouse 122. The user may associate the created pattern 472 with a construct icon 474 by dragging the created pattern with the mouse 122 and placing the created pattern 472 on the construct palette 180in the area 454 for the user created constructs. The pattern icon 460 may guide the user to populate other computing environments represented by a flowchart screen or window 476 for the chart-based graphical modeling or computing environment and a textscreen or window 478 for the text-based modeling or computing environment. The user may drag the created construct 472 with the mouse 122 and drop the created construct 472 into the flowchart screen and the text screen 476, 478. The design tool 152 mayrestructure the dropped construct for the appropriate computing environment context. It is contemplated that the construct palette 180 may be organized by the users according to their preferences. In one exemplary embodiment, the user may click on the pattern wizard 460 which may guide the user through the building steps for a pattern template or construct which is independent and different from any computing environment. The design toolmay convert the construct created in such independent environment into a block for the block-based graphical modeling or computing environment, a flowchart for the chart-based graphical modeling or computing environment, or a text for the text-basedmodeling or computing environment depending on into which environment the construct is inserted. The modified or newly created construct may be saved in the design tool 152. For example, when the modifications are made to the design tool 152 and/or the design tool bar window 170 by the user of the first computer 400, an exporting/importingmechanism 480 propagates the modifications to the design tools 152 and/or design tool bar windows 170 of the second, third, and Nth client computers 410, 420, 430. In one embodiment, the design tool 152 and/or design tool bar window 170 of each clientcomputer 410, 420, 430 is updated by broadcasting a message among the client computers 400, 410, 420, 430. In another embodiment, the design tool 152 and/or design tool bar window 170 of each client computer 400, 410, 420, 430 is automatically updatedvia an updating mechanism 482 such as a server using, for example, a push or a pull protocol known in the art. In one embodiment, a host computer may embody the construct creating mechanism 442 to modify the constructs, etc. and/or the exporting/importing mechanism 482 to make newly created constructs available for use by the users of the selectedcomputers. With continuing reference to FIG. 1A and further reference to FIG. 4C, a construct can be created by using a multi-touch sensing or rear-projecting device embodied within the display 130. The user may touch and hold the construct icon 484 andtouch a point 486 in the block screen. Alternatively, this may be a drag and drop operation. A resulting new pattern or construct 488 is illustrated in FIG. 4D. As described above, the newly created construct 488 may be saved in the design tool 152. The construct palette 180 may be updated with an icon 490 corresponding to the newly created construct 488. With reference to FIG. 5, the exemplary embodiment of FIG. 1A may be embodied as a computer system 500 which may include a computer 510. The computer 510 may include a computer readable medium 520 embodying software for implementing the systemsand methods described herein to operate the computer 510. Optionally, the computer system 500 includes a connection 530 to a network 540 for the computer 510 to send and receive information such as software, data, documents and the like from othercomputer systems. The design tool may be embodied in many different ways as a software component. For example, it may be a stand-alone software package, or it may be a software package incorporated as a ""tool"" in a larger software product, such as, for example,a mathematical analysis product or a test generation product. It may be downloadable from a network, for example, a website, as a stand-alone product or as an add-in package for installation in an existing software application. It may also be availableas a client-server software application, or as a web-enabled software application. The methods and tools described above allow the user to drag and drop entire design constructs into the modeling computing environment. The cross environment design tool provides the template functionality based on predefined and customizabledesign patterns seamlessly working across textual and graphical computing environments. Further, the described design tool provides users at-design-time support and guidance to keep their models clean and efficient. Generally, any architectural structure can be utilized, such as multi-core, multi-device (e.g., distributed configurations), LAN events and the like. Certain portions of the exemplary embodiments may be implemented as ""logic"" that performs one or more functions. This logic may include hardware, such as hardwired logic, an application specific integrated circuit, a field programmable gatearray, a microprocessor, software, or a combination of hardware and software. No element, act, or instruction used in the description of the exemplary embodiments should be construed as critical or essential to the exemplary embodiments unless explicitly described as such. Also, as used herein, the article ""a"" isintended to include one or more items. Where only one item is intended, the term ""one"" or similar language is used. Further, the phrase ""based on,"" as used herein is intended to mean ""based, at least in part, on"" unless explicitly stated otherwise. While various embodiments have been described above, it should be understood that they have been presented by way of example only, and not limitation. Thus, the breadth and scope of the described should not be limited by any of theabove-described exemplary embodiments, but should instead be defined only in accordance with the following claims and their equivalents."
2|http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=87&p=2&f=G&l=50&d=PTXT&S1=(python.CLTX.+or+python.DCTX.)&OS=ACLM/python&RS=ACLM/python|System for translating diverse programming languages|A computer language translator that translates all or any portion thereof of source code in an original computer language to source code in a target computer language, which may then be translated back to the original language while still maintaining concept, syntax, form of expression, and formatting of the original source code.|"1. A computer language translator for translating a first Object-Oriented Programming (OOP) computer language source code to a second OOP computer language source code andcomprising: a computer having a storage, said computer having translating software executing thereon, the translating software including: an emulated Application Programming Interface (API) library including a table accessible by said translatingsoftware on the computer; said API library having data indicative of types of data manipulations between the first OOP computer language source code and the second OOP computer language source code; said table including second computer language APIequivalent functions callable by said second OOP computer language source code; said translating software identifying the type of data manipulation the first OOP computer language source code performs and accessing the table of said API library andcorrelating the type of data manipulation the first OOP computer language source code performs to the second OOP computer language source code; said translating software generating the second OOP computer language source code based in part uponidentified the API equivalent functions in the second OOP computer language source code. 2. The computer language translator according to claim 1 wherein the translator is a bi-directional translator. 3. The computer language translator according to claim 2 wherein said translating software analyzes the second computer language source code to identify the type of data manipulation that the second computer language source code performs,accessing said library and correlating the type of data manipulation the second computer language source code performs to first computer language source code. 4. The computer language translator according to claim 3 wherein the correlation from the second computer language to the first computer language is independent of the context in which the second computer language source code is used, saidtranslating software generating re-translated first computer language source code that emulates the type of data manipulation the second computer language source code performs. 5. The computer language translator according to claim 2 wherein the re-translated first computer language source code equates to the first computer language source code in: context, syntax, form of expression and formatting. 6. The computer language translator according to claim 1 wherein said translating software performs a name adjustment when an incompatibility between the first computer language source code and the second computer language source code occurs. 7. The computer language translator according to claim 1 wherein the first computer language source code comprises a class. 8. The computer language translator according to claim 7 wherein the class consists of units selected from the group consisting of: methods, data fields, inner-classes, and combination thereof. 9. The computer language translator according to claim 1 wherein the first computer language source code comprises an identifier. 10. The computer language translator according to claim 9 wherein said software performs a name adjustment when an incompatibility between the identifier and the second computer language source code occurs. 11. The computer language translator according to claim 1 wherein said software generates a tagged element inserted in the second computer language source code indicative of a type of data manipulation the first computer language source codeperforms. 12. The computer language translator according to claim 11 wherein the tagged element comprises information selected from the group consisting of: formatting, translation data, and first computer language source code. 13. The computer language translator according to claim 1 wherein the first computer language is Java and the second computer language is C++ or C#. 14. The computer language translator according to claim 1 wherein the first computer language is C# and the second computer language is C++. 15. The computer language translator according to claim 1 wherein the first or the second computer language is a scripting language. 16. The computer language translator according to claim 15 wherein the scripting language is selected from the group consisting of JavaScript, Ruby, Python, Perl and PHP. 17. The computer language translator according to claim 1 further comprising a parser for parsing the first computer language source code into parsed elements. 18. A method for translating a first Object-Oriented Programming (OOP) computer language source code to a second OOP computer language source code comprising the steps of: providing a computer with a storage, the computer having translationsoftware executing thereon; providing an emulated Application Programming Interface (API) library having data indicative of types of data manipulations between the first OOP computer language source code and the second OOP computer language source code; providing a table that is part of the API library including second computer language API equivalent functions callable by said second OOP computer language source code; identifying the type of data manipulation the first OOP computer language sourcecode performs; accessing the table and correlating the type of data manipulation the first OOP computer language source code performs to the second OOP computer language source code; and generating said second OOP computer language source code based inpart upon identified the API equivalent functions in the second OOP computer language source code. 19. The method for translating according to claim 18 further comprising the steps of: identifying the type of data manipulation the second computer language source code performs; accessing the table and correlating the type of datamanipulation the second computer language source code performs to first computer language source code; and generating first computer language source code based in part upon identified equivalent functions in the first computer language, manipulation thesecond computer language source code performs. 20. The method for translating according to claim 19 wherein the re-translated first computer language source code equates to the first computer language source code in: context, syntax, form of expression and formatting. 21. The method for translating according to claim 19 wherein the first computer language is Java and the second computer language is C++ or C#. 22. The method for translating according to claim 19 wherein the first computer language is C# and the second computer language is C++. 23. The method for translating according to claim 19 wherein the first or the second computer language is a scripting language. 24. The method for translating according to claim 23 wherein the scripting language is selected from the group consisting of JavaScript, Ruby, Python, Perl and PHP. 25. The method for translating according to claim 19 further comprising the step of parsing the first computer language source code into parsed elements. 26. The method for translating according to claim 18 further comprising the step of performing a name adjustment when an incompatibility between the first computer language source code and the second computer language source code occurs. 27. The method for translating according to claim 18 further comprising the step generating and inserting a tagged element in the second computer language source code indicative of a type of data manipulation the first computer language sourcecode performs. Description FIELD OF THE INVENTION The present invention relates to a system and method for translating source code between different computer languages and different operating environments. More specifically, the present invention relates to a bi-directional computer languagetranslator where source code written in an original language may be translated to a target language, and then may be translated back to the original language while still maintaining concept, syntax, form of expression, and formatting of the originalsource code.BACKGROUND OF THE INVENTION Computer systems and applications have reached almost every market on a global scale. As a result, vast sums of money are spent in researching and developing new applications and programs. Typically, these applications are written in acomputer language selected by a software developer or by a group of software developers. A trend among software developers has been toward use of object-oriented programming (""OOP"") languages. Three major categories of OOP languages are (1) systems programming languages, which are generally unmanaged and natively compiled and, inturn, executed natively; (2) productivity-oriented business application programming languages, which are generally managed and compiled to non-native bytecodes or a non-native intermediate language (""IL"") and, in turn, executed non-natively by a managedruntime environment or virtual machine; and (3) scripting languages, which are generally managed and expressed in plain text source code instead of a binary form like compiled languages, and, in turn, plain text source code is executed non-natively by ascripting runtime environment or virtual machine. Scripting languages are relatively easy-to-program computer languages that use simpler and more permissive forms of expression than compiled languages, such as Java and C++. Scripting language programs are usually expressed in plain text assource code instead of a binary form like compiled programs, which makes them very readable and easy to modify. They are generally interpreted instead of being explicitly compiled by the programmer. This means that programmers see immediate resultsfrom their programming statements and makes for a very interactive development experience. These features make scripting languages well suited for beginners, experimentation and research, system administrative tasks, and high-productivity,fast-turn-around development projects. Scripting languages are becoming dominant in Web programming, both for Web server and Web client programming. Scripting languages are also used in, for example, Adobe Flash, integrated runtime environments fromAdobe, Microsoft, and Sun, desktop operating environments like Mac OS X, as well as mobile devices, such as iPhone. For these reasons, scripting languages are very popular with programmers and the range of devices that supports them continues to grow. Systems programming languages are typically used for developing performance critical applications, operating systems, operating environments, operating system specific applications, managed runtime environments and virtual machines, embeddedsystems, and hardware specific software, such as for instance, device drivers. Systems programming languages are generally lower-level languages which offer finer control over the run-time execution of applications. Systems programming languagesinclude, for instance but are not limited to C and C++. Productivity-oriented business application languages are typically used for developing applications for electronic commerce, wireless devices, multimedia devices and platforms, accessing databases, web applications, and other business-relatedneeds. Productivity-oriented business application languages are generally higher-level languages which offer greater programmer productivity and increased reliability during the run-time execution of applications. Business application languagesinclude, for instance but are not limited to Java.RTM. and C# (pronounced, ""C-Sharp""). These however, are just a few of the many OOP languages that may be utilized in generating applications. Traditionally, software developers choose one computer language for systems programming and another for business applications programming. In doing so, however, they must make sacrifices and accept the tradeoffs of the selected language. Theapplication, design methodology, and business model may all factor into the choice of programming language used for a particular application. For instance, C++ is typically viewed as an advantageous language for creating large-scale applications, whereas Java is typically viewed as optimized for the distribution of program objects in a network such as the Internet. Java is generallyconsidered a higher level language than C++, that is, closer to the actual business application. As a result, many programmers prefer to write programs in Java because it is generally considered an easier language to use than C++. Another advantage Java provides is that Java objects cannot contain references to data external to themselves or other known objects. This ensures that an instruction input by a programmer cannot contain an address of data storage in anotherapplication or in the operating system itself, either of which could cause the program and possibly even the operating system to terminate or crash. In addition, Java utilizes a virtual machine that makes a number of checks on each object to ensureintegrity. This results in a finished application that is not prone to low-level memory errors and requires considerably less debugging. C++ on the other hand does not have these safety functions such that a programmer may inadvertently or maliciouslycause problems with the operating system. In addition, many of the computer viruses seen today exploit this characteristic of C++ to cause widespread computer problems. Many of these problems could be avoided by utilizing Java because of the built-insafety checks and balances inherent to the language. Alternatively, there are some distinct advantages associated with C++ as opposed to Java. For instance, C++ is generally considered a higher performance language than Java. Once an application is written in C++, it may be compiled to nativecode or machine code, as opposed to Java, which is typically compiled into bytecode. As a result, unlike Java, a program compiled into native code does not need to operate with a virtual machine, which results in increased application performance. Another advantage to compiling a program to native code is that it is very difficult to derive the C++ source code from the native code, whereas it is a fairly simple matter to derive the Java source code from the compiled bytecode. Therefore, C++ canprovide greater protection for a company's intellectual property. In view of the forgoing, there is an inherent tension between using Java and using C++. Many programmers would prefer to write programs in Java, however many companies want their end product to be completed in C++ so that it may be compiledinto native code. However, companies also recognize the benefits of using Java, realizing that it may be a faster and less expensive way to get new products and services to market. This is because Java is generally considered an easier language to useand also because of the greatly reduced debugging time associated with new applications. Historically it has been very difficult or nearly impossible to convert a program written in C++ to Java and/or vice versa. To do so requires manual porting, which is generally labor intensive, error prone, and requires extensive re-testing. To address these issues and minimize the differences between computer languages, a number of existing systems have tried a number of approaches. These include for instance: (1) cross-language interoperability layers and object mappingmechanisms; (2) native compilers for traditionally non-natively compiled languages; (3) programs which convert or migrate computer programs from one language to another language; and (4) programs which translate computer programs between differentcomputer languages. None of these approaches, however, have provided an acceptable solution. For instance, one approach taken is cross-language interoperability layers and object mapping mechanisms including the Sun Microsystems.RTM. Java Native Interface.TM. (JNI), the Microsoft.RTM. Common Object Model.TM. (COM), and the ObjectManagement Group.RTM. (OMG) Common Object Request Broker Architecture.TM. (CORBA). Such solutions are generally suited for integrating two or more different computer languages and operating environments. However, they do not eliminate the need formiddleware, such as virtual machines, managed runtime environments, and object request brokers (ORBs), but instead increase dependence on these. This dependence make these solutions unsuitable for demanding low-level systems programming for developingfor instance, operating systems, virtual machines, and embedded systems. A second approach taken includes native compilers for traditionally non-natively compiled languages including, for instance, the GNU.RTM. Compiler for Java (GCJ) and the Excelsior JET. The GNU Compiler for Java (GCJ) is a free (open source)software project and is disclosed in U.S. Pat. No. 6,110,226. These products compile Java source code or Java bytecode, a platform-independent intermediate language, to native binary executables. The GCJ compiler may generate native binaryexecutables, which do not require a virtual machine to execute program, so long as the compiled Java program does not make use of Java classes or objects, which are externally referenced or otherwise not natively compiled. In the latter case, thecompiled native binary executable requires an internal (statically-linked) or external (dynamically-linked) virtual machine, which suffers from the same drawbacks as cross-language interoperability layers and object mapping mechanisms. Alternatively,Excelsior JET for instance, generates native binary executables that generally depend on the presence of a virtual machine on the client system in order to run. However, these requirements carry the same drawbacks as common cross-languageinteroperability layers and therefore negate most of the benefits of native compilers. While the GCJ compiler does support interoperability with C++ through CNI (Cygnus.RTM. Native Interface), this means of interoperability however, is effectively limited to the GNU C++ compiler. GCJ does not support interoperability withleading platform-specific C++ compilers, such as Microsoft Visual C++.RTM. for Microsoft Windows.RTM. operating system, nor does it support the industry-standard JNI to interoperate with leading Java virtual machines. Additionally, native compilers donot translate source code to another computer language, so they do not inherently benefit from wealth of available software development tools, such as compilers, linkers, optimizers, and debuggers, or features of other popular computer languages, such asC++. A third approach has been to convert or migrate source code in one computer language to another computer language. This approach is disclosed in U.S. Pat. No. 6,453,464 (""the '464 patent""). This approach is directed toward migrating sourcecode from an aging computer language, such as for instance COBOL, to an OOP language, such as Java. However, the resulting translated source code does not fully preserve the style and spirit of the original source code, is not easily human-readable, anddoes not support translation back to the original language. Therefore, the system disclosed in the '464 patent cannot be used for bi-directional translation between OOP languages to combine the best features of both languages. A fourth approach taken has included computer language-to-computer language translation. Existing translators include Toba, C2J, and J2C, among others. These solutions, however, have severe limitations of their respective design andimplementation. For instance, they fail to: manage objects exactly like the original language, manage arrays exactly like the original language, maintain the same high-level of thread safety characteristic in the original language, and support the fullbreadth of features of the original language. Additionally, none of these approaches support nor addresses bi-directional translation. Still further, these one-way translation approaches generally require translation of the entire application at onetime, rather than providing for translation of only a file or a portion of a file. Most modern scripting languages support Object-Oriented Programming (OOP) features. Such object-oriented scripting languages include, but are not limited to, JavaScript, Ruby, Python, recent versions of Perl and PHP. Object-orientedprogramming features make such scripting languages easier to understand and their programs more maintainable. Further, to assist programmers, modern object-oriented programming languages have their own language-specific API class library. However, not all the world's programmers are proficient in scripting languages and not all the world's devices support, or efficiently support, scripting languages. For example, a developer proficient in C++ or Java may prefer to run anexisting C++ or Java program in a scripting environment. To do so, the developer would need to become proficient in the target scripting language and its associated API class library and would need to manually rewrite the existing C++ or Java program inthe target scripting language. As another example, a developer proficient in a certain scripting language, such as JavaScript, Python, Ruby, Perl or PHP, would need to rewrite the program in C++ in order to run on an embedded or mobile device that didnot support scripting languages. Further, not all scripting languages are supported on all devices that support scripting. For example, Web browsers generally only support JavaScript and not Ruby, Python, Perl or PHP. Still further, a developer may need to produce a programthat runs at peak efficiency on a device. Even though the device supports scripting languages, in order to perform at maximum speed and efficiency, the program must instead use a compiled programming language, such as C++. In this example, thedeveloper would need to be proficient in C++ and either create or rewrite the program in C++ in order to meet the project requirements. Further, there is a vast amount of source code, especially open source programs, readily or freely available on the Internet and through various other forms of distribution, such as CD-ROM and DVD-ROM. However, usually an individual program isonly available for one particular computer language or perhaps a few computer languages. It is common for software developers to come across source code, especially by searching the Internet or by examining public source code repositories, which meettheir needs except that the source code they have found is in a different computer language than their project requires. Such developers are faced with either manually porting the source code to their target computer language or limit their searchresults to only source code in their target computer language, neither option being desirable. Further, for various business and technical reasons, certain devices will lack support for a particular scripting language and scripting runtime environment. The ability to add support for a particular scripting language and scripting runtimeenvironment would be a desirable feature for consumers and vendors alike, especially if the feature could be provided entirely in software without requiring any hardware modifications. For example, the lack of support for Adobe Flash and its associatedscripting language ActionScript on the iPhone has been a cause for complaint on the part of present and prospective iPhone user alike. At present, the wide range of Adobe Flash and ActionScript language programs are not available to iPhone users. Further, the inherent nature of scripting language programs being expressed in plain text source code is highly undesirable for certain applications and certain organizations. In order to safeguard intellectual property, preserve trade secrets,and prevent tampering, especially related to computer security, online crime, and circumventing protection schemes for digital media, it would be essential that certain applications only be distributed in compiled binary form. This would either precludescripting languages for such applications, or it would necessitate manually porting existing scripting language programs to a compiled language before being externally distributed. For these reasons, it is desirable for an invention to automatically translate source code from an object-oriented scripting language to a compiled object-oriented programming language. In line with this, it is further desirable to seamlessly and automatically translate a program at runtime, such as during the process of downloading and starting the program, from a foreign, or unsupported, object-oriented scripting language toa scripting language for which the host device includes built-in support. Further, it is desirable for an invention to automatically translate source code from a compiled object-oriented programming language to an object-oriented scripting language. Still further, is desirable for an invention to automatically translate source code from an object-oriented scripting language to another object-oriented scripting language. It is further desired to provide a computer language translation system that may be coupled with associated software libraries and accurately and reliably translate source codes between higher-level productivity-oriented business applicationprogramming languages and systems programming languages. It is still further desired to provide a bi-directional computer language translation system that may accurately and reliably translate source code from a higher-level productivity-oriented business application programming language to a systemsprogramming language and back again. It is yet further desired to provide a computer language translation system that is usable with multiple computing platforms, operating systems, and operating environments. It is also desired to provide a computer language translation system that provides deterministic automated object management without a garbage collector in order to be suitable for embedded systems. It is still further desired to provide a computer language translation system that may utilize industry-standard compiler tools, such as for instance, ANSI.RTM. C++ compilers. It is yet further desired to provide a computer language translation system that will be virtual machine agnostic, specifically, that will be able to operate without a virtual machine, or conversely, if desired, able to interoperate with anindustry standard virtual machine. It is still further desired to provide a computer language translation system that adheres to industry standards for cross-language interoperability, such as JNI for interoperability between Java environments and C++ environments. It is also desired to provide a computer language translation system that can be utilized by an Internet or Intranet search engine in order to automatically translate search results comprising source code from the original computer language ofthe found source code to the preferred computer language of the user requesting the search. It is also desired to provide a computer language translation system that can be utilized by the search indexing engine of an Internet or Intranet search engine. As the search indexing engine comes across source code, the search indexing enginecan use the invention to automatically translate source code from the original computer language of the source code to a multiplicity of computer languages, and then index the source code in its original computer language as well as a multiplicity ofcomputer languages. This would allow the search engine to find more code sample in diverse computer languages regardless of the computer language of the search query itself. It is yet further desired to provide a computer language translation system that may be utilized to translate only a portion of the source code to be translated.SUMMARY OF THE INVENTION Accordingly, a bi-directional translator has been provided that translates source code from one computer language to another divergent computer language. The translated source code closely resembles the original program source code in: concept,syntax, form of expression, and formatting. The system may be utilized as either an automatic translator that automatically translates source code from one computer language to another, or may be utilized in connection with a software developmentlibrary that enables programs to be manually ported from one computer language to another. When the system is utilized to automatically translate, a software tool is provided that automatically translates programs written in for instance, the Java language to the C++ language or from or to a scripting language, such as JavaScript,Python, Ruby or Perl. The tool makes use of tables and specific language knowledge of Java and C++ or the scripting language. This tool does not require clean-up or hand editing after translation. The final translated programs may be built and run asis. Alternatively, if the system is used by a programmer who is manually porting the source code, a software development library that implements the Java language and core APIs in ANSI standard C++ syntax is provided. Manually ported C++ programs,which make use of the library, closely resemble the original programs in the Java language. Because of the nature of divergent OOP languages, such as Java and C++ or scripting languages, the divergent languages are incompatible, meaning that one word does not simply translate straight to another word. For instance, the way variablesare identified in Java is different than in C++. To achieve bi-directional translation, the system, in resolving incompatibilities performs a name adjustment that is consistently utilized throughout. Because the name adjustments are always consistent,the system may re-translate either the entire document or only small sections as desired. The system also utilizes tagged elements or tags, which are inserted by the system to control how for instance; a specific section of source code is translated. The tagged element may include a Java instruction inserted into the C++translation. In this manner, if the Java source code instruction is incompatible with any C++ source code instruction, the original is not lost, but instead is maintained in a tagged element within the C++ source code. This feature facilitatesbi-directional translation because the original language may be exactly re-created from the translation, even with incompatibility problems. Throughout this application the following definitions apply: The term ""data"" as used herein means any indicia, signals, marks, domains, symbols, symbol sets, representations, and any other physical form or forms representing information, whether permanent or temporary, whether visible, audible, acoustic,electric, magnetic, electromagnetic, or otherwise manifested. The term ""data"" as used to represent particular information in one physical form shall be deemed to encompass any and all representations of the same particular information in a differentphysical form or forms. The term ""storage"" as used herein means data storage devices, apparatus, programs, circuits, systems, subsystems, or other elements whether implemented in hardware, software, or both, and whether used to process data in analog or digital form,into which data may be entered, and from which data may be obtained, as desired. Storage can be primary and/or secondary and can store data in electromagnetic, magnetic, optical, magneto-optical chemical and/or holographic forms. The term ""processor"" as used herein means data processing devices, apparatus, programs, circuits, systems, and subsystems, whether implemented in hardware, software, or both, and whether used to process data in analog or digital form. Theprocessor can operate on data in electromagnetic, magnetic, optical, magneto-optical chemical and/or holographic forms. The terms ""communicate"", ""communicating"" and ""communications"" as used herein include both conveying data from a source to a destination, as well as delivering data to a communications medium, system or link to be conveyed to a destination. Theterm ""communication"" as used herein means the act of communicating or the data communicated, as appropriate. The terms ""coupling"", ""coupled"", ""coupled to"", and ""coupled with"" as used herein each mean a relationship between or among two or more devices, apparatus, files, programs, media, components, networks, systems, subsystems, and/or means,constituting any one or more of (a) a connection, whether direct or through one or more other devices, apparatus, files, programs, media, components, networks, systems, subsystems, or means, (b) a communications relationship, whether direct or throughone or more other devices, apparatus, files, programs, media, components, networks, systems, subsystems, or means, or (c) a functional relationship in which the operation of any one or more of the relevant devices, apparatus, files, programs, media,components, networks, systems, subsystems, or means depends, in whole or in part, on the operation of any one or more others thereof. The term ""network"" as used herein means the communications linkage used to join two or more units, such as systems, networks, links, nodes, equipment, circuits, buses, and devices and includes without limitation networks of all kinds, includingcoupling amongst components of a system, both intra-networks and inter-networks and including, but not limited to, the Internet, and is not limited to any particular such network. The terms ""computer language"" and ""computer programming language"" as used herein mean a computer programming language for accomplishing software development and/or expressing the source code of a computer program. Furthermore, a ""computerprogramming language"" may or may not be classified as object-oriented. ""Computer programming languages"" include, but are not limited to, Java, C#, and C++. The terms ""virtual machine (VM),"" ""virtual machine environment,"" ""managed runtime,"" and ""managed runtime environment (MRE)"" as used herein refer to an apparatus, either software or hardware, which executes bytecode. Virtual machines may alsoinclude a platform application programming interface (API) or platform classes that bytecode programs may call or otherwise make use of. Virtual machines are designed to isolate software programs from the underlying native hardware and softwareplatform, which facilitates the creation, deployment, and execution of distributed, secure, platform-independent software programs and components. Java and C# are designed for virtual machine environments, whereas C++ is not. The term ""bytecode"" as used herein refers to a non-native binary representation of an executable program or software component. Bytecode is designed to be executed by a virtual machine. Bytecode may also be referred to as an ""intermediatelanguage (IL)."" The term ""garbage collector"" as used herein refers to an apparatus for automated object management, where allocated memory is automatically reclaimed when it is unneeded, which is accomplished through a housekeeping process. The housekeepingprocess may further include memory compaction. The housekeeping process is generally performed nondeterministically at the primary discretion of the garbage collector. Virtual machine environments, such as those for Java and C#, include a garbagecollector. Legacy and ANSI C++ programming environments do not include a garbage collector. The term ""SourceUnit"" is the smallest unit of autonomous source code, which may be compiled, interpreted, or executed, depending on the capabilities of the source language. This generally refers to an individual source code file, such as inJava, C++, or C#. In C++ and some other languages, a SourceUnit may be referred to as a ""compilation unit."" The term ""Document Object Model (DOM)"" is an object-oriented programming interface for representing the different conceptual elements of a document. Furthermore, the individual elements in a DOM may be stored in a hierarchy. The term ""SourceUnit DOM"" is a specialized DOM for representing the different conceptual elements of a source code file or document. The SourceUnit DOM is only intended for representing source code files. The conceptual elements making up aSourceUnit DOM include: single line comment, multiple line comment, package statement, import statement, class definition, field definition, implementation block, implementation statement, method definition, static constructor definition, exceptionstatement, control flow statement, and text. There is only one SourceUnit DOM per SourceUnit. The SourceUnit DOM is a complete representation of the original SourceUnit, including its formatting. Alternatively, the term ""SourceUnit DOM"" may also applyto an Abstract Syntax Tree (AST) that serves the same purpose of representing the different conceptual elements of a source code file or document. The term ""tagged element"" is a note inserted by the translator that contains extra information to be preserved through the translation process. A tagged element is embedded inside specially denoted single line comment or multiple line commentelements. This extra information captures logic and other content from the original source files that typically cannot be preserved in translation but through such tagged elements allows such logic and content to be preserved in translated results. The term ""keyword"" means a word that always has the same meaning and cannot be used for any other purpose, i.e., as identifiers. The term ""class"" is a type in an object-oriented programming language. A class may have methods, data fields, and inner-classes (classes within classes), which may all be generically referred to as ""class members."" The term ""class"" also canrefer to an ""interface."" The term ""object"" is an instance of a class. The term ""method"" is a function or procedure that a particular class may do. A method may or may not be provided with variable parameters, and it may or may not return a value. A method is always associated with a particular class, and it maybe referred to as a ""class member."" The term ""method"" also applies to constructors and destructors. The term ""constructor"" is a function or procedure that will be used to initialize an object, which an instance of a particular class. A constructor may or may not be provided with variable parameters, and it may not return a value. Aconstructor is always associated with a particular class, and it may be referred to as a ""class member."" A class must have at least one explicit or implicit constructor in order to instantiate instances of itself. The term ""destructor"" is a function or procedure that will be used to destruct an object, which an instance of a particular class. A destructor may not be provided with variable parameters, and it may not return a value. A destructor is alwaysassociated with a particular class, and it may be referred to as a ""class member."" A class may have only one destructor, which itself is optional. In Java, a destructor is called a ""finalizer."" The term ""data field"" is a variable that a particular class contains. A data field may be a numeric value, a Boolean value, an object reference, or an interface reference, or an array reference. A data field is always associated with aparticular class, and it may be referred to as a ""class member."" The term ""interface"" is a class that declares one or more methods, but it does not define (implement) any of these methods. Instead, other classes which implement a particular interface must themselves define (implement) all of the interface'smethods. The term ""class declaration"" is the declaration of a new class (or interface) type. A class declaration is sometimes referred to as a ""class interface."" It describes the constructors, destructor (finalizer), methods, data fields, andinner-classes (a class within a class) that make up a particular class. Constructors, destructor, methods, data fields, and inner-classes of a particular class may be referred to generically as ""class members."" A class declaration defines the accesscontrol for each of its class members, be they constructors, destructor, methods, data fields, or inner-classes. A class declaration also details which class this class inherits from which includes its superclass and any interfaces it implements. Certain computer languages like C++ allow separating class declarations from class implementations, whereas other languages like Java and C# combine both the class declaration and class implementation into the class definition. A public classdeclaration makes a particular class accessible so that other (external) classes can create or interact with instances of the class. In turn, other (external) classes come to depend on the class declaration, which necessitates that the class declarationremains consistent. The term ""class implementation"" is the implementation of a newly declared class type. It implements its constructors, destructor, methods, static data fields, and inner-classes. Certain computer languages like C++ allow separating classdeclarations from class implementations, whereas other language like Java and C# combine both the class declaration and class implementation into the class definition. The class implementation is not directly accessible to other (external) classes butonly the class declaration is. This means that the internal class implementation may potentially be changed without adversely affecting other classes which depend on its class declaration. The term ""class definition"" is the definition (implementation) of a new class type. The exact meaning of this term differs from computer language to computer language. For Java and C#, this refers to the combined class declaration and classimplementation. In C++, this refers only to the class implementation. In one advantageous embodiment a computer language translator is provided that includes translating software executing on a computer having a storage. The translating software is provided for translating a first OOP computer language sourcecode to a second OOP computer language source code. The translating software comprises an emulated Application Programming Interface library including a table accessible by said translating software on the computer. The API library has data indicativeof types of data manipulations between the first computer language source code and the second computer language source code. The table includes second computer language equivalent functions callable by the second computer language. The translator isprovided such that the translating software identifies the type of data manipulation the first computer language source code performs and accesses the table of the API library and correlates the type of data manipulation the first computer languagesource code performs to second computer language source code. The translator is further provided such that the translating software generates second computer language source code based in part upon identified equivalent functions in the second computerlanguage. In another advantageous embodiment a method is provided for translating a first OOP computer language source code to a second OOP computer language source code comprising the steps of providing a computer with a storage, the computer havingtranslation software executing thereon. The method further comprises the steps of providing an emulated Application Programming Interface library having data indicative of types of data manipulations between the first computer language source code andthe second computer language source code. The method further comprises the steps of providing a table associated with the API library including second computer language equivalent functions callable by said second computer language. The method stillfurther comprises the steps of identifying the type of data manipulation the first computer language source code performs and accessing the table and correlating the type of data manipulation the first computer language source code performs to secondcomputer language source code. The method also comprises the steps of generating second computer language source code based in part upon identified equivalent functions in the second computer language. The invention and its particular features and advantages will become more apparent from the following detailed description considered with reference to the accompanying drawings. BRIEF DESCRIPTION OF THE DRAWINGS FIG. 1 is a block diagram illustrating an advantageous embodiment of the present invention. FIG. 2A is a block diagram according to FIG. 1 illustrating an advantageous embodiment of the present invention. FIG. 2B is a block diagram according to FIG. 1 illustrating an advantageous embodiment of the present invention. FIG. 3 is a block diagram illustrating some steps involved in bi-directional translation according to another advantageous embodiment of the present invention. FIG. 4 is a flow diagram illustrating another advantageous embodiment of the present invention. FIG. 5 is a flow diagram according to FIG. 4 illustrating another advantageous embodiment of the present invention. FIG. 6 is a flow diagram according to FIG. 4 illustrating another advantageous embodiment of the present invention. FIG. 7 is a flow diagram according to FIG. 6 illustrating another advantageous embodiment of the present invention. FIG. 8 is a flow diagram according to FIG. 7 illustrating another advantageous embodiment of the present invention. FIG. 9 is a flow diagram according to FIG. 7 illustrating another advantageous embodiment of the present invention. FIG. 10 is a flow diagram according to FIG. 7 illustrating another advantageous embodiment of the present invention. FIG. 11 is a flow diagram according to FIG. 10 illustrating another advantageous embodiment of the present invention. FIG. 12 is a flow diagram according to FIGS. 9 and 11 illustrating another advantageous embodiment of the present invention. FIG. 13 is a flow diagram according to FIG. 11 illustrating another advantageous embodiment of the present invention. FIG. 14 is a flow diagram according to FIG. 13 illustrating another advantageous embodiment of the present invention.DETAILED DESCRIPTION OF THE DRAWINGS FIG. 1 illustrates an advantageous embodiment of translation system 100. Translation system 100 is shown including, first computer language source code 102, computer 106, translator 108, library 110 and second computer language source code 104. First computer language source code 102 may comprise any computer language however; in one advantageous embodiment comprise an OOP language such as for instance, Java, C#, C++ or scripting language, such as JavaScript, Python, Ruby, Perl and/orPHP. Computer 106 may also comprise any computer capable of receiving first computer language source code 102. Translator 108 in an advantageous embodiment comprises software, executing on computer 106 to received and process first computer languagesource code 102. While translator 108 executes on computer 106, it is not necessary that translator 108 reside on computer 106. For instance, translator 108 may comprise software residing on another computer (not shown) to which computer 106 isconnected over, for instance, a network. The network connection may comprise for instance, a hard wired and/or wireless network, e.g. employing bus connections, parallel cable, serial cable, coaxial cable, fiber optic, twisted wire pair, USB cable,infrared link, radio frequency link, microwave link, satellite link and/or the like. Also provided in FIG. 1 is library 110 which is coupled to and accessible by computer 106. In one advantageous embodiment, library 110 comprises data indicative of relationships between the first computer language source code 102 and the secondcomputer language source code 104. In another advantageous embodiment, library 110 may comprise data for correlating particular functions of the first computer language source code 102 to the second computer language source code 104. In still anotheradvantageous embodiment library 110 may comprise, for instance, a database. Once translator 108 has analyzed first computer language source code 102, translator 108 then generates second computer language source code 104. Again, second computer language source code 104 may comprise any computer language such as forinstance, an OOP language including Java, C#, C++ or a scripting language, such as JavaScript, Python, Ruby, Perl and/or PHP. Translation system 100 may be operated in various modes of operation including, fully automated, manual and/or combinationsthereof. As illustrated in FIG. 1, translator 108 generates second computer language source code 104. For instance, when first computer language source code 102 comprises Java and second computer language source code 104 comprises C++, there is a C++implementation of the Java language. There is true translation from, in this example Java to C++. This means that there is no requirement for interoperability between Java and C++ and therefore, no need to utilize a virtual machine after translation. It should further be noted that the arrows indicated from first computer language source code 102 to computer 106 and from second computer language source code 104 to computer 106 are shown bi-directional. This illustrates the bi-directionalityof translator 108. For instance, first computer language source code 102 may be input to computer 106 and be translated to second computer language source code 104. Subsequently, second computer language source code 104 may then be input to computer106 and be re-translated back to first computer language source code 102. Notably, as illustrated in FIG. 1, the re-translated first computer language source code is depicted as the same as the first computer language source code 102. This is possiblebecause translator 108 translates first computer language source code 102 independent of the context of in which it is used. In this manner, the translation of various elements of the source code is always consistent and therefore reversible because ofthe direct correlation between various elements of the first computer language source code 102 to the second computer language source code 104. FIG. 2A illustrates one advantageous embodiment of the present invention that expands translator 108 into analyzer 114 and generator 116. In this embodiment the translation process is divided into two steps: (1) analysis and (2) generation. First computer language source code 102 is input to translator 108, which has as a first block, analyzer 114. Analyzer 114 is also coupled to library 110 which, as previously discussed, comprises data indicative of relationships between thefirst computer language source code 102 and the second computer language source code 104. Analyzer 114 will analyze the function of the first computer language source code 102 and then correlate the function to second computer language source code 104. In one advantageous embodiment, analyzer 114 will logically traverse or cycle through first computer language source code 102 in order to build class declarations and/or class definitions. Analysis encompasses traversing all the elements of a particular SourceUnit DOM in order to produce high-level programming entities. For converting Java to C++ for instance, such high-level programming entities include the main public class andany supporting classes. These classes may, in turn, be made up of methods, fields, static constructors, and inner-classes. In another advantageous embodiment, analysis may also entail some language-specific pre-generation work, such as organizinghigh-level programming entities differently for certain target languages, such as C++. Once analyzer 114 has built the class declarations and/or class definitions, these are sent to generator 116 for generation of second computer language source code 104. Generation is the process of producing source code in the target languagefrom the high-level programming entities, such as public classes, produced from the analysis step. Generation may further re-organize high-level programming entities for correctness in the target language. Generation may still further entail addingembedded tagged elements where necessary so as to preserve the full semantic meaning of the original language and to facilitate bidirectional translation, if desired. One problem that the generator may encounter during generation is a conflict between keywords between the first computer language source code 102 and the second computer language source code 104. For instance, identifier names in the sourcelanguage may conflict with keywords in destination language. Such conflicts must be resolved in a consistent manner and preserve the syntactical correctness and readability of the translated result. Name resolution may require name adjustment, which isa mild form of name mangling. Identifier names which conflict with keywords or other features of the destination language must be adjusted. In such a case, the name is mildly mangled with the best effort being made to preserve the name as readable aspossible. More common standard conforming identifier names are usually mangled less than uncommon nonstandard identifiers. This strategy is weighted toward preserving the readability of content which is already deemed readable due to its standardsconformance. In an alternative embodiment, FIG. 2B illustrates another expanded view of translator 108 that includes: parser 112, analyzer 114, and generator 116. The translation process according to FIG. 2B may be divided into three steps: (1) parsing, (2)analysis, (3) generation. First computer language source code 102 is input to parser 112. Parser 112 is provided to parse first computer language source code 102 into parsed elements prior to transmission to analyzer 114 for building of class declarations and/or classdefinitions. The parser is essentially provided to turn the document into a hierarchy of elements including, for instance but not limited to: comments (such as inserting a tagged element), class definitions, variable declarations, and/or method calls. Parsing entails breaking each original language source code file down into corresponding elements in a SourceUnit DOM. The remaining elements are similar to those discussed in connection with FIG. 2A and will not be repeated here. FIG. 3 illustrates the process 200 of converting original source files to a target language and translation back to the original language. As a first step, a source code file is generated in the original computer language 205. This originalcomputer language may be any computer language as previously discussed in connection with FIG. 1. Once the source code in the original computer language is generated, the source code file in the original computer language is stored 210. This may belocal storage, for instance on the computer where the original code was generated or over a network. In addition, the storage may be permanent, semi-permanent or temporary. For instance, the original source code may be stored on a magnetic or opticaldrive and/or disk, or may only be resident in RAM. The next step is translation of source code file in original computer language to source code file in target computer language 215. This process would include for instance, the processes variously described in connection with FIGS. 1-2B. Oncethe translation process is completed, the resulting source code file in the target computer language may be (1) compiled into a binary executable program; (2) run; (3) debugged; and (4) profiled 220. To accomplish this step, any number of commercialcompilers may be utilized, for instance, Java and C# may be compiled to bytecode while C++ may be compiled to native code. The steps of running the program, debugging and profiling will be minimized due to the translation step. Finally, the resultingsource code file in the target language is modified (as necessary) and stored 225. The result is a highly accurate translation of the original source code file to the target source code file that will function as seamlessly as the original source code file, preserving the syntax and function of the original source code file. The process 200 of converting original source files to a target language is reversible as illustrated in FIG. 3. The process is reversed by the translation of the source code file in the target computer language back to the original computer language230. It should be noted however, the any modifications made to the source code file will be reflected in the re-translated source code. Once the target language source code file is re-translated to the original source code language, the resultingsource code file in the original computer language may be (1) compiled into a binary executable program; (2) run; (3) debugged; and (4) profiled 235. As previously stated, any number of commercial compilers may be utilized to accomplish this step. Ascan be seen from FIG. 3, the process 200 has returned to the step of storing the source code file in the original computer language 210. This bi-directional translation process 200 is possible in part, because the translation from the original source code to the target source code is accomplished without regard to the context. The translation of elements is always consistent,and thereby reversible. For instance, keywords and identifiers are always resolved in a consistent manner and preserve the syntactical correctness and readability of the translated result. FIG. 4 is a flow diagram illustrating the steps taken in one advantageous embodiment by translation system 300 in translating source code from an original computer language to a target computer language. Translation system 300 provides thesignificant benefits of: maintaining the logic, expression, and formatting of the original source code files through translation, which in turn, facilitates re-translation back to the original computer language. The process may for instance, beuser-initiated or initiated as a batch process and after initiation is fully automated, requiring no further user involvement. Further, FIG. 4 details the various hierarchical array types and hierarchical array references types and their relationship to one another and other objects in the system. The array types support storing both one-dimensional andmulti-dimensional storage of array elements. In addition, the hierarchical array reference types fully support inheritance for themselves and the elements they contain. In one advantageous embodiment, element count is read-only and is fixed when thearray is created. One problem associated with reference types is that external classes for instance, in C++ are stored in their own files called (""header files""). If one class makes use of another class, it must include the other class' header file before itdeclares its own class. A problem arises when the classes refer to each other creating a circular dependency. However, translation system 300 obviates this problem by declaring reference types in their own files. A reference type file then only needsto include the header file of its superclass and implemented interfaces. A superclass is a parent of the class that extends from it, and subclasses (or child classes) can never be their own parent thereby preventing the circular dependency problem. Another advantage to this embodiment of the present invention is that the second computer language source code is utilized to implement types of data manipulations of the first computer language source code. When translating from Java or C# toC++, this provides the benefit of eliminating the need for a virtual machine because there is implementation of the original language's (i.e., Java or C#) platform classes in the target language (i.e., C++). In another advantageous embodiment of the present invention, no garbage collector is required to automatically manage objects. Rather, translation system 300 automatically provides for object management making translation system 300 suitablefor use with embedded systems. As an initial step, the user (or the script file of a batch process) specifies the following: directory path of source code file(s), directory path of pre-translated source code files (if any), and file types to generate in target language 302. Of course, this initial step assumes that, the source code files in the original language (i.e., Java or C#) 304 have already been generated. In addition, pre-translated software class library (i.e., native implementation of Java platform classes, or C#and NET platform classes in target language) 306, and pre-translated class declaration file(s) in target language 308 have been provided. The next step is that the user (or the batch process) starts the translation process 310 followed by generation of the list of packages from the specified directory path of source code files 312. As used herein, source code projects are made upof one or more packages, which in turn variously comprise: classes, fields, methods, inner classes, blocks, statements and/or combinations thereof. A source code project includes all the source code files related to a particular software applicationprogram. Translation system 300 then iterates through the packages 314 so as to generate a package importation file(s) in the target language 316, which in turn results in a generated package importation file in the target language 318. The next stepis to generate a list of source file(s) from the specified directory path(s) of source code files 320. Translation system 300 then iterates through each source code file 322. At this point, translation system 300 resolves whether the source code file exists 324. If the source code file does not exist, translation system 300 will notify the userthat the source code file does not exist 326 and will return to allowing the user to specify the directory path 302. If however, the source code file does exist, translation system 300 proceeds to parse source file into tree of source code elements, including formatting, using an event-driven parser such as, for instance, Simple API for XML (SAX) 328. Thishigh level parsing of the source code file results in the generation of source code document (SourceUnit DOM) 330. The parsing step is essentially provided to turn the source code file into a hierarchy of elements and is discussed in more detail inconnection with FIG. 2B. Next, translation system 300 performs an analysis of the source code by analyzing the source code element tree in the source code document into class definitions 332. The next step is to analyze imported pre-translated class declaration file(s)into class declarations 334. At this point, translation system 300 has logically traversed or gone through all of the parsed elements to build class definitions and class declarations to be used for generation of the target source code. In the buildingof the class definitions and class declarations, some preliminary broad pre-translation to the target language may also take place. This analysis has also been previously discussed in connection with FIG. 2A. We next move to the actual generation of the target source code. As an initial step, translation system 300 generates a class importation file in the target language 336, which results in a generated class importation file in the targetlanguage 338. The next step is to generate a class reference type definition file in the target language 340, which also results in a generated class reference type file in the target language 342. Following this step is to generate a class declarationfile in the target language 360, which too results in a generated class declaration file in the target language 344. The process of generating the class declaration file is described in more detail in connection with FIG. 5. Finally, translation system300 generates a class implementation file in the target language 400, which results in a generated class implementation file in the target language 346. This step is also described in greater detail in connection with FIG. 6. This generation step hasalso been discussed in connection with FIG. 2A. This completes the translation process of the specified source file such that translation system 300 proceeds to the next source file 348 and/or the next package 350, and returns to iterating through the packages 314. The process will berepeated until all packages have been translated. FIG. 5 is an expanded view of the step of generating a class declaration file in the target language 360. As an initial step, analysis of class definitions in the original language 362 is performed, followed by generation of statements forreferencing external classes in the target language 364. The next step is to iterate through the class definitions in the original language 366. For Java and C#, this includes for instance, one public class and zero or more private implementationclasses. Once this step is completed, the system may generate static field declarations 368. The system then iterates through the method definitions 370. In this context, method refers to static initializer, constructors, destructor (finalizer), andmethods. Again, once this step is completed, the system may generate method declaration(s) in the target language 372. If there are additional method definitions 374 and/or additional class definitions 376, the system will continue to iterate throughthose; if not the system will complete this step and move on to generating a class implementation file in the target language 400 as shown in FIG. 4. FIG. 6 is an expanded view of the step of generating a class implementation file in the target language 400. Initially, analysis of class definitions in the original language 402 is performed. For Java and C#, this includes for instance, onepublic class and zero or more private implementation classes. This is followed by generation of statements for referencing external classes in the target language 404. This corresponds to ""import"" statements in Java and C#, and ""#include"" and ""using""statements in C++. The system next iterates through class definitions in the original language 406 and then generates static field definitions 408. The system then proceeds to iterate through method definitions 410. Again, in this context, methodrefers to static initializer, constructors, destructor (finalizer), and methods. The system may then generate out-of-line classes corresponding to anonymous inner-classes 412. In Java, anonymous inner-classes are defined inline within individualstatements. These anonymous inner-classes are produced, in one advantageous embodiment, during analysis by analyzing the statements making up a method definition. The system next proceeds to generate statements in the target language 414. Again, inone preferred embodiment, references to anonymous inner-classes in individual statements are replaced with references to the corresponding generated out-of-line class names. If there are additional method definitions 416 and/or additional classdefinitions in the original language 418, the system will continue to iterate through those. If there are none left, the system will complete this step and proceed to determining if there is another source file 348 as shown in FIG. 4. FIG. 7 is an expanded view of the step of generating statements in the target language 414. FIG. 7 generally describes one advantageous embodiment of the process for translating a statement in the original language to the source language usingsimulated keywords and embedded tagged elements. This process enables results to be for instance, translated back to original language. The system starts with a statement in the original language 420. Initially, the system parses the statement into sub-statements 422 and then iterates through the sub-statements 424. The system then determines if the sub-statement requires areference type or a referenced type 426. This step is described further in connection with FIG. 8. If it is determined that a reference type is required, the system proceeds to parse the reference type name identifier 428, and replace the referencetype name identifier with an adjusted name for the target language 430. This step is described further in connection with FIG. 9. Once this step is completed, the system proceeds to parse the sub-statement into expressions 432. Alternatively, inconnection with determining if the sub-statement requires a reference type or a referenced type 426, if the system determines that a referenced type is required, the system will also proceed to parse the sub-statement into expressions 432. Once thesub-statements have been parsed into expressions, the system iterates through the expressions 434 and parses any type name identifier in the expression 436. At this point the system determines if the identifier name is compatible with the targetlanguage 438. If it is not, the system proceeds to replace the identifier with an adjusted name 440. This step is described further in connection with FIG. 10. Once the identifier is replaced with an adjusted name, or it is determined that theidentifier name is compatible with the target language, the system proceeds to determine if the expression corresponds to a simulated keyword 442. If it is determined that the expression does correspond to a keyword, the expression is replaced with asimulated keyword 444. Once the expression is replaced with a simulated keyword or it is determined that the expression does not correspond to a simulated keyword, the system proceeds to determine if the translation is fully expressible in the targetlanguage 446. If the translation is not fully expressible in the target language, the system will proceed to embed tagged elements or a tag 448 in the translated language. Once the tagged element is embedded or it is determined that the translation isfully expressible in the target language, the system proceeds to the next expression 450 and/or the next sub-statement 452 to repeat the above-described process until all expressions and sub-statements are translated. If it is determined that there areno more expressions or sub-statements, the system proceeds back to the next step of determining if there are additional statements in the method definition that contains the statement. If it is determined that there are no more statements, the systemproceeds back to the next step of determining if there are additional method definitions 416 as illustrated in FIG. 6. The following is a table in extended BNF notation illustrating an example of a potential format of embedded content, which cannot be expressed in the target language and is therefore embedded as tagged elements within the comment sections: TABLE-US-00001 Syntax EmbeddedContent ::= EmbeddedComment+ (Expression+ EmbeddedComment+)? Expression ::= expression in target language related to embedded content EmbeddedComment ::= CommentBeginSymbol ""//"" TaggedElements CommentEndSymbolTaggedElements ::= TaggedElement+ TaggedElement ::= (""<"" Namespace "":"" ElementName "" "" ElementAttributes "">"")|(""</"" Namespace "":"" ElementName "" "" ElementAttributes* "">"") Namespace ::= namespace for embedded tags (i.e., ""pie"") ElementName ::=name of embedded element (i.e., ""loopscope"") ElementAttributes ::= attributes for embedded element CommentBeginSymbol ::= language-specific symbol or keyword (""/*"" for C++, C#, Java) CommentEndSymbol ::= language-specific symbol or keyword (""*/"" for C++,C#, Java) Source Code in Original Translated Source Code in Target Language (Java) Language ANSI C++, Visual C++ 6.0 for (int index = 0; index /*//<pie:loopscope>*/{ < 10; index ++) /*//</pie:loopscope>*/ { for (pi_int index_ = 0;index.sub.-- index *= 2; < 10; index_++) } { int index = 10; index_ *=2; } /*//<pie:loopscope>*/{ /*//</pie:loopscope>*/ pi int index = 10; The following is a table illustrating an example of simulated keywords used to provide corresponding features and forms of expression of the original language in the target language. Simulated keywords fully preserve all details of theexpression of the original language so that the translated results in the target language can be accurately translated back to the original language, producing identical or substantially identical results to the original expressions in the originallanguage. TABLE-US-00002 Expression in Original Language Simulated Keyword Expression in (Java) Target Language (ANSI C++) (className)objectInstance pi_cast(className, *objectInstance) (className)this pi_cast(className, this) objectinstance instanceofpi_instanceof(*objectInstance, className className) this instanceof className pi_instanceof(this, className) throws className pi_throws(className) throws className1, pi_throwsbegin(className1) className2, . . . pi_throwsalso(className2) . . .className9 pi_throwsalso(className9) pi_throwsend( ) switch (expression) { pi_beginswitch(type, expression) } (as used to end a switch block) pi_endswitch( ) case value: pi_case(value) default: pi_default( ) Null pi_null synchronized (as used withinpi_synchronized method definitions) interface interfaceName class pi_interfaceclass interfaceName Boolean pi_boolean FIG. 8 is an expanded view of the step of determining if the sub-statement requires a reference type or a referenced type 426. FIG. 8 generally describes the process of determining if the statement requires a reference type or a referencedtype. In this advantageous embodiment, the process is demonstrated by the example of translating a statement or expression in the Java language to the C++ language. However, it is contemplated that this process may be modified for applicable withconversion of any computer language. The system starts with a statement or expression 454. A determination is then made as to whether the target language requires separate types for references 456. If not, the referenced type is used 466. If however, the target language doesrequire separate types for references, the system proceeds to determine if the statement or expression is a variable declaration statement 458. If not, the reference type is used 464. If however, it is determined that the statement or expression is avariable declaration statement, the system proceeds to determine if it is cast or an instance of expression 460. If not, the referenced type is used 466. If however, it is determined that it is cast or an instance of expression, the system proceeds todetermine if the parameter type is an array 462. If not, the referenced type is used 466. If so, the reference type is used 464. The system then proceeds according to FIG. 7 as previous discussed. FIG. 9 is an expanded view of the step of replacing the reference type name identifier with an adjusted name for the target language 430. Generally, in this step the identifier name is adjusted for the target language. If the variable type isnot an array or is not a primitive, the name is further adjusted to be a reference type for the target language. In this step, the system begins with a reference type name identifier in the source language 468. It is then determined if the type name is a fundamental type in the source language 470. If not, then the class name identifier is adjusted forthe target language 472, which is described in more detail in connection with FIG. 12. Once this is completed, it is determined if the name is an array reference 478. If not, then the system will proceed to append a character to the resultantidentifier 482. This character may be for instance, any alphanumeric character depending on the computer language. For example, an uppercase ""R"" may be effectively utilized in connection with the Java language because it is uncommon for Java variabletype names to end with an uppercase ""R"" and it further indicates ""Reference"" to the user. Other suffixes however, may be effectively utilized in connection with other computer languages. Once the character is appended, the system completes this step. If on the other hand, it is determined that the type name is a fundamental type in the source language according to step 470, then a primitive type name is translated to the target language 474. The system may, in one advantageous embodiment,reference a table of primitive type names in the original language and target language 476 to facilitate this step. Once this is completed, it is determined if the name is an array reference 480. If not, then the system completes this step. If however, it is determined that the name is an array reference 478 and/or 480, the system will then proceed to determine the array dimensions 484. If it is determined that there is one dimension, two characters are appended to the resultantidentifier 488. Again, in one advantageous embodiment, uppercase ""AR"" may be effectively used because it is uncommon for Java variable types to end with uppercase ""AR"" and it may indicate for instance, ""Array Reference"" to the user. Alternatively, ifit is determined that there are two dimensions, three characters are appended to the resultant identifier 486. For instance, uppercase ""AAR"" may be utilized and indicate for instance, ""Array of Array References"" to the user. It is however contemplatedthat other suffixes may be effectively utilized in connection with other computer languages. Once these characters are appended, the system completes this step. FIG. 10 is an expanded view of the step of replacing the identifier with an adjusted name 440. FIG. 10 generally describes the process of adjusting referenced type name identifiers in the source language to a suitable name in the targetlanguage. The process of Identifier Name Adjustment is a mild form of name mangling that produces a fully human-readable name. This step starts with a referenced type name identifier in the source language 490 and proceeds to determine if the type name is a fundamental type in the source language 492. If not, the class name identifier is adjusted for the targetlanguage 494. This step is described in greater detail in connection with FIG. 11. If however, the type name is a fundamental type in the source language, the system proceeds to translate the primitive type name to the target language 496. Again, inone advantageous embodiment, a reference table of primitive type names in the original language and target language 498 may be used to facilitate this step. FIG. 11 is an expanded view of the step of adjusting a class name identifier for the target language 494. FIG. 11 generally describes the process of adjusting composite unparsed identifiers into package names, class names, method names, andvariable names and identifiers in the source language to a suitable name in the target language. An identifier in the original language 500 is analyzed to determine if the identifier name is qualified 502. For clarity, a qualified name contains one or more identifier name separator tokens, for instance, Java and C# use the period "".""character (i.e., java.lang.Object or System.object is qualified, but Object or object is not). If it is determined that the identifier name is qualified, the system proceeds to determine if the identifier name is an imported class 504, and in oneadvantageous embodiment may utilize a list of imported classes 506 to facilitate this determination. If the identifier name is an imported class, the system proceeds to adjust the class name identifier for the target language 506, which is discussed ingreater detail in connection with FIG. 12. Alternatively, if the identifier name is not an imported class, the system proceeds to determining if the identifier is a method or a data field identifier 508. If it is determined to be a method identifier,the method name identifier is adjusted for the target language 510, which is again discussed in greater detail in connection with FIG. 12. However, if the identifier name is determined to be a data field, the data field name identifier is adjusted forthe target language 512, which is discussed in greater detail in connection with FIG. 13. Returning now to the step of determining if the identifier name is qualified 502, if it is determined to be qualified, the system proceeds to determine if the identifier is a fully qualified imported class 514. If so, the package/namespace ofthe identifier is parsed 516, and then the package or namespace of the identifier for the target language is adjusted 518, which is again described in greater detail in connection with FIG. 12. Once this step is completed or in the event the identifieris not a fully qualified imported class, the system proceeds to parse the class name identifier and method or data field identifier 520. It should also be noted that the class name identifier here may also comprise an inner-class. The class nameidentifier for the target language is then adjusted 522 as further described in connection with FIG. 12. Next it is determined whether an identifier is supplied after the class name 524. If not, this step is completed. If it is determined that anidentifier is supplied after the class name, then the system proceeds to determine if the identifier is a method or a data field identifier 508 as previously discussed. FIG. 12 is an expanded view of the step of adjusting the name identifier for the target language. There are various steps in the previous drawings that reference this process including: adjusting the class name identifier 472; adjusting themethod name identifier 510; and adjusting the package name identifier 518. In this process, an identifier name is generally parsed into name segments, which are individually and independently adjusted for the target language so that the adjusted name isuniversal. This provides the benefit of allowing individual classes to be translated as modified without requiring retranslation of all related source code files in the entire project. It also facilitates automation because no human interaction isnecessary to determine or specify named aliases. An identifier name in the original computer language 526 is parsed into name segments 528. The system then iterates through the name segments 530 and further parses the identifier name segment in the original computer language 532. It is thendetermined if the name segment is a keyword in the target language 534. If the name segment is determined to be a keyword in the target language, the system will proceed to append an underscore (""_"") to the name segment 536 and proceeds to the next namesegment 538. If however, the name segment is determined to not be a keyword in the target language, the system proceeds to determine if the name segment terminates or ends with an underscore (""_"") 540. If so, the system proceeds to append an underscore(""_"") to the name segment 542 and proceeds to the next name segment 538. If however, it is determined that the name segment does not terminate with an underscore (""_""), the system proceeds to determine whether the name segment ends with a selectedcharacter, such as for instance, with an uppercase ""R"" 544. If not, the system proceeds to the next name segment 538. If however, it is determined that the name segment ends with a selected character, an underscore (""_"") is inserted before the lastcharacter in the identifier name 546, after which the system proceeds to the next name segment 538. FIG. 13 is an expanded view of the step of adjusting the data field name identifier for the target language 512. FIG. 13 generally describes the process of resolving conflicting syntactical rules between the original computer language and thetarget computer language. This process is a demonstration of one advantageous embodiment of the present invention providing an example of translating a class data field identifier name in a source language, such as Java, to a target language, such asC++. It should however be noted that this is merely an example specific to the computer languages used in the example and is equally applicable to any number of various computer languages. This process begins with a class data field identifier name in the original computer language 548. It is then determined whether the source language supports both a method named ""X"" and a data field named ""X"" in the same class declaration 550. If so, the system proceeds to determine if the target language supports both a method named ""X"" and a data field named ""X"" in the same class declaration 552. If so, this process is completed. If not however, the field name identifier for the targetlanguage is adjusted 554, which is discussed in greater detail in connection with FIG. 14, after which the process is completed. Returning now to determining whether the source language supports both a method named ""X"" and a data field named ""X"" in thesame class declaration 550, if not, then the system determines if the target language supports both a method named ""X"" and a data field named ""X"" in the same class declaration 556. If not, the process is completed. If however it does support both amethod named ""X"" and a data field named ""X"" in the same class declaration, then the system translates the adjusted field name to the original name in the target language 558, after which the process is completed. FIG. 14 is an expanded view of the step of adjusting the field name identifier for the target language 554. FIG. 14 starts with a data field name identifier or variable name identifier in the original language 560. It is then determined if thename ends with an underscore (""_"") 562. If not, the system proceeds to append an underscore (""_"") to the name segment 564. If however, it is determined that the name ends with an underscore (""_""), the system proceeds to append the text to a nameindicating that it is a field name which ends with an underscore 566. Although the invention has been described with reference to a particular arrangement of parts, features and the like, these are not intended to exhaust all possible arrangements or features, and indeed many other modifications and variationswill be ascertainable to those of skill in the art."
3|http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=93&p=2&f=G&l=50&d=PTXT&S1=(python.CLTX.+or+python.DCTX.)&OS=ACLM/python&RS=ACLM/python|Client program executable on multiple heterogeneous server platforms|A device receives a program that includes one of a parallel construct or a distributed construct, creates a target component from the program, and integrates the target component into a target environment to produce a client program that is executable on multiple heterogeneous server platforms.|"1. A computing device-implemented method comprising: receiving a program that includes one of a parallel construct or a distributed construct, the receiving being performedby the computing device; creating a target component from the program, the creating being performed by the computing device; integrating the target component into a target environment to produce a client program that is executable on multipleheterogeneous server platforms, the multiple heterogeneous server platforms including a non-homogeneous set of Turing-complete computing resources capable of communicating with one another and the integrating being performed by the computing device; providing a request for task processing associated with the client program to the multiple heterogeneous server platforms, one or more tasks being automatically distributed across the multiple heterogeneous server platforms based on the request, theproviding being performed by the computing device; and receiving one or more results of one or more completed tasks from the multiple heterogeneous server platforms, the receiving being performed by the computing device. 2. The computing device-implemented method of claim 1, further comprising: identifying executable content of the program that is executable outside a technical computing environment; associating license information with the identifiedexecutable content of the program; combining the identified executable content of the program and the associated license information into a platform-independent, redistributable program; and integrating the target component and theplatform-independent, redistributable program into the target environment to produce the client program that is executable on the multiple heterogeneous server platforms. 3. The computing device-implemented method of claim 2, further comprising: determining one or more of a number, a type, or a behavior associated with the multiple heterogeneous server platforms; determining communication information associatedwith the multiple heterogeneous server platforms; and integrating the determined one or more of the number, the type, or the behavior associated with the multiple heterogeneous server platforms and the determined communication information associatedwith the multiple heterogeneous server platforms into the platform-independent, redistributable program. 4. The computing device-implemented method of claim 1, further comprising: providing configuration information for the client program, the configuration information enabling the client program to arbitrarily target one or more of the multipleheterogeneous server platforms for execution. 5. The computing device-implemented method of claim 4, where the configuration information enables the client program to execute serially when none of the multiple heterogeneous server platforms is available to execute the client program. 6. The computing device-implemented method of claim 5, where the configuration information enables the client program to select, at a time of execution, between serial execution and arbitrarily targeting one or more of the multipleheterogeneous server platforms for execution. 7. The computing device-implemented method of claim 1, where the program comprises a program generated with a technical computing environment. 8. The computing device-implemented method of claim 7, where the technical computing environment comprises at least one of: a text-based environment; a graphically-based environment; or a hybrid environment that includes a text-basedenvironment and a graphically-based environment. 9. The computing device-implemented method of claim 1, where the target environment comprises an environment that supports integration of a software component into the client program via one or more computer programming languages. 10. The computing device-implemented method of claim 9, where each of the one or more computer programming languages is defined by a Type-0 grammar from Chomsky hierarchy of formal languages. 11. The computing device-implemented method of claim 10, where each Type-0 grammar defines each of the one or more computer programming languages with a programming model, a type management model, and an instruction execution model. 12. The computing device-implemented method of claim 11, where the programming model is one of functional, object-oriented, procedural, rule based, logic based, or multi-paradigm. 13. The computing device-implemented method of claim 11, where the type management model is one of untyped, static, dynamic, or hybrid. 14. The computing device-implemented method of claim 11, where the instruction execution model is one of sequential or parallel. 15. The computing device-implemented method of claim 9, where each of the one or more computer programming languages comprises one or more of: a C programming language; a C++ programming language; a Csharp programming language; a Javaprogramming language; a Visual Basic programming language; a .NET framework programming language; a Python programming language; a F++ programming language; a Fsharp programming language; a Fortress programming language; or a Perl programminglanguage. 16. The computing device-implemented method of claim 1, where each member of the non-homogeneous set of Turing-complete computing resources supports server program execution via an operating system. 17. The computing device-implemented method of claim 16, where each operating system comprises one or more of: a Linux operating system; a Windows operating system; a Solaris operating system; or a Macintosh operating system. 18. A computing device-implemented method comprising: receiving a request for task processing associated with a client program integrated into a target environment, the receiving being performed by the computing device, the request for taskprocessing comprising one of: a request for processing one or more tasks in a distributed manner across the multiple heterogeneous server platforms; or a request for processing one or more tasks in a parallel manner across the multiple heterogeneousserver platforms; automatically providing, based on the request, the one or more tasks across multiple heterogeneous server platforms, the multiple heterogeneous server platforms including a non-homogeneous set of Turing-complete computing resourcescapable of communicating with one another, the providing being performed by the computing device, and the automatically providing, based on the request, one or more tasks across the multiple heterogeneous server platforms comprising one of: automaticallyproviding, based on the request, the one or more tasks in a distributed manner across the multiple heterogeneous server platforms; or automatically providing, based on the request, the one or more tasks in a parallel manner across the multipleheterogeneous server platforms; receiving one or more results from the multiple heterogeneous server platforms, the receiving being performed by the computing device; and providing the one or more results to a requestor of the task processing, theproviding being performed by the computing device. 19. The computing device-implemented method of claim 18, where automatically providing, based on the request, one or more tasks across the multiple heterogeneous server platforms, comprises: receiving an indication of failure from one of themultiple heterogeneous server platforms; and redistributing one or more tasks from the one of the multiple heterogeneous server platforms to one or more other multiple heterogeneous server platforms of the multiple heterogeneous server platforms. 20. The computing device-implemented method of claim 18, where the client program comprises a program generated with a technical computing environment. 21. The computing device-implemented method of claim 20, where the technical computing environment comprises at least one of: a text-based environment; a graphically-based environment; or a hybrid environment that includes a text-basedenvironment and a graphically-based environment. 22. The computing device-implemented method of claim 18, where the request for task processing comprises one of: a request for processing the one or more tasks in a distributed manner across the multiple heterogeneous server platforms; or arequest for processing the one or more tasks in a parallel manner across the multiple heterogeneous server platforms. 23. The computing device-implemented method of claim 18, where the target environment is not supported on the multiple heterogeneous server platforms. 24. The computing device-implemented method of claim 18, where the target environment comprises an environment that supports integration of a software component into the client program via one or more computer programming languages. 25. The computing device-implemented method of claim 24, where each of the one or more computer programming languages is defined by a Type-0 grammar from Chomsky hierarchy of formal languages. 26. The computing device-implemented method of claim 25, where each Type-0 grammar defines each of the one or more computer programming languages with a programming model, a type management model, and an instruction execution model. 27. The computing device-implemented method of claim 26, where the programming model is one of functional, object-oriented, procedural, rule based, logic based, or multi-paradigm. 28. The computing device-implemented method of claim 26, where the type management model is one of untyped, static, dynamic, or hybrid. 29. The computing device-implemented method of claim 26, where the instruction execution model is one of sequential or parallel. 30. The computing device-implemented method of claim 24, where each of the one or more computer programming languages comprises one or more of: a C programming language; a C++ programming language; a Csharp programming language; a Javaprogramming language; a Visual Basic programming language; a .NET framework programming language; a Python programming language; a F++ programming language; a Fsharp programming language; a Fortress programming language; or a Perl programminglanguage. 31. The computing device-implemented method of claim 18, where each member of the non-homogeneous set of Turing-complete computing resources supports server program execution via an operating system. 32. The computing device-implemented method of claim 31, where each operating system comprises one or more of: a Linux operating system; a Windows operating system; a Solaris operating system; or a Macintosh operating system. 33. A computing device-implemented method comprising: receiving task information associated with execution of a client program on one or more multiple heterogeneous server platforms, the client program being integrated into a targetenvironment, the multiple heterogeneous server platforms comprising a non-homogeneous set of Turing-complete computing resources capable of communicating with one another, the target environment comprising an environment that supports integration of asoftware component into the client program via one or more computer programming languages, and the receiving being performed by the computing device; determining, based on the task information, required content, associated with the client program, thatis absent from the one or more of the multiple heterogeneous server platforms, the determining being performed by the computing device; receiving the absent required content from the client program, the receiving being performed by the computing device; and providing the absent required content to a cache device, the cache device providing the absent required content to the one or more of the multiple heterogeneous server platforms, the providing being performed by the computing device. 34. The computing device-implemented method of claim 33, where the target environment is not supported on the multiple heterogeneous server platforms. 35. The computing device-implemented method of claim 33, where the target environment comprises an environment that supports integration of a software component into the client program via one or more computer programming languages. 36. The computing device-implemented method of claim 35, where each of the one or more computer programming languages is defined by a Type-0 grammar from Chomsky hierarchy of formal languages. 37. The computing device-implemented method of claim 36, where each Type-0 grammar defines each of the one or more computer programming languages with a programming model, a type management model, and an instruction execution model. 38. The computing device-implemented method of claim 37, where the programming model is one of functional, object-oriented, procedural, rule based, logic based, or multi-paradigm. 39. The computing device-implemented method of claim 37, where the type management model is one of untyped, static, dynamic, or hybrid. 40. The computing device-implemented method of claim 37, where the instruction execution model is one of sequential or parallel. 41. The computing device-implemented method of claim 35, where each of the one or more computer programming languages comprises one or more of: a C programming language; a C++ programming language; a Csharp programming language; a Javaprogramming language; a Visual Basic programming language; a .NET framework programming language; a Python programming language; a F++ programming language; a Fsharp programming language; a Fortress programming language; or a Perl programminglanguage. 42. The computing device-implemented method of claim 33, where each member of the non-homogeneous set of Turing-complete computing resources supports server program execution via an operating system. 43. The computing device-implemented method of claim 42, where each operating system comprises one or more of: a Linux operating system; a Windows operating system; a Solaris operating system; or a Macintosh operating system. 44. One or more non-transitory computer-readable media storing executable instructions for execution by processing logic, the executable instructions comprising: one or more instructions that, when executed by the processing logic, cause theprocessing logic to receive a program that includes one of a parallel construct or a distributed construct; one or more instructions that, when executed by the processing logic, cause the processing logic to create a target component from the program,the target environment comprising an environment that supports integration of a software component into the client program via one or more computer programming languages; one or more instructions that, when executed by the processing logic, cause theprocessing logic to integrate the target component into a target environment to produce a client program that is executable on multiple heterogeneous server platforms, where the multiple heterogeneous server platforms comprising comprise anon-homogeneous set of Turing-complete computing resources capable of communicating with one another; and one or more instructions that, when executed by the processing logic, cause the processing logic to provide the client program to the multipleheterogeneous server platforms for execution. 45. The media of claim 44, further comprising: one or more instructions that, when executed by the processing logic, cause the processing logic to identify executable content of the program that is executable outside a technical computingenvironment; one or more instructions that, when executed by the processing logic, cause the processing logic to associate license information with the identified executable content of the program; one or more instructions that, when executed by theprocessing logic, cause the processing logic to combine the identified executable content of the program and the associated license information into a platform-independent, redistributable program; and one or more instructions that, when executed by theprocessing logic, cause the processing logic to integrate the target component and the platform-independent, redistributable program into the target environment to produce the client program that is executable on the multiple heterogeneous serverplatforms. 46. The media of claim 44, further comprising: one or more instructions that, when executed by the processing logic, cause the processing logic to determine one or more of a number, a type, or a behavior associated with the multipleheterogeneous server platforms; one or more instructions that, when executed by the processing logic, cause the processing logic to determine communication information associated with the multiple heterogeneous server platforms; and one or moreinstructions that, when executed by the processing logic, cause the processing logic to integrate the determined one or more of the number, the type, or the behavior associated with the multiple heterogeneous server platforms and the determinedcommunication information associated with the multiple heterogeneous server platforms into the platform-independent, redistributable program. 47. The media of claim 44, where the one or more instructions that cause the processing logic to provide the client program to the multiple heterogeneous server platforms comprise: one or more instructions that, when executed by the processinglogic, cause the processing logic to provide a request for task processing associated with the client program to the multiple heterogeneous server platforms, where one or more tasks are automatically distributed across the multiple heterogeneous serverplatforms based on the request; and one or more instructions that, when executed by the processing logic, cause the processing logic to receive one or more results of one or more completed tasks from the multiple heterogeneous server platforms. 48. The media of claim 44, where the target environment is not supported on the multiple heterogeneous server platforms. 49. The media of claim 44, where the program comprises a program generated with a technical computing environment. 50. The media of claim 49, where the technical computing environment comprises at least one of: a text-based environment; a graphically-based environment; or a hybrid environment that includes a text-based environment and a graphically-basedenvironment. 51. The media of claim 44, where each of the one or more computer programming languages is defined by a Type-0 grammar from Chomsky hierarchy of formal languages. 52. The media of claim 51, where each Type-0 grammar defines each of the one or more computer programming languages with a programming model, a type management model, and an instruction execution model. 53. The media of claim 52, where the programming model is one of functional, object-oriented, procedural, rule based, logic based, or multi-paradigm. 54. The media of claim 52, where the type management model is one of untyped, static, dynamic, or hybrid. 55. The media of claim 52, where the instruction execution model is one of sequential or parallel. 56. The media of claim 51, where each of the one or more computer programming languages comprises one or more of: a C programming language; a C++ programming language; a Csharp programming language; a Java programming language; a VisualBasic programming language; a .NET framework programming language; a Python programming language; a F++ programming language; a Fsharp programming language; a Fortress programming language; or a Perl programming language. 57. The media of claim 44, where each member of the non-homogeneous set of Turing-complete computing resources supports server program execution via an operating system. 58. The media of claim 57, where each operating system comprises one or more of: a Linux operating system; a Windows operating system; a Solaris operating system; or a Macintosh operating system. 59. One or more non-transitory computer-readable media storing executable instructions for execution by a processor the executable instructions comprising: one or more instructions, that, when executed by the processing logic, cause theprocessing logic to receive a request for task processing associated with a client program that is integrated into a target environment, the target environment comprising an environment that supports integration of a software component into the clientprogram via one or more computer programming languages; one or more instructions, that, when executed by the processing logic, cause the processing logic to automatically provide, based on the request, one or more tasks across multiple heterogeneousserver platforms, where the multiple heterogeneous server platforms comprise a non-homogeneous set of Turing-complete computing resources capable of communicating with one another; one or more instructions, that, when executed by the processing logic,cause the processing logic to receive one or more results from the multiple heterogeneous server platforms; and one or more instructions, that, when executed by the processing logic, cause the processing logic to provide the one or more results to therequestor of the task processing. 60. The media of claim 59, where the one or more instructions that cause the processing logic to automatically provide, based on the request, one or more tasks across the multiple heterogeneous server platforms, comprise: one or moreinstructions that, when executed by the processing logic, cause the processing logic to receive an indication of failure from one of the multiple heterogeneous server platforms; and one or more instructions that, when executed by the processing logic,cause the processing logic to redistribute one or more tasks from the one of the multiple heterogeneous server platforms to one or more of the other multiple heterogeneous server platforms. 61. The media of claim 59, where the program comprises a program generated with a technical computing environment. 62. The media of claim 61, where the technical computing environment comprises at least one of: a text-based environment; a graphically-based environment; or a hybrid environment that includes a text-based environment and a graphically-basedenvironment. 63. The media of claim 59, where the request for task processing comprises one of: a request for processing the one or more tasks in a distributed manner across the multiple heterogeneous server platforms; or a request for processing the oneor more tasks in a parallel manner across the multiple heterogeneous server platforms. 64. The media of claim 63, where the one or more instructions that cause the processing logic to automatically provide, based on the request, one or more tasks across the multiple heterogeneous server platforms comprise: one of one or moreinstructions that, when executed by the processing logic, cause the processing logic to automatically provide, based on the request, the one or more tasks in a distributed manner across the multiple heterogeneous server platforms; or one of one or moreinstructions that, when executed by the processing logic, cause the processing logic to automatically provide, based on the request, the one or more tasks in a parallel manner across the multiple heterogeneous server platforms. 65. The media of claim 59, where the target environment is not supported on the multiple heterogeneous server platforms. 66. The media of claim 59, where each of the one or more computer programming languages is defined by a Type-0 grammar from Chomsky hierarchy of formal languages. 67. The media of claim 66, where each Type-0 grammar defines each of the one or more computer programming languages with a programming model, a type management model, and an instruction execution model. 68. The media of claim 67, where the programming model is one of functional, object-oriented, procedural, rule based, logic based, or multi-paradigm. 69. The media of claim 67, where the type management model is one of untyped, static, dynamic, or hybrid. 70. The media of claim 67, where the instruction execution model is one of sequential or parallel. 71. The media of claim 59, where each of the one or more computer programming languages comprises one or more of: a C programming language; a C++ programming language; a Csharp programming language; a Java programming language; a VisualBasic programming language; a .NET framework programming language; a Python programming language; a F++ programming language; a Fsharp programming language; a Fortress programming language; or a Perl programming language. 72. The media of claim 59, where each member of the non-homogeneous set of Turing-complete computing resources supports server program execution via an operating system. 73. The media of claim 72, where each operating system comprises one or more of: a Linux operating system; a Windows operating system; a Solaris operating system; or a Macintosh operating system. 74. A system for producing a client program that is executable on multiple heterogeneous server platforms, comprising: means for receiving a program that includes one of a parallel construct or a distributed construct; means for creating atarget component from the program; means for integrating the target component into a target environment to produce the client program that is executable on the multiple heterogeneous server platforms, where the multiple heterogeneous server platformscomprising comprise a non-homogeneous set of Turing-complete computing resources capable of communicating with one another; means for providing a request for task processing associated with the client program to the multiple heterogeneous serverplatforms, one or more tasks being automatically distributed across the multiple heterogeneous server platforms based on the request; and means for receiving one or more results of one or more completed tasks from the multiple heterogeneous serverplatforms. Description BACKGROUND Closely-coupled processors (or hardware resources) may include additional processors, threads in a particular processor, additional cores in a central processing unit, additional processors mounted on the same substrate or board, and/or suchdevices provided within computers connected by a network fabric into a cluster, a grid, or a collection of resources. Certain computations (e.g., parallel processing or parallel programming) may benefit from the availability of such hardware resources. For example, a complex simulation may run faster if the simulation is divided into portions and the portionsare simultaneously run on a number of processing devices in a parallel fashion. Parallel computing arrangements may include a controller that determines how an application should be divided and what application portions go to which parallel processors. For example, a host computer that is running a simulation may act as the controller for a number of parallel processors. In a distributed (or batch) computing arrangement, a client may provide a job to a scheduler. The scheduler may distribute the job into one or more tasks, and may provide the tasks to one or more hardware resources. The hardware resources mayexecute the tasks, and may provide results to the scheduler. The scheduler may combine the results into a single result, and may provide the single result to the client. However, hardware resources implement multiple heterogeneous server platforms, and some of the server platforms may be incompatible with a parallel and/or distributed program. Thus, the parallel and/or distributed program may execute onhardware resources with compatible server platforms, but hardware resources with incompatible server platforms will be unavailable to the parallel and/or distributed program. This will limit the amount of hardware resources available to the paralleland/or distributed program. BRIEF DESCRIPTION OF THE DRAWINGS The accompanying drawings, which are incorporated in and constitute a part of this specification, illustrate one or more implementations described herein and, together with the description, explain these implementations. In the drawings: FIG. 1 is an exemplary diagram of a network in which systems and methods described herein may be implemented; FIG. 2 illustrates exemplary components of a client and servers of the network depicted in FIG. 1; FIG. 3 depicts exemplary components of the client of the network illustrated in FIG. 1; FIG. 4 illustrates exemplary functional components of the client of the network depicted in FIG. 1; FIG. 5 depicts exemplary functional components of compiler/builder logic of the client illustrated in FIG. 4; FIG. 6 illustrates an exemplary diagram of interactions between a server scheduling environment and a cache server of the network depicted in FIG. 1; FIG. 7 depicts an exemplary diagram of interactions between a client environment of the client illustrated in FIG. 3 and the server scheduling environment and cache server illustrated in FIG. 6; FIG. 8 illustrates an exemplary diagram of interactions between a program associated with the client depicted in FIG. 3, a scheduler/job manager associated with the server scheduling environment depicted in FIG. 6, a distributed cache associatedwith the cache server depicted in FIG. 6, and servers of the network depicted in FIG. 1; and FIGS. 9-14 depict flow charts associated with exemplary processes according to implementations described herein.DETAILED DESCRIPTION The following detailed description refers to the accompanying drawings. The same reference numbers in different drawings may identify the same or similar elements. Also, the following detailed description does not limit the invention.Overview Implementations described herein may include systems and/or methods that produce a client program that may be executable on multiple heterogeneous server platforms. For example, in one implementation, the systems and/or methods may receiveand/or create a program (e.g., a technical computing environment (TCE) program) with a parallel or distributed construct, and may create a target component from the program. The systems and/or methods may identify executable content of the programexecutable outside the TCE, and may associate license information with the identified executable content of the program. The systems and/or methods may also combine the identified executable content of the program and the associated license informationinto a platform-independent, redistributable program, and may integrate the target component and the platform-independent, redistributable program into a target environment to produce a client program executable on multiple heterogeneous serverplatforms. The systems and/or methods may provide the client program to the multiple heterogeneous server platforms for execution. A technical computing environment (TCE) may include any hardware, software, and/or a combination of hardware and software based logic that provides a computing environment that allows users to perform tasks related to disciplines, such as, butnot limited to, mathematics, science, engineering, medicine, business, etc., more efficiently than if the tasks were performed in another type of computing environment, such as an environment that required the user to develop code in a conventionalprogramming language, such as C++, C, Fortran, Pascal, etc. In one implementation, a TCE may include a dynamically-typed programming language (e.g., the M language) that can be used to express problems and/or solutions in mathematical notations. Forexample, a TCE may use an array as a basic element, where the array may not require dimensioning. In addition, a TCE may be adapted to perform matrix and/or vector formulations that can be used for data analysis, data visualization, applicationdevelopment, simulation, modeling, algorithm development, etc. These matrix and/or vector formulations may be used in many areas, such as statistics, image processing, signal processing, control design, life sciences modeling, discrete event analysisand/or design, state based analysis and/or design, etc. A TCE may further provide mathematical functions and/or graphical tools (e.g., for creating plots, surfaces, images, volumetric representations, etc.). In one implementation, a TCE may provide these functions and/or tools using toolboxes (e.g.,toolboxes for signal processing, image processing, data plotting, parallel processing, etc.). In another implementation, a TCE may provide these functions as block sets. In still another implementation, a TCE may provide these functions in another way,such as via a library, etc. A TCE may be implemented as a text-based environment (e.g., MATLAB.RTM. software; Octave; Python; Comsol Script; MATRIXx from National Instruments; Mathematica from Wolfram Research, Inc.; Mathcad from Mathsoft Engineering & Education Inc.;Maple from Maplesoft; Extend from Imagine That Inc.; Scilab from The French Institution for Research in Computer Science and Control (INRIA); Virtuoso from Cadence; Modelica or Dymola from Dynasim; etc.), a graphically-based environment (e.g.,Simulink.RTM. software, Stateflow.RTM. software, SimEvents.TM. software, etc., by The MathWorks, Inc.; VisSim by Visual Solutions; LabView.RTM. by National Instruments; Dymola by Dynasim; SoftWIRE by Measurement Computing; WiT by DALSA Coreco; VEEPro or SystemVue by Agilent; Vision Program Manager from PPT Vision; Khoros from Khoral Research; Gedae by Gedae, Inc.; Scicos from (INRIA); Virtuoso from Cadence; Rational Rose from IBM; Rhopsody or Tau from Telelogic; Ptolemy from the University ofCalifornia at Berkeley; aspects of a Unified Modeling Language (UML) or SysML environment; etc.), or another type of environment, such as a hybrid environment that includes one or more of the above-referenced text-based environments and one or more ofthe above-referenced graphically-based environments. A target environment may include an environment that supports a variety of programming languages. The target environment may include an environment that supports integration of a software component into a client program via one or more computerprogramming languages. Each of the one or more computer programming languages may be defined by a Type-0 grammar from the Chomsky hierarchy of formal languages. Each Type-0 grammar may define each of the one or more computer programming languages witha programming model, a type management model, and an instruction execution model. The programming model may be one of functional, object-oriented, procedural, rule based, logic based, or multi-paradigm. The type management model may be one of untyped,static, dynamic, or hybrid. The instruction execution model may be one of sequential or parallel. For example, in one implementation, a target environment may support one or more of a C programming language, a C++ programming language, a Csharpprogramming language, a Java programming language, a Visual Basic programming language, a .NET framework programming language, a Python programming language, a F++ programming language, a Fsharp programming language, a Fortress programming language, aPerl programming language, an X10 programming language, and/or a Chapel programming language. Multiple heterogeneous server platforms may include a variety of server environments. The multiple heterogeneous server platforms may include a non-homogeneous set of Turing-complete computing resources capable of communicating with oneanother. Each member of the non-homogeneous set of Turing-complete computing resources may support server program execution via an operating system. For example, in one implementation, the multiple heterogeneous server platforms may support serverprogram execution via one or more of a Linux operating system, a Windows operating system, a Solaris operating system, a Macintosh operating system, a UNIX-based operating system, and/or a real-time operating system (RTOS). In an exemplaryimplementation, servers containing multiple heterogeneous server platforms may include processing logic (e.g., labs, software or hardware units of execution, etc.), where the processing logic may be used to facilitate parallel or distributed processing. A lab may include hardware, software, and/or combination of hardware and software that performs and/or participates in parallel and/or distributed processing activities. For example, a lab may perform and/or participate in parallel/distributedprocessing activities in response to a request and/or a task received from a client. In one example, a lab may be implemented as a software unit of execution and/or a hardware unit of execution. A lab may perform and/or participate in substantially anytype of parallel processing (e.g., task, data, and/or stream processing). In one example, a lab may perform and/or participate in parallel processing activities in response to a receipt of a program and/or one or more portions of the program. A lab maysupport one or more threads (or processes) when performing processing operations. A hardware unit of execution may include a device (e.g., a hardware resource) that performs and/or participates in parallel/distributed processing activities. For example, a hardware unit of execution may perform and/or participate inparallel/distributed processing activities in response to a request and/or a task received from a client. A hardware unit of execution may perform and/or participate in substantially any type of parallel processing (e.g., task, data, and/or streamprocessing) using one or more devices. For example, in one implementation, a hardware unit of execution may include a single processor that includes multiple cores and in another implementation, the hardware unit of execution may include a number ofprocessors. Devices used in a hardware unit of execution may be arranged in substantially any configuration (or topology), such as a grid, ring, star, etc. A hardware unit of execution may support one or more threads (or processes) when performingprocessing operations. A software unit of execution may include a software resource (e.g., a worker, a lab, etc.) that performs and/or participates in parallel/distributed processing activities. For example, a software unit of execution may perform and/or participatein parallel/distributed processing activities in response to receipt of a program and/or one or more portions of the program. A software unit of execution may perform and/or participate in substantially any type of parallel processing using one or morehardware units of execution. A software unit of execution may support one or more threads (or processes) when performing processing operations.Exemplary Network Configuration FIG. 1 is an exemplary diagram of a network 100 in which systems and methods described herein may be implemented. As illustrated, network 100 may include a client 110, a Windows server 120, a Linux server 130, a Solaris server 140, a Macintoshserver 150, an other platform server 160, and/or a cache server 170 interconnected by a network 180. Client 110 and/or servers 120-170 may connect to network 180 via wired and/or wireless connections. One client, six servers, and one network have beenillustrated in FIG. 1 for simplicity. In practice, there may be more or less clients, servers, and/or networks. Also, in some instances, one or more of client 110 and/or servers 120-170 may perform one or more functions described as being performed byanother one or more of client 110 and/or servers 120-170. Client 110 may include a laptop, a personal computer, a workstation, a radiotelephone, a personal communications system (PCS) terminal (e.g., that may combine a cellular radiotelephone with data processing and data communications capabilities),a personal digital assistant (PDA) (e.g., that can include a radiotelephone, a pager, Internet/intranet access, etc.), or other types of computation or communication devices, threads or processes running on these devices, and/or objects executable bythese devices. In one implementation, client 110 may produce a client program that may be executable on multiple heterogeneous server platforms (e.g., via servers 120-170), as described herein. Further details of client 110 are provided below inconnection with, for example, FIGS. 2-5. Windows server 120 may include one or more server entities, or other types of computation or communication devices, that gather, process, search, and/or provide information in a manner described herein. In one implementation, Windows server 120may provide a Windows-based server platform (e.g., a Windows operating system) that is capable of executing one or more portions of the client program provided by client 110. Further details of Windows server 120 are provided below in connection with,for example, FIGS. 6-8. Linux server 130 may include one or more server entities, or other types of computation or communication devices, that gather, process, search, and/or provide information in a manner described herein. In one implementation, Linux server 130 mayprovide a Linux-based server platform (e.g., a Linux operating system) that is capable of executing one or more portions of the client program generated client 110. Further details of Linux server 130 are provided below in connection with, for example,FIGS. 6-8. Solaris server 140 may include one or more server entities, or other types of computation or communication devices, that gather, process, search, and/or provide information in a manner described herein. In one implementation, Solaris server 140may provide a Solaris-based server platform (e.g., a Solaris operating system) that is capable of executing one or more portions of the client program provided by client 110. Further details of Solaris server 140 are provided below in connection with,for example, FIGS. 6-8. Macintosh (MAC) server 150 may include one or more server entities, or other types of computation or communication devices, that gather, process, search, and/or provide information in a manner described herein. In one implementation, Macintoshserver 150 may provide a Macintosh-based server platform (e.g., a Macintosh or Macintosh-compatible operating system) that is capable of executing one or more portions of the client program provided by client 110. Further details of Macintosh server 150are provided below in connection with, for example, FIGS. 6-8. Other platform server 160 may include one or more server entities, or other types of computation or communication devices, that gather, process, search, and/or provide information in a manner described herein. In one implementation, otherplatform server 160 may provide another server platform (e.g., a UNIX-based operating system) that is capable of executing one or more portions of the client program provided by client 110. Further details of other platform server 160 are provided belowin connection with, for example, FIGS. 6-8. Cache server 170 may include one or more server entities, or other types of computation or communication devices, that gather, process, search, and/or provide information in a manner described herein. In one implementation, cache server 170 mayprovide a distributed cache environment that is capable of receiving one or more portions of the client program provided by client 110. The distributed cache environment may distribute the one or more portions of the client program to one or more ofservers 120-160. Further details of cache server 170 are provided below in connection with, for example, FIGS. 6-8. Network 180 may include a local area network (LAN), a wide area network (WAN), a metropolitan area network (MAN), an intranet, the Internet, a Public Land Mobile Network (PLMN), a telephone network, such as the Public Switched Telephone Network(PSTN) or a cellular telephone network, or a combination of networks.Exemplary Client and Server Configuration FIG. 2 is an exemplary diagram of a device 200 that may correspond to client 110, Windows server 120, Linux server 130, Solaris server 140, Macintosh server 150, other platform server 160, and/or cache server 170. As illustrated, device 200 mayinclude a bus 210, processing logic 220, a main memory 230, a read-only memory (ROM) 240, a storage device 250, an input device 260, an output device 270, and/or a communication interface 280. Bus 210 may include a path that permits communication amongthe components of device 200. Processing logic 220 may include a processor, microprocessor, or other type of processing logic that may interpret and execute instructions. Main memory 230 may include a random access memory (RAM) or another type of dynamic storage device thatmay store information and instructions for execution by processing logic 220. ROM 240 may include a ROM device or another type of static storage device that may store static information and/or instructions for use by processing logic 220. Storagedevice 250 may include a magnetic and/or optical recording medium and its corresponding drive. Input device 260 may include a mechanism that permits an operator to input information to device 200, such as a keyboard, a mouse, a pen, a microphone, voice recognition and/or biometric mechanisms, etc. Output device 270 may include a mechanismthat outputs information to the operator, including a display, a printer, a speaker, etc. Communication interface 280 may include any transceiver-like mechanism that enables device 200 to communicate with other devices and/or systems. For example,communication interface 280 may include mechanisms for communicating with another device or system via a network, such as network 180. As described herein, device 200 may perform certain operations in response to processing logic 220 executing software instructions contained in a computer-readable medium, such as main memory 230. A computer-readable medium may be defined as aphysical or logical memory device. The software instructions may be read into main memory 230 from another computer-readable medium, such as storage device 250, or from another device via communication interface 280. The software instructions containedin main memory 230 may cause processing logic 220 to perform processes described herein. Alternatively, hardwired circuitry may be used in place of or in combination with software instructions to implement processes described herein. Thus,implementations described herein are not limited to any specific combination of hardware circuitry and software. Although FIG. 2 shows exemplary components of device 200, in other implementations, device 200 may contain fewer, different, or additional components than depicted in FIG. 2. In still other implementations, one or more components of device 200may perform one or more other tasks described as being performed by one or more other components of device 200.Exemplary Client Configurations FIG. 3 depicts exemplary components of client 110. As illustrated, client 110 may include a technical computing environment (TCE) 300, which may further include TCE programs 310 and TCE compiler/builder logic 320; and a client environment 330,which may further include an Excel program 340, a Java program 350, a C/C++ program 360, and an other program 370. Technical computing environment 300 may include any of the features described above with respect to the term ""technical computing environment."" Each of TCE programs 310 may include a program capable of being created with and/or generated by technical computing environment 300. For example, in one implementation, each of TCE programs 310 may include a program with one or more parallelprocessing constructs that enable the one or more portions of the program to be executed in parallel with multiple hardware resources (e.g., one or more of servers 120-160). In one example, the parallel processing construct may include a single program,multiple data (SPMD) command. Client 110 may implement the SPMD command to generate program portions. In another example, the parallel processing construct may include a PARFOR command. Client 110 may implement the PARFOR command to generate programportions. In still another example, the parallel processing construct may include a PARSECTION command. Client 110 may implement the PARSECTION command to generate program portions. In an exemplary implementation, the one or more parallel processingconstructs may be executed serially (e.g., by client 110) if multiple hardware resources (e.g., servers 120-160) are unavailable, and/or in parallel (e.g., by one or more of servers 120-160) if multiple hardware resources (e.g., servers 120-160) areavailable. Such an arrangement may permit portability of a client program (e.g., may permit the client program to execute on multiple heterogeneous server platforms). In another exemplary implementation, each of TCE programs may include a program with one or more distributed computing constructs that enable the one or more portions of the program to be executed in a distributed manner with multiple hardwareresources (e.g., one or more of servers 120-160). TCE compiler/builder logic 320 may include hardware, software, and/or a combination of hardware and software based logic that may receive TCE programs 310, and may process TCE programs 310 to create target components (e.g., plugins) forintegration into client environment 330. For example, TCE compiler/builder logic 320 may receive one of TCE programs 310, may create a target component (e.g., an Excel plugin) based on the one TCE program 310, and may provide the Excel plugin to Excelprogram 340. In another example, TCE compiler/builder logic 320 may receive one of TCE programs 310, may create a target component (e.g., a Java plugin) based on the one TCE program 310, and may provide the Java plugin to Java program 350. In stillanother example, TCE compiler/builder logic 320 may receive one of TCE programs 310, may create a target component (e.g., a C/C++ plugin) based on the one TCE program 310, and may provide the C/C++ plugin to C/C++ program 360. In a further example, TCEcompiler/builder logic 320 may receive one of TCE programs 310, may create a target component (e.g., a plugin for another server platform) based on the one TCE program 310, and may provide the plugin to other program 370. In one exemplaryimplementation, the target components may implement the parallel processing constructs and/or the distributed computing constructs provided by TCE programs 310. Client environment 330 may include one or more target environments. In one exemplary implementation, client environment 330 may include target environments, such as Excel program 340, Java program 350, C/C++ program 360, and other program 370. Excel program 340 may include a program that may receive a target component (e.g., an Excel plugin) from TCE compiler/builder logic 320, and may integrate the Excel plugin into a target environment (e.g., Microsoft Excel) to create a clientprogram (e.g., an Excel-based program) capable of being executed on multiple heterogeneous server platforms (e.g., servers 120-160). The client program created by Excel program 340 may be provided to the multiple heterogeneous server platforms (e.g.,servers 120-160) for execution. Java program 350 may include a program that may receive a target component (e.g., an Java plugin) from TCE compiler/builder logic 320, and may integrate the Java plugin into a target environment (e.g., a Java class library) to create a clientprogram (e.g., a Java-based program) capable of being executed on multiple heterogeneous server platforms (e.g., servers 120-160). The client program created by Java program 350 may be provided to the multiple heterogeneous server platforms (e.g.,servers 120-160) for execution. C/C++ program 360 may include a program that may receive a target component (e.g., a C/C++ plugin) from TCE compiler/builder logic 320, and may integrate the C/C++ plugin into a target environment (e.g., a C/C++ programming environment) tocreate a client program (e.g., a C/C++-based program) capable of being executed on multiple heterogeneous server platforms (e.g., servers 120-160). The client program created by C/C++ program 360 may be provided to the multiple heterogeneous serverplatforms (e.g., servers 120-160) for execution. Other program 370 may include a program that may receive a target component (e.g., a plugin for another server platform) from TCE compiler/builder logic 320, and may integrate the other plugin into a target environment (e.g., another serverplatform) to create a client program (e.g., another server platform-based program) capable of being executed on multiple heterogeneous server platforms (e.g., servers 120-160). The client program created by Other program 370 may be provided to themultiple heterogeneous server platforms (e.g., servers 120-160) for execution. In one exemplary implementation, the client programs created by Excel program 340, Java program 350, C/C++ program 360, and other program 370 may be executed in a parallel manner and/or a distributed manner based on the parallel processingconstructs and/or the distributed computing constructs implemented by the target components. In another exemplary implementation, the client programs created by Excel program 340, Java program 350, C/C++ program 360, and other program 370 may beprovided to an end user (e.g., via computer readable media, via a web service that allows machine-to-machine communications over a network, etc.), and the end user may execute the client programs in a parallel manner and/or a distributed manner. Although FIG. 3 shows exemplary components of client 110, in other implementations, client 110 may contain fewer, different, or additional components than depicted in FIG. 3. In still other implementations, one or more components of client 110may perform one or more other tasks described as being performed by one or more other components of client 110. FIG. 4 illustrates exemplary functional components of client 110. As shown, client 110 may include TCE compiler/builder logic 320, TCE program generator logic 400, target environment generator logic 410, and target component integrator logic420. TCE compiler/builder logic 320 may include the features described above in connection with FIG. 3. TCE program generator logic 400 may include hardware, software, and/or a combination of hardware and software based logic that may generate TCE program 310 (e.g., a parallel and/or distributed TCE program). For example, in one implementation,TCE program generator logic 400 may generate a program with one or more parallel processing constructs that enable the one or more portions of the program to be executed in parallel with multiple hardware resources (e.g., one or more of servers 120-160). In another implementation, TCE program generator logic 400 may generate a program with one or more distributed computing constructs that enable the one or more portions of the program to be executed in a distributed manner with multiple hardwareresources (e.g., one or more of servers 120-160). TCE program generator logic 400 may provide TCE program 310 to TCE compiler/builder logic 320. Target environment generator logic 410 may include hardware, software, and/or a combination of hardware and software based logic that may generate an interface 430 to invoke TCE program 310 and may generate a target environment 440. Targetenvironment generator logic 410 may provide interface 430 to TCE compiler/builder 320, and may provide target environment 440 to target component integrator 420. Target environment 440 may include any of the features described above with respect to theterm ""target environment."" TCE compiler/builder logic 320 may receive TCE program 310 from TCE program generator logic 400, and may receive interface 430 from target environment generator logic 410. TCE compiler/builder 320 may utilize TCE program 310 and interface 430to generate a target component 450. Target component 450 may include a variety of target components (e.g., an Excel plugin, a Java plugin, a C/C++ plugin, etc.), and may include parallel processing constructs and/or the distributed computing constructsprovided by TCE program 310. TCE compiler/builder 320 may provide target component 450 to target component integrator 420. Target component integrator logic 420 may include hardware, software, and/or a combination of hardware and software based logic that may receive target environment 440 and target component 450, and may generate a client program 460 based ontarget environment 440 and target component 450. For example, in one implementation, target component integrator logic 420 may integrate target component 450 into target environment 440 to create client program 460 executable on multiple heterogeneousplatform servers (e.g., servers 120-160). In one example, target component integrator logic 420 may reference interface 430 in target environment 440 and may invoke functions associated with interface 430 to create client program 460. In one implementation, client program 460 may include an Excel-based program, a Java-based program, a C/C++-based program, etc. Client program 460 may be provided to multiple heterogeneous platform servers (e.g., servers 120-160), and may beexecuted in a parallel manner and/or a distributed manner by servers 120-160 based on the parallel processing constructs and/or the distributed computing constructs implemented by target component 450. Alternatively and/or additionally, client program460 may be provided to an end user (e.g., via computer readable media, via a web service, etc.), and the end user may execute client program 460 in a parallel manner and/or a distributed manner with servers 120-160 based on the parallel processingconstructs and/or the distributed computing constructs implemented by target component 450. Although FIG. 4 shows exemplary functional components of client 110, in other implementations, client 110 may contain fewer, different, or additional functional components than depicted in FIG. 4. In still other implementations, one or morefunctional components of client 110 may perform one or more other tasks described as being performed by one or more other functional components of client 110. FIG. 5 depicts exemplary functional components of TCE compiler/builder logic 320 of client 110. As illustrated, client 110 may include program structure computer logic 500, license information associator logic 510, and executable contentpackager logic 520. Program structure computer logic 500 may include hardware, software, and/or a combination of hardware and software based logic that may receive TCE program 310, and may determine executable content of TCE program 310 that may be executed outsideTCE 300, as indicate by reference number 540. In one example, program structure computer logic 500 may analyze TCE program 310, and may identify executable content (e.g., functions) that may be required to execute TCE program outside TCE 300. Programstructure computer logic 500 may provide the identified executable content 540 to license information associator logic 510 and executable content packager logic 520. Program structure computer logic 500 may determine, based on TCE program 310, a number, types, behavior (e.g., failover support, etc.), and/or communication information, as indicated by reference number 550, associated with available hardwareresources (e.g., servers 120-160). In one example, program structure computer logic 500 may determine that a number (e.g., two) of hardware resources (e.g., Windows server 120 and Linux server 130) are available, and that the available hardwareresources are certain types (e.g., a Windows-based server platform and Linux-based server platform). In another example, program structure computer logic 500 may determine mechanisms (e.g., network 180) by which client 110 may communicate with theavailable hardware resources. In still another example, information 550 may include configuration information (e.g., to determine what server scheduling environment and/or target environment to use) associated with TCE program 310. The configurationinformation may be provided by a user, and, if not provided by the user, may be automatically provided by program structure computer logic 500 based on TCE program 310. Program structure computer logic 500 may provide information 550 to executablecontent packager logic 520. License information associator logic 510 may include hardware, software, and/or a combination of hardware and software based logic that may receive identified executable content 540, and may associate license information, as indicated byreference number 560, with identified executable content 540. For example, in one implementation, license information associator logic 510 may extract license information from TCE 300, and may create a function that returns names of licensed productsassociated with identified executable content 540. If identified executable content 540 is invoked, associated license information 560 may be referenced (e.g., for valid licenses) so that identified executable content 540 may be executed with validlicenses. License information associator logic 510 may provide associated license information 560 to executable content packager logic 520. Executable content packager logic 520 may include hardware, software, and/or a combination of hardware and software based logic that may receive identified executable content 540, information 550, and associated license information 560, and maycombine identified executable content 540, information 550, and associated license information 560 into a platform-independent, redistributable program 570. In one implementation, platform-independent, redistributable program 570 may include targetcomponent 450 described above in connection with FIG. 4. Platform-independent, redistributable file 570 may provide configuration information for client program 460. The configuration information may enable client program 460 to arbitrarily target oneor more of the multiple heterogeneous server platforms for execution. The configuration information may enable client program 460 to execute serially when none of the multiple heterogeneous server platforms are available to execute client program 460. The configuration information may enable client program 460 to select, at a time of execution, between serial execution and arbitrarily targeting one or more of the multiple heterogeneous server platforms for execution. Executable content packager logic520 may provide platform-independent, redistributable program 570 to target component integrator logic 420. Target component integrator logic 420 may integrate platform-independent, redistributable program 570 into target environment 440 to createclient program 460. For example, target component integrator logic 420 may invoke a build tool (e.g., a C++ compiler) appropriate for target environment 440, which may transform platform-independent, redistributable program 570 into client program 460. Although FIG. 5 shows exemplary functional components of TCE compiler/builder logic 320, in other implementations, TCE compiler/builder logic 320 may contain fewer, different, or additional functional components than depicted in FIG. 5. Instill other implementations, one or more functional components of TCE compiler/builder logic 320 may perform one or more other tasks described as being performed by one or more other functional components of TCE compiler/builder logic 320.Exemplary Interactions of Servers FIG. 6 illustrates an exemplary diagram of interactions between a server scheduling environment 600 and cache server 170. As shown, server scheduling environment 600 may include Windows server 120, Linux server 130, Solaris server 140,Macintosh server 150, other server 160, and a scheduler/job manager 610. As further shown, cache server 170 may include program structure cache 620 and shared program cache 630. Scheduler/job manager 610 may include one or more server entities, or other types of computation or communication devices, that gather, process, search, and/or provide information in a manner described herein. In one implementation,scheduler/job manager 610 may manage program state and/or task(s) 640 (e.g., associated with a client program) and/or may assign program state/task(s) 640 to servers 120-160. Scheduler/job manager 610 may enable program state/task(s) 640 to bedistributed across networks (e.g., network 180) of widely varying topologies. In one example, scheduler/job manager 610 may include an industry-standard scheduler, such as Platform LSF.RTM., Microsoft.RTM. Windows.RTM. Compute Cluster Server (CCS),PBS Pro.RTM., and TORQUE schedulers. Program state/task(s) 640 may include functions associated with a client program, program state information (e.g., run time information, variable values, call stack state, location of program, etc.), etc. Program structure cache 620 may include one or more cache memories that may be used by a central processing unit (CPU) of a single computing device (e.g., Windows server 120) to reduce the average time to access a main memory (e.g., of Windowsserver 120), which may be slower and/or larger than internal memory used for cache. For example, as shown in FIG. 6, one program cache 620 may communicate with (e.g., be local to) a single server (e.g., Windows server 120), and another program cache 620may communicate with another single server (e.g., Macintosh server 150). Shared program cache 630 may include one or more cache memories that may be used by CPUs of multiple computing devices (e.g., Linux server 130 and Solaris server 140) to reduce the average time to access main memories (e.g., of Linux server 130and Solaris server 140), which may be slower and/or larger than internal memory used for cache. For example, as shown in FIG. 6, shared program cache 630 may communicate with multiple servers (e.g., Linux server 130, Solaris server 140, and otherplatform server 160). As further shown in FIG. 6, cache and/or license information 650-1, . . . , 650-5 may be exchanged between servers 120-160 and program cache 620 and shared program cache 630. Cache/license information 650-1, . . . , 650-5 may includeexecutable content common to multiple parallel and/or distributed programs (e.g., client programs) and/or license information associated with the executable content. For example, one program structure cache 620 may share cache/license information 650-1with Windows server 120. Shared program cache 630 may share cache/license information 650-2, 650-3, and 650-5 with Linux server 130, Solaris server 140, and other platform server 160, respectively. Another program structure cache 620 may sharecache/license information 650-4 with Macintosh server 150. Cache server 170 (e.g., program structure cache 620 and/or shared program cache 630) may reduce the cost of client (e.g., client 110) to server (e.g., servers 120-160) file transfer by requiring client 110 to transfer only executable contentthat is not present in cache server 170. The reduced client to server file transfer may also be beneficial if bandwidth (e.g., of network 180) is limited. Although FIG. 6 shows exemplary interactions between server scheduling environment 600 and cache server 170, in other implementations, fewer, different, or additional interactions may occur between server scheduling environment 600 and cacheserver 170 than depicted in FIG. 6. FIG. 7 depicts an exemplary diagram 700 of interactions between client environment 330, server scheduling environment 600, and cache server 170. Client environment 330 may include the features described above in connection with FIG. 3. Serverscheduling environment 600 and cache server 170 may include features described above in connection with FIG. 6. As shown in FIG. 7, client environment 330 (e.g., Excel program 340, Java program 350, C/C++ program 360, and/or other program 370) may exchange cache information 170 with cache server 170 (e.g., with program structure cache 620 and/or sharedprogram cache 630). Cache information 710 may include executable content common to multiple parallel and/or distributed programs (e.g., client programs, such as client program 460) and/or license information associated with the executable content. Client environment 330 (e.g., Excel program 340, Java program 350, C/C++ program 360, and/or other program 370) may provide resource and/or task processing requests 720 to scheduler/job manager 610 of server scheduling environment 600. Resource/task processing requests 720 may include requests for hardware resources (e.g., to execute client programs), requests to execute client programs, one or more portions of client programs, etc. Scheduler/job manager 610 may receive resource/taskprocessing requests 720, and may determine an allocation strategy for resource/task processing requests 720 based on available hardware resources (e.g., servers 120-160) and resource/task processing requests 720. For example, scheduler/job manager 610may allocate Excel tasks 730 (e.g., associated with an Excel-based client program) to Windows server 120 and Linux server 130, may allocate Java tasks 740 (e.g., associated with a Java-based client program) to Solaris server 140 and Macintosh server 150,may allocate C/C++ tasks 750 (e.g., associated with a C/C++-based client program) to Macintosh server 150, and may allocate other tasks 760 (e.g., associated with another client program) to other platform server 160. As further shown in FIG. 7, cache server 170 (e.g., program structure cache 620 and shared program cache 630) may communicate cache/license information 650-1, . . . , 650-5 with servers 120-160. For example, servers 120-160 may requestexecutable content associated with processing tasks 730-760 from cache server 170 via cache/license information 650-1, . . . , 650-5. If cache server 170 contains the requested executable content, cache server 170 may provide the requested executablecontent to servers 120-160 via cache/license information 650-1, . . . , 650-5. If cache server 170 does not contain the request executable content, servers 120-170 may request the executable content directly from client 110, and client 110 may providethe requested executable content. The system depicted in FIG. 7, and described herein, may provide an automatic, efficient, resource management and distribution system for computational state and tasks (e.g., client programs). A user may need to only identify the servers to beused. Alternatively and/or additionally, the servers may be automatically identified (e.g., by scheduler/job manager 610). The system may automatically transfer the required executable content from client 110 to servers 120-160. The system mayautomatically integrate license and executable content to enable client programs to operate independent of server platform and to be robust to server failure. For example, if a client program is executing on a server that fails, the client program'scomputational state may be transferred to another server and the computation may be resumed. Although FIG. 7 shows exemplary interactions between client environment 330, server scheduling environment 600, and cache server 170, in other implementations, fewer, different, or additional interactions may occur between client environment330, server scheduling environment 600, and cache server 170 than depicted in FIG. 7. FIG. 8 illustrates an exemplary diagram 800 of interactions between Excel program 340, scheduler/job manager 610, distributed cache (e.g., program structure cache 620 and/or shared program cache 630), and servers 120-160. As shown, Excelprogram 340 may receive configuration information 805 associated with hardware resources (e.g., servers 120-160), and may provide a request 810 for a resource to scheduler/job manager 610. If the requested resource is available, scheduler/job manager610 may allocate the resource, as indicated by reference number 815, to Excel program 340. Excel program 340 may provide a query 820 for cache contents (e.g., associated with Excel program 340) to distributed cache 620/630, and distributed cache 620/630may enumerate resources (e.g., executable content, data, etc.) not present in cache, as indicated by reference number 825. Excel program 340 may provide the enumerated resources to distributed cache 620/630, as indicated by reference number 830. As further shown in FIG. 8, Excel program 340 may provide a request 835 for task processing to scheduler/job manager 610, and scheduler/job manager 610 may provide a task assignment (e.g., ""#N"") 840 to servers 120-160. In one example,scheduler/job manager 610 may automatically distribute request 835 for task processing across multiple heterogeneous server platforms (e.g., servers 120-160) based on request 835. Task assignment 840 may include a portion of the task processingrequested by Excel program 340. Before executing task assignment 840, servers 120-160 may provide a request 845 for license information associated with task assignment 840 to distributed cache 620/630. Distributed cache 620/630 may provide therequested license information, as indicated by reference number 850, and servers 120-160 may execute task assignment 840. When execution of task assignment 840 is complete, servers 120-160 may provide an indication that the task is complete toscheduler/job manager 610, as indicated by reference number 855. This process may continue until the task processing is complete (i.e., until all tasks are complete). When servers 120-160 have executed all tasks, scheduler/job manager 610 may informExcel program 340 that all tasks are complete, as indicated by reference number 860, and may provide results of the completed tasks to Excel program 340. Although FIG. 8 shows exemplary interactions between Excel program 340, scheduler/job manager 610, distributed cache 620/630, and servers 120-160, in other implementations, fewer, different, or additional interactions may occur between Excelprogram 340, scheduler/job manager 610, distributed cache 620/630, and servers 120-160 than depicted in FIG. 8.Exemplary Processes FIGS. 9-11 depict a flow chart of an exemplary process 900 for producing a client program that may be executable on multiple heterogeneous server platforms, according to implementations described herein. In one implementation, process 900 maybe performed by client 110. In another implementation, some or all of process 900 may be performed by another device or group of devices, including or excluding client 110. As illustrated in FIG. 9, process 900 may begin with receipt or creation of a program with a parallel construct or a distributed construct (block 910), creation of a target component from the program (block 920), and identification of executablecontent of the program that is executable outside a technical computing environment (block 930). For example, in implementations described above in connection with FIGS. 3 and 5, each of TCE programs 310 may include a program capable of being createdwith and/or generated by technical computing environment 300. In one example, each of TCE programs 310 may include a program with one or more parallel processing constructs that enable the one or more portions of the program to be executed in parallelwith multiple hardware resources (e.g., one or more of servers 120-160). In another example, each of TCE programs may include a program with one or more distributed computing constructs that enable the one or more portions of the program to be executedin a distributed manner with multiple hardware resources (e.g., one or more of servers 120-160). TCE compiler/builder logic 320 of client 110 may receive TCE programs 310, and may process TCE programs 310 to create target components (e.g., plugins) forintegration into client environment 330. Program structure computer logic 500 of client 110 may receive TCE program 310, and may determine executable content of TCE program 310 that may executed be outside TCE 300, as indicated by reference number 540. As further shown in FIG. 9, license information may be associated with the identified executable content of the program (block 940), and the identified executable content of the program and the associated license information may be combined intoa platform-independent, redistributable program (block 950). For example, in implementations described above in connection with FIG. 5, license information associator logic 510 of client 110 may receive identified executable content 540, and mayassociate license information, as indicated by reference number 560, with identified executable content 540. Executable content packager logic 520 of client 110 may receive identified executable content 540, information 550, and associated licenseinformation 560, and may combine identified executable content 540, information 550, and associated license information 560 into platform-independent, redistributable program 570. Returning to FIG. 9, the target component and/or the platform-independent, redistributable program may be integrated into a target environment to produce a client program executable on multiple heterogeneous server platforms (block 960), and theclient program may be provided to the multiple heterogeneous server platforms for execution (block 970). For example, in implementations described above in connection with FIGS. 4 and 5, target component integrator logic 420 of client 110 may integratetarget component 450 into target environment 440 to create client program 460 executable on multiple heterogeneous platform servers (e.g., servers 120-160). Platform-independent, redistributable program 570 may include target component 450. Executablecontent packager logic 520 of client 110 may provide platform-independent, redistributable program 570 to target component integrator logic 420. Target component integrator logic 420 may integrate platform-independent, redistributable program 570 intotarget environment 440 to create client program 460. Process block 950 may include the process blocks illustrated in FIG. 10. As shown in FIG. 10, process block 950 may include determining a number, a type, and/or a behavior associated with the multiple heterogeneous server platforms (block1000), determining communication information associated with the multiple heterogeneous server platforms (block 1010), and integrating the determined number, type, behavior, and/or communication information associated into the platform-independent,redistributable program (block 1020). For example, in implementations described above in connection with FIG. 5, program structure computer logic 500 of client 110 may determine, based on TCE program 310, a number, types, behavior (e.g., failoversupport, etc.), and/or communication information, as indicated by reference number 550, associated with available hardware resources (e.g., servers 120-160). Program structure computer logic 500 may provide information 550 to executable content packagerlogic 520. Executable content packager logic 520 may receive identified executable content 540, information 550, and associated license information 560, and may combine identified executable content 540, information 550, and associated licenseinformation 560 into a platform-independent, redistributable program 570. Process block 970 may include the process blocks illustrated in FIG. 11. As shown in FIG. 11, process block 970 may include providing a request for task processing associated with the client program, where the tasks are automaticallydistributed across the multiple heterogeneous server platforms based on the request (block 1100), and receiving one or more results associated with one or more completed task(s) from the multiple heterogeneous server platforms (block 1110). For example,in implementations described above in connection with FIG. 8, Excel program 340 may provide request 835 for task processing to scheduler/job manager 610, and scheduler/job manager 610 may provide task assignment 840 to servers 120-160. In one example,scheduler/job manager 610 may automatically distribute request 835 for task processing across multiple heterogeneous server platforms (e.g., servers 120-160) based on request 835. When execution of task assignment 840 is complete, servers 120-160 mayprovide an indication that the task is complete to scheduler/job manager 610, as indicated by reference number 855. This process may continue until the task processing is complete (i.e., until all tasks are complete). When servers 120-160 have executedall tasks, scheduler/job manager 610 may inform Excel program 340 that all tasks are complete, as indicated by reference number 860, and may provide results of the completed tasks to Excel program 340. FIGS. 12 and 13 depict a flow chart of an exemplary process 1200 for executing a client program on multiple heterogeneous server platforms, according to implementations described herein. In one implementation, process 1200 may be performed byscheduler/job manager 610. In another implementation, some or all of process 1200 may be performed by another device or group of devices, including or excluding scheduler/job manager 610. As illustrated in FIG. 12, process 1200 may begin with receiving a request for task processing associated with a client program (block 1210), and automatically distributing one or more tasks across multiple heterogeneous server platforms (block1220). For example, in implementations described above in connection with FIG. 8, Excel program 340 may provide request 835 for task processing to scheduler/job manager 610, and scheduler/job manager 610 may provide task assignment 840 to servers120-160. In one example, scheduler/job manager 610 may automatically distribute request 835 for task processing across multiple heterogeneous server platforms (e.g., servers 120-160) based on request 835. As further shown in FIG. 12, one or more completed tasks may be received from the multiple heterogeneous server platforms (block 1230), and the one or more completed tasks may be provided to the requestor of the task processing (block 1240). For example, in implementations described above in connection with FIG. 8, when execution of task assignment 840 is complete, servers 120-160 may provide an indication that the task is complete to scheduler/job manager 610, as indicated by referencenumber 855. This process may continue until the task processing is complete (i.e., until all tasks are complete). When servers 120-160 have executed all tasks, scheduler/job manager 610 may inform Excel program 340 that all tasks are complete, asindicated by reference number 860, and may provide results of the completed tasks to Excel program 340. Process block 1220 may include the process blocks illustrated in FIG. 13. As shown in FIG. 13, process block 1220 may include receiving an indication of failure from one of the multiple heterogeneous server platforms (block 1300), andredistributing the one or more tasks from the failing server platform to one or more of the multiple heterogeneous server platforms (block 1310). For example, in implementations described above in connection with FIG. 7, the system described herein mayprovide an automatic, efficient, resource management and distribution system for computational state and tasks (e.g., client programs). The system may automatically transfer the required executable content from client 110 to servers 120-160. The systemmay automatically integrate license and executable content to enable client programs to operate independent of server platform and to be robust to server failure. In one example, if a client program is executing on a server that fails, the clientprogram's computational state may be transferred to another server and the computation may be resumed. FIG. 14 depicts a flow chart of an exemplary process 1400 for executing a client program on multiple heterogeneous server platforms, according to implementations described herein. In one implementation, process 1400 may be performed by cachesever 170. In another implementation, some or all of process 1400 may be performed by another device or group of devices, including or excluding cache server 170. As illustrated in FIG. 14, process 1400 may begin with receipt of task information associated with execution of a client program by one or more of multiple heterogeneous server platforms (block 1410), and determination of executable content,associated with the client program, that is absent from one or more of the multiple heterogeneous server platforms based on the task information (block 1420). For example, in implementations described above in connection with FIG. 8, Excel program 340may provide a query 820 for cache contents (e.g., associated with Excel program 340) to distributed cache 620/630, and distributed cache 620/630 may enumerate resources (e.g., executable content, data, etc.) not present in cache, as indicated byreference number 825. As further shown in FIG. 14, the absent executable content may be received from the client program (block 1430), and the absent executable content may be provided to one or more of the multiple heterogeneous server platforms (block 1440). Forexample, in implementations described above in connection with FIGS. 6 and 8, Excel program 340 may provide the enumerated resources to distributed cache 620/630, as indicated by reference number 830. Distributed cache 620/630 may provide resources 830to servers 120-160. Cache server 170 (e.g., program structure cache 620 and/or shared program cache 630) may reduce the cost of client (e.g., client 110) to server (e.g., servers 120-160) file transfer by requiring client 110 to transfer only executablecontent that is not present in cache server 170.CONCLUSION Implementations described herein may include systems and/or methods that produce a client program that may be executable on multiple heterogeneous server platforms. For example, in one implementation, the systems and/or methods may receiveand/or create a program (e.g., a technical computing environment (TCE) program) with a parallel or distributed construct, and may create a target component from the program. The systems and/or methods may identify executable content of the programexecutable outside the TCE, and may associate license information with the identified executable content of the program. The systems and/or methods may also combine the identified executable content of the program and the associated license informationinto a platform-independent, redistributable program, and may integrate the target component and the platform-independent, redistributable program into a target environment to produce a client program executable on multiple heterogeneous serverplatforms. The systems and/or methods may provide the client program to the multiple heterogeneous server platforms for execution. The foregoing description of implementations provides illustration and description, but is not intended to be exhaustive or to limit the invention to the precise form disclosed. Modifications and variations are possible in light of the aboveteachings or may be acquired from practice of the invention. For example, while series of blocks have been described with regard to FIGS. 9-14, the order of the blocks may be modified in other implementations. Further, non-dependent blocks may be performed in parallel. It will be apparent that embodiments, as described herein, may be implemented in many different forms of software, firmware, and hardware in the implementations illustrated in the figures. The actual software code or specialized controlhardware used to implement embodiments described herein is not limiting of the invention. Thus, the operation and behavior of the embodiments were described without reference to the specific software code--it being understood that one would be able todesign software and control hardware to implement the embodiments based on the description herein. Further, certain portions of the invention may be implemented as ""logic"" that performs one or more functions. This logic may include hardware, such as an application specific integrated circuit or a field programmable gate array, software, or acombination of hardware and software. Even though particular combinations of features are recited in the claims and/or disclosed in the specification, these combinations are not intended to limit the invention. In fact, many of these features may be combined in ways notspecifically recited in the claims and/or disclosed in the specification. No element, act, or instruction used in the present application should be construed as critical or essential to the invention unless explicitly described as such. Also, as used herein, the article ""a"" is intended to include one or more items. Where only one item is intended, the term ""one"" or similar language is used. Further, the phrase ""based on"" is intended to mean ""based, at least in part, on"" unless explicitly stated otherwise."
4|http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=99&p=2&f=G&l=50&d=PTXT&S1=(python.CLTX.+or+python.DCTX.)&OS=ACLM/python&RS=ACLM/python|Systems, methods and apparatus for modeling, specifying and deploying policies in autonomous and autonomic systems using agent-oriented software engineering|Systems, methods and apparatus are provided through which in some embodiments, an agent-oriented specification modeled with MaCMAS, is analyzed, flaws in the agent-oriented specification modeled with MaCMAS are corrected, and an implementation is derived from the corrected agent-oriented specification. Described herein are systems, method and apparatus that produce fully (mathematically) tractable development of agent-oriented specification(s) modeled with methodology fragment for analyzing complex multiagent systems (MaCMAS) and policies for autonomic systems from requirements through to code generation. The systems, method and apparatus described herein are illustrated through an example showing how user formulated policies can be translated into a formal mode which can then be converted to code. The requirements-based programming systems, method and apparatus described herein may provide faster, higher quality development and maintenance of autonomic systems based on user formulation of policies.|
5|http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=65&p=2&f=G&l=50&d=PTXT&S1=(python.CLTX.+or+python.DCTX.)&OS=ACLM/python&RS=ACLM/python|System and a method for web-based editing of documents online with an editing interface and concurrent display to webpages and print documents|A method and a system for editing documents online, that in some implementations, simultaneously edits a webpage document, in a webpage file format, and an image document, in an image file format. The webpage document and the image document may have substantially similar visual content. In some implementations, an editing interface is displayed to a client device. The editing interface may have a first portion displaying one or more webpage editing forms for editing the webpage document and a second portion displaying the webpage document or image document being edited. The editing interface accepts editing data from the client device. Both the webpage document and an image document may be updated based on accepted editing data. The image document is updated in part by updating form data retrieved from a database. In some implementations, the updated webpage document is displayed on a webpage and access to the image document is provided from the webpage.|"1. A system for editing both a webpage document and an image document online, the system comprising: a processor; circuitry for displaying an editing interface to a clientdevice, via one or more networks, the displayed editing interface being configured for receiving editing data, via the client device, for editing both the webpage document and the image document, the webpage document being in one or more webpage fileformats and the image document being in one or more image file formats, the displayed editing interface including at least a first portion and a second portion, the editing interface being configured for displaying with the first portion of the editinginterface at least one or more webpage form documents, that are in one or more webpage file formats, for entering editing data and the editing interface being configured for displaying with the second portion of the editing interface at least one of thewebpage document or the image document; circuitry for accepting the editing data; circuitry for updating, automatically and substantially concurrently, both the webpage document and the image document based, at least in part, on the same acceptedediting data, substantially concurrently including within a window of time that is no greater than 15 seconds, wherein the circuitry for updating, automatically and substantially concurrently, both the webpage document and the image document includes atleast: circuitry for updating the webpage document based at least in part on the accepted editing data; circuitry for updating the image document based at least in part on the accepted editing data, the circuitry for updating the image documentincluding at least: circuitry for retrieving form data that is in one or more data management file formats from a database, for updating the form data based at least in part on the accepted editing data, for populating an image form document with theupdated form data, the image form document being in one or more image file formats, and for storing the updated form data in the database; circuitry for updating the image document with the image form document; and circuitry for continuing to displaythe editing interface until an indication is received that the client device has terminated editing; circuitry for accepting first input data via the one or more networks from the client device, the accepted first input data including at least thewebpage document and the one or more webpage form documents; circuitry for accepting second input data via the one or more networks from the client device, the accepted second input data including the image document and the image form document; andcircuitry for generating the form data, for populating the image form document with the generated form data, and for storing the form data in the database; wherein the image document having been created by scanning a hardcopy document and the webpagedocument having been based at least in part on the image document and each of the image document and the webpage document thereby having substantially similar viewable content; and wherein the circuitry for displaying an editing interface is configuredto display the first and second portions of the editing interface as, respectively, first and second windows, side-by-side for simultaneous viewing, in which: the first window is configured for displaying at least the webpage form document for entry ofediting data for editing both the webpage document and the image document, and the second window displaying at least the image document to be edited. 2. The system of claim 1, further comprising: circuitry for displaying the webpage document on a webpage; circuitry for providing access via one or more hyperlinks from the webpage to the image document; circuitry for displaying the updatedwebpage document on the webpage; and circuitry for providing access via one or more hyperlinks from the webpage to the updated image document. 3. The system of claim 1, wherein the one or more networks include at least the Internet and one or more intranets. 4. The system of claim 1, wherein the client device includes at least a first client device and a second client device, the circuitry for displaying an editing interface being configured for displaying the editing interface to the first clientdevice, the circuitry for accepting first input data being configured for accepting the first input data from the second client device, and the circuitry for accepting second input data being configured to accept the second input data from the secondclient device. 5. The system of claim 1, wherein at least one of the circuitries operates in response to a manual command issued by a human user of the system. 6. The system of claim 1, wherein at least one circuitry is not separate from at least one of the other circuitries. 7. The system of claim 1, further comprising circuitry for accepting and authenticating login data via the one or more networks from the client device, the login data corresponding to a human user of the client device, wherein the circuitry fordisplaying an editing interface displays the editing interface responsive to the accepted and authenticated login data. 8. The system of claim 1, wherein the webpage file format is at least one of HTML, XHTML, PHP, CSS (Cascading Style Sheets), Ruby, Python, or ASP (Active Server Pages). 9. The system of claim 1, wherein the image file format is at least one of PDF (Portable Document Format), TIFF (Tagged Image File Format), JPEG (Joint Photographic Experts Group), BMP (Bitmap Image File), PNG (Portable Network Graphics), XPS(XML Page Specification), GIF, or DjVU. 10. The system of claim 1, wherein the data management file format is one selected from the group consisting of FDF (Forms Data Format), XML (Extensible Markup Language), CSV (Comma Separated Values), TSV (Tab Separated Values), or Text. 11. The system of claim 1, wherein the first and second portions of the editing interface are, respectively, first and second frames of a webpage. 12. A method of editing both a webpage document and an image document online, the method comprising: displaying an editing interface to a client device, via one or more networks, the displayed editing interface being configured for receivingediting data, via the client device, for editing both the webpage document and the image document, the webpage document being in one or more webpage file formats and the image document being in one or more image file formats, the displayed editinginterface including at least a first portion and a second portion, the first portion displaying at least one or more webpage form documents for entering editing data, the second portion displaying at least one of the webpage document or the imagedocument in an image file format; accepting the editing data; updating, automatically and substantially concurrently, both the webpage document and the image document based, at least in part, on the same accepted editing data, substantiallyconcurrently including within a window of time that is no greater than 15 seconds, wherein the updating, automatically and substantially concurrently, both the webpage document and the image document includes at least: updating the webpage document basedat least in part on the accepted editing data; updating the image document based at least in part on the accepted editing data, the updating the image document including at least: accessing, from a database, form data that is in one or more datamanagement file formats, updating the form data based at least in part on the accepted editing data, populating an image form document with the updated form data, the image form document being in one or more image file formats, and storing the updatedform data in the database; generating, with the populated image form document, an updated image document; and continuing to display the editing interface until an indication is received that the client device has terminated the editing; acceptingfirst input data via the one or more networks from the client device, the accepted first input data including at least the webpage document and the one or more webpage form documents; accepting second input data via the one or more networks from theclient device, the accepted second input data including the image document and the image form document; and generating the form data, for populating the image form document with the generated form data, and for storing the form data in the database; wherein the image document having been created by scanning a hardcopy document and the webpage document having been based at least in part on the image document and each of the image document and the webpage document thereby having substantially similarvisual content; and wherein the displaying an editing interface is configured to display the first and second portions of the editing interface as, respectively, first and second windows, side-by-side for simultaneous viewing, in which: the first windowis configured for displaying at least the webpage form document for entry of editing data for editing both the webpage document and the image document, and the second window displaying at least the image document to be edited; and wherein at least oneof the displaying of the editing interface, the updating, automatically and substantially concurrently, both the webpage document and the image document, or continuing to display the editing interface is performed with a server. 13. The method of claim 12, further comprising: Displaying the webpage document on a webpage; providing access from the webpage to the image document; displaying the updated webpage document on the webpage; and providing access from thewebpage to the updated image document. 14. The method of claim 12, further comprising: accepting and storing, with the server, the image form document, the image form document having been generated based at least in part on the image document; accepting and storing, with theserver, the one or more webpage form documents; and accepting and storing, with the server, one or more map documents, for navigating about the one or more webpage form documents when editing the webpage document. 15. The method of claim 14, further comprising generating the form data with the server and storing the form data in the database, the database being resident on at least one of the server or a separate database server. 16. The method of claim 12, wherein the webpage file format is HTML and the entry of editing data into the webpage form document displayed in the first portion of the editing interface is performed by an HTML editor that is resident on theserver and accessible to the client device. 17. A non-transitory computer-readable storage media bearing computer-executable instructions that when executed causes the computer to execute a process, the process comprising: displaying an editing interface to a client device via one ormore networks, the displayed editing interface being configured for receiving editing data, via the client device, for editing both a webpage document and an image document, the webpage document being in one or more webpage file formats and the imagedocument being in one or more image file formats, the displayed editing interface including at least a first portion and a second portion, the first portion displaying at least one or more webpage form documents, that are in one or more webpage fileformats, for entering editing data, the second portion displaying at least one of the webpage document or the image document; accepting the editing data; updating, automatically and substantially concurrently, both the webpage document and the imagedocument based, at least in part, on the same accepted editing data, substantially concurrently including within a window of time that is no greater than 15 seconds, wherein the updating, automatically and substantially concurrently, both the webpagedocument and the image document includes at least: updating the webpage document based at least in part on the accepted editing data; updating the image document based at least in part on the accepted editing data, the updating the image documentincluding at least: accessing, from a database, form data that is in one or more data management file formats, updating the form data based at least in part on the accepted editing data, populating an image form document with the updated form data, theimage form document being in one or more image file formats, and storing the updated form data in the database; and generating, with the populated image form document, an updated image document; and accepting first input data via the one or morenetworks from the client device, the accepted first input data including at least the webpage document and the one or more webpage form documents; accepting second input data via the one or more networks from the client device, the accepted second inputdata including the image document and the image form document; and generating the form data, for populating the image form document with the generated form data, and for storing the form data in the database; wherein the image document having beencreated by scanning a hardcopy document and the webpage document having been based at least in part on the image document and each of the image document and the webpage document thereby having substantially similar viewable content; and wherein thedisplaying an editing interface is configured to display the first and second portions of the editing interface as, respectively, first and second windows, side-by-side for simultaneous viewing, in which: the first window is configured for displaying atleast the webpage form document for entry of editing data for editing both the webpage document and the image document, and the second window displaying at least the image document to be edited. Description FIELD This invention relates to a system and a method of editing documents online with an editing interface. More specifically, this invention relates to a system and a method for editing both a webpage file version of a document and an image fileversion of the document online with an editing interface.BACKGROUND Sometimes a person, such as a business owner, wants to edit a document that exists only as a hard copy document. For example, a restaurant owner may want to edit a restaurant menu that has been printed on paper. In some cases, the restaurantowner may not have the restaurant menu in any electronic format. In other cases, the restaurant owner may have the restaurant menu in an electronic format, but only in an image format, such as PDF. Further, once the restaurant owner finishes editing the menu, it may still be desirable to have the edited menu in an image format, such as PDF, for purposes of printing copies of the menu. In one case, the restaurant owner may have a printer,the desired type of paper and be capable of printing the menus onto the paper with the printer. In other cases, the restaurant owner may have the electronic file with the edited menu in a flash drive. The restaurant owner may then take the flash driveto a commercial printing business to have a desired number of menus printed on a selected type and size of paper. Other types of businesses may have documents that exist only in hard copy or in an image file format. For example, an apartment owner may have a notice that is posted in common areas of apartment complexes. For example, there may be a noticethat is posted at apartment swimming pools that needs to be updated. In another example, a grocery store owner may have a flyer with a list of specials that needs to be updated weekly. A document may also exist in both a hard copy version and an online version that is viewable over the Internet. Returning to the example of the restaurant owner, there may be an online version of the menu for viewing over the Internet. Theremay also be a hard copy version of the menu that is distributed to customers in the restaurant. In some cases, both versions may be in an electronic format. For example, in some cases the online version of the menu may be in a webpage file format, suchas HTML. In some cases the hard copy version of the menu may be also maintained electronically in an image file format, such as PDF. The restaurant owner may find it helpful to be able to go to a computer and edit both the online version of the menuand the image file version of the menu simultaneously. In designing an editing program that allows a person to edit both a webpage file version of a document and an image file version of the document, there are various design considerations. For example, one design consideration is the extent to which the editing program is available on a server that the person can access from a client computer. In that case, the person may save the time and expense of purchasing, installing, andmaintaining the editing program. Another possible design consideration is the extent to which the editing program on a server allows a person to edit the documents from their client computer using simple tools--such as a simple online editor. In that case, the person may beable to do the editing themselves and save the expense of hiring a professional to edit or update the documents. Another design consideration is the extent to which an editing program allows editing of both a webpage file version of a document and an image file version of the document to be performed substantially simultaneously or concurrently.SUMMARY In some embodiments, a method includes displaying an editing interface to a client device via a network. The displayed editing interface may include at least a first portion and a second portion. The first portion may display one or morewebpage form documents for performing editing. In addition, or instead, the first portion may display one or more map documents for navigating about the one or more webpage form documents when editing. The second portion displays the webpage documentor an image document in an image file format. The editing interface accepts editing data, from the client device, for editing the webpage document and the image document. In some embodiments, the editing interface continues to be displayed until an indication is received that the client device has terminated the editing of the webpage document. In some embodiments, the method further includes accessing, from a database, form data that is in a data management file format. The form data may be updated based on the accepted editing data. The form data may be used to populate an imageform document that is in an image file format. The updated form data may be stored in the database. In some embodiments, the method further includes generating, with the populated image form document, an updated image document, the updated image document being in the image file format. Other embodiments include a system for editing a document online with an editing interface. Other embodiments include a computer-readable storage media bearing computer-executable instructions that when executed cause the computer to execute aprocess. The above summary of some embodiments is provided for the convenience of the reader and is not intended to be limiting in any way. DESCRIPTION OF THE DRAWINGS Certain embodiments of the invention may be understood by reference to the following detailed description read with reference to the accompanying drawings. FIG. 1 is a block diagram of a system and network environment in which some embodiments may be implemented. FIG. 1A is a block diagram of a system and network environment in which some embodiments may be implemented. FIG. 2 is a block diagram of a server in which some embodiments may be implemented. FIG. 3 is a detailed block diagram of a non-volatile memory from the server of FIG. 2, showing an operating system, application programs, data, and a database. FIGS. 4 and 4A is a flowchart of a method for editing documents online with an editing interface in accordance with some embodiments. FIGS. 5A and 5B are screenshots of an editing interface in accordance with some embodiments, showing a first window with a webpage form document and a second window with an image document. FIG. 6 is a screenshot of a login screen in accordance with some embodiments. FIG. 7 is screenshot of an administrative panel as seen in a client device in accordance with some embodiments, showing a list of available selections. FIG. 8A is a screenshot of first portion of an editing interface in accordance with some embodiments, showing a webpage form document for entering editing data, the webpage form document not reflecting any edits. FIG. 8B is a screenshot of a second portion of the editing interface of FIG. 8A in accordance with some embodiments, showing a webpage document, the webpage document not reflecting any edits. FIG. 8C is a screenshot of the first portion of FIG. 8A in accordance with some embodiments, showing the webpage form document of FIG. 8A, now reflecting some edits. FIG. 8D is a screenshot of the second portion of FIG. 8B in accordance with some embodiments, showing the webpage document of FIG. 8B, now reflecting some edits. FIG. 8E is a screen shot of the second portion of FIG. 8B in accordance with some embodiments, showing the automatic and substantially simultaneous or concurrent updating and display of the same edited changes in both webpage documents. FIGS. 9A-9D are screenshots of an editing interface as seen in a client device in accordance with some embodiments, showing a map document in a first window and a webpage form document in a second window. FIGS. 10A and 10B are screenshots of another editing interface in accordance with some embodiments, showing, in a first window, miniature images or document portions of a multiple-page document that allows parts of at least one or more images(pages) of the document to be deleted, and in a second window, the resulting selected pages reformatted into a single, combined, reduced-size image document. FIGS. 11A and 11B are screenshots of an editing interface in accordance with some embodiments, showing, in a first window, an Editing form that allows parts of at least one or more images (pages) of the document to be reordered, and in a secondwindow, the resulting selected pages reformatted into a single, combined, reduced-size image document. FIG. 12 is a block diagram of a computer readable storage medium bearing program instructions in accordance with some embodiments. FIG. 13 is a block diagram of a system showing a plurality of means in accordance with some embodiments.DETAILED DESCRIPTION Some embodiments include a system and a method that allow a remote user of a client device to edit both a webpage file version of a printed document and an image file version of the printed document using a simple online editor, accessiblethrough a website. In some embodiments, the webpage file version of the printed document is viewable on a website of the remote user. An image file version of the printed document is available for download and printing from the website of the remoteuser. In some further embodiments, when the remote user edits the webpage file version of the document with the online editor, both the webpage file version and the image file version of the document are updated. In some embodiments, the updated onlineversion of the document is available for viewing on the website of the remote user. In addition, the updated image file version of the document is available for download and printing from the website of the remote user. In this application, when discussing an online version of the document, reference is made to a ""webpage document."" The webpage document is in a webpage file format. A webpage file format includes all file types that may be used to create andmaintain documents for display on a webpage on a website. In general, a webpage file format allows for editing of text in the webpage document. Without limitation, in some embodiments, the term webpage file format include at least one or more of HTML(Hyper Text Markup Language), XHTML, JavaScript, Perl, PHP, CSS (Cascading Style Sheets), Ruby, Python, Cold Fusion, ASP (Active Server Pages) or FLASH. Also, in this application, reference is made to an ""image document."" An image document is in an image file format. An image file format includes all file types in which text in the document at least appears to be an image. Without limitation,in some embodiments, these image file formats include at least one or more of PDF (Portable Document Format), TIFF (Tagged Image File Format), JPEG (Joint Photographic Experts Group), BMP (Bitmap Image File), PNG (Portable Network Graphics), XPS (XMLPage Specification), EPUB (Electronic Publication), GIF, or DjVU. Some embodiments discussed herein may be used to edit and manage documents in the restaurant industry. For example, a webpage document may be an online version of a printed menu, the online menu being in a webpage file format. Further, animage document may be an image file type version of the same printed menu. That is, the viewable content of the webpage document and the image document may be the same, or at least substantially similar. Some embodiments discussed herein may be used in many applications and markets besides the restaurant industry. Some embodiments may be used in any industry or market where simple online editing is desired. Some embodiments may be used in anyindustry or market where a person has both an online version of a printed document (a ""webpage document"") and an image file version of the printed document (an ""image document""). Potential users include websites that offer real estate lots or used carsfor sale. Any market that traditionally uses brochures or other print advertising, whether or not in conjunction with a website, may use one or more embodiments. In this application, multiple references may be made to ""some embodiments."" These multiple references to ""some embodiment"" may or may not be referring to the same set of embodiments. Further, in this application and in the claims there may be multiple references to various ""circuitries."" These various circuitries may or may not be referring to the same or to different circuitries. Some of the various circuitries may be thesame circuitry or different circuitries and other of the various circuitries may overlap with other circuitries. In this application and in the claims there may be multiple references to various ""means for."" These various ""means for"" may or may not be referring to the same or to different ""means for."" Some of the various ""means for"" may be the same ""meansfor"" and other of the various ""means for"" may be referring to the same or to different ""means for."" In this application, reference may be made to a ""network,"" for example, to ""a first network,"" or to ""a second network."" In these words and phrases, network has its ordinary meaning. In particular a network may include two or more networks. That is, the word network may be used in the singular (i.e., a single network) or in the plural (i.e. at least two, three or more networks). Whether used in the singular or the plural, the word ""network"" may refer to two or more communicably connected,but different types of networks. For example, both a local area network and the Internet, if they are communicably coupled, may jointly be referred to as a ""network."" Further, as used herein, a network may, without limitation, include a local areanetwork, an intranet, a medium area network, a wide area network, the Internet, a cellular network, a satellite network, a wireless network, a wired network, a home network, a company network, or to any other type of network known by those skilled in theart. Further, in this application, communication ""via a network"" includes at least communication via one or more of a router, core router, modem, network interface, network server, cable, optical fiber, backbone, or via any other machine, device,satellite, infrastructure, or portion thereof, by which communications are routed into or through one or more networks. Those skilled in the art know that communication via a network includes communication via one or more of the above or additionalnetwork infrastructure. Referencing FIG. 1, some embodiments may be practiced in an exemplar system 101 that includes a second server 103 that includes a database 127. In some embodiments, database 127 is a relational database. In some embodiments, database 127 is anobject-oriented database. In some embodiments, database 127 is another type of database known to those of ordinary skill in the art. Although FIG. 1 shows database 127 maintained on the second server 103, in other embodiments, database 127 ismaintained on a separate database server (not shown). Further referencing FIG. 1, in some embodiments, system 101 includes a first server 102, such as a Web Server for publishing, hosting, or maintaining websites and their web pages. In some embodiments, first server 102 is in communication withsecond server 103. For example, second server 103 has a network interface 105 that is communicably coupled via network route 104A with first network 111A, which is communicably coupled via network route 104B with first server 102--through a networkinterface (not shown) of first server 102. In some embodiments, first network 111A is at least one of the Internet, an intranet, a local area network, or any combination of the above. In some embodiments, first network 111A may include a wirelessrouter (not shown) or a satellite link (not shown). Further referencing FIG. 1, in some embodiments, system 101 includes a first client device 109 and a second client device 113. In some embodiments, the first client device and the second client device may be the same device. The first andsecond client devices 109, 113 may be any of numerous types of computing devices. Although they may be personal desktop computers, either or both of the client devices may be a laptop computer, a server, a tablet PC, a smartphone, a game console, a thinclient, or any of numerous types of devices capable of computing. In some embodiments, the first client device 109 is communicably coupled with first server 102 and second server 103 via first network 111A and network routes 104A, 104B, and 104D. In some embodiments, the second client device 113 iscommunicably coupled with the second server 103 via a second network 111B and network routes 104C and 104E. In some embodiments, the second network 111B is the same as or includes first network 111A or vice versa. In some embodiments, the first network 111A includes the Internet and the second network 111B includes an intranet. In some embodiments,the first network 111A includes an intranet and the second network 111B includes the Internet. In addition, network routes 104A-104E are just examples of some of the possible routes. For example, in some embodiments, first client device 109 may accesssecond server via the second network 111B via a route (not shown) between first client device 109 and second network 111B and route 104C. In some embodiments, network routes may exist between the first client device 109 and the second client device 113. Indeed, an indirect route is shown in FIG. 1 via routes 104D, 104A, 104C, and 104E. As known to those of ordinary skill in the art, network routes may be flexible and variable. In some embodiments, system 101 includes first client device 109 being communicably coupled with a scanner 110. In some embodiments, scanner 110 is configured for scanning hard copy documents or images to create documents that are electroniccopies of the scanned documents of images. In some embodiments, scanner 110 is configured to create the electronic copies as image documents in an image file format. In some embodiments, scanner 110 is configured to communicate the created imagedocuments to first client device 109. In some embodiments, system 101 includes first client device 109 having stored in non-volatile memory (not shown) thereof, document programs 112. In some embodiments, first client device 109 is configured to execute the document programs 112for performing operations on a variety of document types. In some embodiments, these operations include at least one of creating a new document or editing an existing document, such as an existing document communicated to first client device 109 fromscanner 110. In some embodiments document programs 112 includes at least one of Adobe Acrobat or Adobe InDesign. In some embodiments, system 101 includes second client device 113 comprising a chassis 125 and a display 115, the display showing an editing interface 150, to be discussed in more detail below. Moving forward with reference to FIG. 1A, in some embodiments, system 101 includes second server 103, with database 127 and network interface 105 communicably coupled with first server 102 via router and LAN (Local Area Network) 104. The firstclient device 109 may have a human user (not shown) who is a software programmer. The second client device 125 may have a second human user (not shown) who is a business owner or other layperson. Further, in some embodiments, the first client 109 iscommunicably coupled with the first server 102 and with the second server 103 via intranet 111D and router and LAN 104. In some embodiments, the first client 109 is communicably coupled with the first server 102 and the second server 103 via theInternet 111C and router and LAN 104. Referencing FIG. 2, in some embodiments, server 103 may include network interface 105, processor 231, working memory 237, non-volatile memory interface 235, input/output device interface 233, all of which are communicably coupled by system bus229. In some embodiments, processor 231 includes some on-chip or off-chip cache memory (not shown). In some embodiments non-volatile memory interface 235 is communicably coupled with non-volatile memory 239. Input/output device interface 233 iscommunicably coupled with input/output devices 241. In some embodiments, input/output devices 241 may be configured to accept commands that cause server 103, or components thereof, to execute part or all of a process. In some embodiments, server 103may be configured to execute part or all of a process without receiving commands via input/output devices 241. In some embodiments, server 103 is communicably coupled with a remote device 247 via network interface 105 and network 211. In someembodiments, network 211 is a local area network or a Wi-Fi network. In some embodiments, network 211 is the Internet. Referencing FIG. 3, in some embodiments, non-volatile memory 239 of server 103 of FIGS. 1-2 includes at least one hard drive. In some embodiments non-volatile memory 239 includes at least a flash memory. In some embodiments, non-volatilememory 239 includes other non-volatile memory known to those of ordinary skill in the art. In some embodiments, non-volatile memory 239 is the computer-readable storage medium (Item 1210 of FIG. 12) bearing non-volatile program instructions that areexecutable by server 103. In some embodiments, non-volatile memory 239 is a computer-readable storage medium that bears non-volatile computer-executable instructions that when executed, cause second server 103 to perform at least Process Blocks 410 and414-420 of method 400 of FIGS. 4 and 4A. In some embodiments, includes an operating system 349. In some embodiments, non-volatile memory 239 includes application programs 343. In some embodiments, non-volatile memory 239 includes data 351, including various user data. In someembodiments, non-volatile memory 239 includes database data 365. The above are stored on non-volatile memory as non-volatile instructions and data. In many operations, at least a portion of operating system 349, application programs 343, data 351, and/or database data 345 is copied to working memory 237 of FIG. 2 for access thereto by processor 231 via system bus 229. Thus, circuitriesand/or means for performing many operations include at least one or more of non-volatile memory 239 (and stored data 351, 345 and instructions 343,349), non-volatile memory interface 235, working memory 237, system bus 229 and the processor 231. In someembodiments, the above are at least some of the circuitries or means for performing at least the portion of method 400 that is described with reference to Process Blocks 410 and 414-420 of FIGS. 4 and 4A. Further referencing FIG. 3, in some embodiments, non-volatile memory 239 includes login data 364 and a network authorization/authentication program 367. In some embodiments, login data 364 includes encrypted data and networkauthorization/authentication program 367 includes encryption and decryption capabilities. In some embodiments, network authorization/authentication program 367 executes in conjunction with one or more network/Internet connections protocols 377. Thevarious network and Internet protocols are known to those skilled in the art and, depending on the particular implementation, may include one or more of Internet Protocol (IP) and Transmission Control Protocol (TCP). In some embodiments, non-volatile memory 239 includes a database management and synchronization program 375 and database data 345, including form data 365. In some embodiments, database 127 of FIG. 1 is a Structured Query Language (SQL) typedatabase, such MySQL. In particular embodiments, database management and synchronization program 375 includes MySQL or SQL. In some embodiments, database 127 of FIG. 1 is an object-oriented database. In particular embodiments, database management andsynchronization program 375 includes OQL (Object Query Language). The database management and synchronization program 375 would also include the capability to synchronize with other similar types of databases, either SQL or OQL, and be accessible via a Local Area Network (LAN), wired or wireless networks, orvia the Internet. Most POS (Point-of-Sale) systems utilize an SQL-type database. Using the restaurant application example, a user would be able to simultaneously update or synchronize not only a restaurant's hardcopy menu and online menu, as previouslydescribed in this document, but immediately after this, also update the menu data residing in the restaurant's POS (Point Of Sale) system. This will likely require cross-licensing agreements with the various POS system manufacturers to enablesynchronous communication with their customer's POS databases, along with suitable interface software to allow communication and/or synchronization between both databases. When the command ""Synchronize POS"" is invoked, the form data 365 is synchronizedwith the external POS database that is stored in a separate database on a separate database server (not shown). Alternatively, the licensed POS system manufacturer could include this capability in their POS system software. In some embodiments, non-volatile memory includes a web document editor 369. In particular embodiments, web document editor 369 includes an online editor that is configured to be used, for example, by a human user of second client device 113accessing second server 103. In some embodiments, non-volatile memory includes documents in a webpage file format 353 (also, ""webpage documents 353""), webpage form documents 357 for entering editing data for editing documents (e.g., a webpage document353, image document 355), map documents 359 for navigating about one or more webpage form documents 357 when performing editing, and webpage art 361. In some embodiments, a user or client device enters editing data into a webpage form document and thenboth a webpage document and an image document are updated at least in part with the editing data In some embodiments, at least the documents in the webpage file format 353 may be edited with web document editor 369. For example, if webpage document is a document in HTML format, it may be edited with web document editor 369, where webdocument editor 369 includes an HTML editor. Although FIG. 3 illustrates application programs 343 with certain labels and categories, in some embodiments, the various application programs may have different names or categories. For example, a single application program may perform thefunctions of webpage document editor 369 and document display program 373. Or, conversely, three or more application programs may perform the functions of at least webpage editor 369 and document display program 373. The labels and categories used aremerely examples provided for purposes of illustration and to explain the concepts and are not intended to be limiting. In some embodiments, a user of first client device 109 or second client device 113 may access web document editor 369 and one or more webpage form documents 357 to edit one or more documents (e.g., webpage document 353, image document 355). Insome embodiments, a user may further access map documents 359 to navigate about the one or more webpage form documents 357 when operating web document editor 369 to edit one or more documents (e.g., a webpage document in a webpage file format 353, imagedocument in an image file format 355). In some embodiments, webpage art 361, includes art that functions as a map document 359. For example, webpage art 361 may include a picture of an illustrated portion of a document in a webpage file format 353. Then, clicking with a mouse (one of input/output devices 241 of FIG. 2) on the picture may cause server 103 to allow editing of the illustrated portion of the document in the webpage format 353. In this application, when discussing map documents 359,reference is also being made to web art 361 configured to function as a map document. In some embodiments, webpage art 361 is stored in non-volatile memory 239 in an image file format, but is capable of being embedded in a webpage document 353 either asordinary art or as an art hyperlink. In some embodiments, non-volatile memory 239 includes image document editor utility 371 for editing at least one of documents in image file format 355 (also, ""image documents 355""), and image form documents 363. In some embodiments, imagedocument editor/utility 371 may be capable of creating, updating or editing form data 365. In some embodiments, form data 365 is created from one or more image form documents 363. In some embodiments, the image document editor/utility includes PDFTK(PDF Took Kit), an open source product. In some embodiments, non-volatile memory 239 includes a document display program 373. In particular embodiments, document display program 373 may cause server 103 to display at least one of documents in a webpage file format 353, webpage formdocuments 357 or map documents 359 in display 115 of second client device 113. In particular embodiments, document display program 375 may cause server 103 to display an editing interface (discussed below) on the display 115 of second client device 113. Referencing FIG. 4, some embodiments include a method 400 of editing documents online. In some embodiments, method 400 is implemented with one or more of the circuitries and means discussed with reference to FIGS. 1-3. Although FIG. 4 displaysprocess blocks in a given sequence, the sequence is for ease of explanation and convenience. The sequence of the process blocks in FIG. 4 is not limiting. For example, in some embodiments, activities in two process blocks may be reversed or theactivities may be performed simultaneously or concurrently (e.g., Process Blocks 416 and 418). Unless the context or the discussion indicates otherwise, the process blocks are not required to be performed either simultaneously or in any particularorder. Referencing process block 402, in some embodiments, method 400 optionally includes creating an image document in an image file format 355 and a webpage document in a webpage file format 353. As discussed above, in some embodiments, a webpagedocument and an image document are merely different versions of the same printed document. Therefore, their viewable content is at least substantially similar. In some embodiments, means and circuitry for creating the image document 353 include at least the first client device 109 and non-volatile executable document programs 112 that are stored in non-volatile memory (not shown) of the first clientdevice 109. In some embodiments, the executable document programs 112 include Adobe InDesign. The image document 353 is created with the first client device 109 and the InDesign program. The image document 353 is then saved in non-volatile memory offirst client device 109 in an image file format, such as a PDF. In some embodiments, the image document 353 is formed by obtaining an image of a hard copy document. In some embodiments, means or circuitry for obtaining the image of the hard copy document include at least scanner 110 and the first clientdevice 109 of FIG. 1. In some embodiments, image document 353 is obtained by scanning the hard copy document with scanner 110 of FIG. 1. Scanner 110 creates the image document in an image file format 353 and communicates the image document to firstclient device 109. In some embodiments, the image file format is Adobe PDF. For example, if the hard copy document is a restaurant menu, then with scanner 110, an electronic version of the restaurant menu is created in an image file format, such as PDF. The PDFmenu is communicated by scanner 110 to client device 109. In this example, the PDF menu is the image document 355. In some embodiments, artwork is scanned with, for example, scanner 110 to form webpage art 361 of FIG. 3. In some embodiments, the webpage art 361 is capable of being embedded in a webpage document, such as one of documents in a webpage format353 of FIG. 3. In some embodiments, the user of client device 109 is a designer. In some embodiments, circuitries and means for creating documents in a webpage format 353 include at least client device 109 and document programs 112. With the client device109 and the document programs 112, the designer creates a webpage document in a webpage file format. The webpage document 353 may be based on the image document because, in some embodiments, the webpage document and the image document are merelydifferent versions of the same printed or hardcopy document. In some embodiments, document programs 112 includes a program for creating a document in a webpage format 353 from a document in an image file format 355. For example, document programs 112 may include a program for creating an HTML documentfrom a PDF document. In these embodiments, the designer may create the webpage document 353 directly from the image document 355. In some restaurant menu embodiments, the webpage document is an electronic version of the menu in a webpage format, such as HTML. In some embodiments, the webpage document and the image document have at least substantially similar visualcontent. Referencing Process Block 404, in some embodiments, the method 400 optionally includes generating an image form document 363, for editing or updating the image document 355. The image form document 363 is in an image file format. In someembodiments, circuitries and means for generating the image form document 363 include at least the first client device 109 and the document programs 112 stored in memory of the first client device 109. In some embodiments, the image form document isgenerated by adding form fields into the image document with the first client device 109 and the document programs 112. In some restaurant menu embodiments, the image form document is a PDF master document that is created by inserting form fields into the PDF restaurant menu with the first client device 109 and Adobe Acrobat of document programs 112. In some embodiments, Process Block 404 further includes transmitting the one or more image form documents 363, image document 355 and/or webpage art 361 to a server, such as second server 103 of FIG. 1. In some embodiments, circuitries andmeans for transmitting the one or more image form documents 363, image document 355 and/or webpage art 361 to second server 103 include at least the first client device 109 transmitting via the first network 111A and routes 104D, 104A. Second server 103includes means and circuitries for accepting and storing the transmitted documents and images. In some embodiments, second server 103 receives the one or more image form documents 363, image document 355 and/or webpage art 361 with network interface 105as input data for subsequent procedures, discussed below. In some embodiments, processor 231 of second server 103 causes the one or more image form documents 363, image document 355 and/or webpage art 361 to be stored in non-volatile memory 239. Referencing Process Block 406 of FIG. 4, in some embodiments, method 400 optionally includes generating one or more webpage form documents 357 for entering editing data for editing one or more documents (e.g., webpage document 353, imagedocument 355). In some embodiments, both a webpage document 353 and an image document 355 are updated or edited with editing data that is entered into a webpage form document 357. In some embodiments, method 400 optionally includes generating one ormore map documents 359 for navigating about the one or more webpage form documents 357 when editing a webpage document 353 and an image document 355. In some embodiments, means and circuitries for generating at least one of a webpage form document 357or a map document 359 include at least the client device 109 and document programs 112. In some embodiments, the webpage form documents 357 are generated as HTML input forms. In some embodiments, map documents 359 are generated as HTML menu maps. Insome embodiments, map documents 359 includes hyperlinks that can be ""clicked on"" to navigate about one or more webpage form documents 357. In some embodiments, map documents 359 includes hyperlinked webpage art 361 that can be ""clicked on"" to navigateabout a webpage form document 357. In some embodiments, Process Block 406 further includes transmitting the one or more webpage form documents 357, the one or more map documents 359 and/or webpage art 361 to a server, such as second server 103 of FIG. 1. In some embodiments,means and circuitries for transmitting the one or more webpage form documents 357, the one or more map documents 359 and/or webpage art 361 to second server 103 include at least first client device 109 via the first network 111A and routes 104D, 104A. Second server 103 includes means and circuitries for accepting and storing the transmitted documents and images. In some embodiments, second server 103 receives the one or more webpage form documents 357, the one or more map documents 359 and/or webpageart 361 with network interface 105 as input data for subsequent procedures, discussed below. In some embodiments, processor 231 of second server 103 causes the one or more webpage form documents 357, the one or more map documents 359 and/or webpage art361 to be stored in non-volatile memory 239. Referencing Process Block 408 of FIG. 4, in some embodiments, method 400 optionally includes displaying the webpage document 353 on a webpage and providing access, for example by a hyperlink, from the webpage to the image document 355. Thewebpage document may be viewed with a web browser and the image document may be downloaded and printed. In some embodiments, circuitries and means for displaying webpage document 353 on the webpage include at least first server 102 of FIG. 1 which maybe a web server which hosts websites. First server 102 may also provide access from the webpage to the image document 355. In some embodiments, first server 102 may be the same physical server as second server 103. In some embodiments, the webpage document 353 and/or the image document 355 are transmitted from second server 103 via first network 111A to firstserver 102 for web hosting services. In some embodiments, the webpage document 353 and/or image document 355 are transmitted from first client device 109 via first network 111A to first server 102 for web hosting services. Referencing Process Block 410 of FIG. 4, in some embodiments, method 400 includes generating form data 365 for populating the image form document 363 and storing form data 365 in a database, such as database 127 of the second server 103 of FIG.1. In some embodiments, the form data 365 is stored in a separate database on a separate database server (not shown). In some embodiments, circuitries and means for generating form data 365 include at least image document editor/utility 371, which generates form data 365 from image form document 363. In some embodiments, circuitries and means for storing formdata 365 as database data 345 include at least at least processor 231 and database management and synchronization program 375 which store form data 365 in non-volatile memory 239 of second server 103 of FIG. 3. In some embodiments, form data 365 may bestored or retrieved from a database with structured query language (SQL). In some embodiments, form data 365 may be stored or retrieved in virtually any known database query language. In some embodiments, form data 365 is Adobe Forms Data Format. In these embodiments, means or circuitry for generating form data 365 includes at least the image document editor/utility 371 which is PDF Tool Kit (PDFTK), an open source,cross-platform tool. In some embodiments, in addition to the FDF data, a flat or printable PDF document is created with PDFTK. In some further embodiments, with PDFTK, the FDF data is cleansed, removing all non-printable characters, before storing theFDF data in database 127. In some embodiments, circuitries and means for generating the form data 365 include at least processor 231 and image document editor/utility 371, which generate the form data 365 in a data management file format. The data management file formatcan be virtually any known database data file type. Without limitation, in some embodiments, the data management file format is at least one of FDF (Forms Data Format), XML (Extensible Markup Language), CSV (Comma Separated Values), TSV (Tab SeparatedValues), Text, or JSON (JavaScript Object Notation). Referencing FIGS. 4 and 4A, as indicated at Process Blocks 411A, 411B, in some embodiments, method 400 is continued from FIG. 4 to FIG. 4A. Referencing Process Block 412 of FIG. 4A, in some embodiments, method 400 may optionally include accepting and authenticating login data 364 (FIG. 3). In some embodiments, login data 364 is accepted and authenticated via a second network 111Bfrom a second client device 113, the login data 364 corresponding to a human user (not shown) of second client device 113. In some embodiments, the second client device 113 is the same device as the first client device 109 and both the first network111A and the second network 111B are the Internet. In some embodiments, the second network 111B is the same as, is part of, or includes first network 111A or vice versa. In some embodiments, second network 111B is an intranet and first network 111A isthe Internet. In some embodiments, second network 111B is the Internet and first network 111A is an intranet. In some embodiments, circuitries and means for accepting, authenticating and storing login data 364 include second server 103 generally, and in particular, at least processor 231, network interface 105, non-volatile memory 239 and networkauthorization/authentication 367. In some embodiments, the login data 364 is authenticated by processor 231 and network authorization/authentication 367. In some embodiments, login data 364 is encrypted and network authorization/authentication 367decrypts the login data 364 and/or may cause the login data 364 to be stored in encrypted form as login data 364 of data 351 of non-volatile memory 239. Referencing Process Block 414 of FIG. 4A and further referencing FIG. 1, in some embodiments, method 400 includes, displaying an editing interface via a network to a client device. In some embodiments, a server presents the editing interface toa client via a network in a single browser window. The single browser window may display, as requested by a client device, at least one of one or more form documents, one or more map documents, web art, a webpage document and/or an image document. Inthese embodiments, either the documents or the browser (now shown) include controls, buttons, or hyperlinks for obtaining the desired document or content for editing in the editing interface. The sequence and content in which content that is displayedto the client device is dependent upon the programming of the particular server and the commands/requests issued by the client device to the server. In some embodiments, the network interface displays: 1) one or more webpage form documents, one or more map documents and/or web art; and 2) an image document, showing the most recent version of the text and graphics of the webpage document orimage document. The above may be displayed to the client device in a number of ways dependent on the programming of the server and the commands/requests issued by the client device to the server. In some embodiments, method 400 includes, with second server 103, displaying an editing interface 150 to a second client device 113 via a second network 111B, the displayed editing interface 150 having a first portion 152 and a second portion154. The editing interface being displayed, for example, on display 115 of second client device 113. In some embodiments, the first portion 152 may display at least one of one of one or more webpage form documents 157, one or more map documents 159 for navigating about the one or more webpage form documents or some other displayed document,and/or webpage art 161. In some embodiments, the second portion 154 may display an image document 155, to show the text and graphics being edited. In some embodiments, second portion 154 may display a webpage document 153 for editing. In some embodiments, the secondportion may display a webpage form document 157 or some other document. In some embodiments, the first portion 152 and the second portion 154 may display other content. For example, in some embodiments, the first portion 152 may display a map document and the second portion may display a webpage form document. Asa further example, in some embodiments, the first portion 152 may display a map document and the second portion may display an image document 155 or a perhaps a webpage document 153. Other combinations or content are possible. In some embodiments, theparticular content displayed in the first portion 152 and second portion 154 is dependent upon the programming of the server and the commands/requests made by the client device as the client device proceeds with viewing and editing. The editing interface 150 is configured to accept editing data, for editing the webpage document 153 and the image document 155, from the second client device 113. In some embodiments, only one of the first portion 152 or the second portion 154of the editing interface 150 accepts editing data (e.g., editing data 862B, 866B, 868B of FIG. 8C). In some embodiments, circuitry or means for displaying an editing interface includes at least second server 103. More particularly, circuitry or means for displaying an editing interface include at least processor 231, network interface 105,and application programs 343 that may include document display program 373 and network/Internet connections/protocols 377. In some embodiments, the displaying of the editing interface on the client device is at least partly responsive to the acceptingand authentication of login data (367 and 364, FIG. 3 and Process Block 410, FIG. 4A). In some embodiments, the displaying of the editing interface 150 to the second client device 113 is at least partly responsive to a command entered by a human user(not shown) on input/output devices 241 of the second server 103. Moving forward with reference to FIG. 7, in some embodiments, a user (not shown) of the second client device 113 accesses second server 103 via an administrative panel (794 of FIG. 7) that is displayed on the second client device 113 by secondserver 103. On the administrative panel 794, a user may select, for example, a menu selection 796, indicating a desire to edit a menu. Or, a user may select, as a further example, a takeout menu selection 797 indicating a desire to edit a takeout menu. Moving forward with reference to FIG. 6, in some embodiments, to proceed further, the user of the second client device 113 may be required to enter login data 664 on a login page 691 displayed on the second client device 113. Further referencing FIGS. 1 and 4A, in some embodiments, the first portion 152 and the second portion 154 of the network interface 150 are respectively, first and second windows, displayed side-by-side for simultaneous viewing. Or the windowsmay be layered or tiled allowing a user to use a user input device (not shown) of second client device 113, to switch between the first and second windows. In some embodiments, the first portion 152 and the second portion 154 of the editing interfaceare, respectively, first and second frames of a webpage. The first and the second portions 152, 154, may be displayed in a variety of different configurations. Further, in some embodiments, there may not be a first and second portion 152, 154, and thenetwork interface may be displayed in a single window. Further referencing Process Block 414 of FIG. 4A, in some embodiments, method 400 includes accepting editing data submitted to the editing interface, for example, editing interface 150 of FIG. 1. In some embodiments, the editing data issubmitted by a client device to the editing interface by entering the editing data into a displayed webpage form document 357 and then activating an ""update"" button (e.g., update button 876, FIG. 8C). In some embodiments, circuitries and means foraccepting of the editing data includes second server 103 generally, and in particular at least network interface 150, the processor 231, the webpage document editor 369, the document display program 373 of the second server 103, and network/Internetconnections/protocols 377. The webpage document editor may be responsive to commands entered in the editing interface by a user (not shown) of the second client device 113. For example, in some embodiments, a user of the second client device 113 entersedits in webpage form document 357, displayed by document display program 373, and enters an ""update"" command to send the edits (i.e., the editing data) to second server 103. In some embodiments, second server 103 receives and accepts the edits at leastwith network interface 150, processor 231, and network/Internet connections/protocols 377. In some embodiments, webpage document editor 369 and image document editor/utility 371 also accept the editing data for making edits. Referencing Process Block 416 of FIG. 4A, in some embodiments, with the accepted edits, webpage document 153, 353 is updated. In some embodiments, webpage document 153, 353 is updated with the webpage form document 357 and with the editing dataentered into the webpage form document 357. In some embodiments, circuitry and means for updating (i.e., editing) webpage document 353 include at least second server 103 in general, and in particular at least processor 231 and webpage document editor369. In some embodiments, the webpage document 153 is an HTML document, webpage form document 357 is one or more HTML input forms and the webpage document editor 369 is an HTML editor that is responsive to commands entered into the editing interface150 via the second client device 113. For example, client device 113 may enter editing data (e.g., editing data 862B, 866B, 868B of FIG. 8C) into an HTML input form (an embodiment of a webpage form document 357) with the HTML or online editor and thenenter an update command. Second server then updates the HTML document with the HTML input form and the entered editing data. Means and circuitry for updating the HTML document include second server 103 in general, and in particular at least processor231, and HTML or online editor. Optionally, in some embodiments, updated webpage document 153, 353 is displayed with the network interface, for example, network interface 150. Circuitry and means for displaying the updated webpage document 153, 353 in the network interfaceinclude second server 103, in particular at least processor 231, webpage document editor 369 and document display program 373. In some embodiments, second server 103, is responsive to commands/requests from first client device 109 in displaying or notdisplaying updated webpage document 153, 353 in the network interface. Referencing Process Block 418, in some embodiments, method 400 includes retrieving form data 365 from a database, for example, database 127, and updating the form data 365 based on the accepted editing data (e.g., edited prices 862A of FIG. 8C). Image form document 363 is populated with the updated form data 365 to create an updated image document 355. The updated form data 365 is stored in a database, for example, database 127. In some embodiments, the circuitry and means for the updating ofthe form data 365, the populating of image form document 3363, and the updating of image document 155, 355 include at least, for example, processor 231 and image document utility 371 and processor 231. In some embodiments, the circuitry and means forretrieving form data 365 from and storing updated form data 365 in a database includes at least processor 231, database management and synchronization program 375, and non-volatile memory 239. In some embodiments, image document 355 is a PDF document. To update the PDF document, the form data 365, which may be FDF or XML data, is retrieved from a database, for example, database 127. FDF data is updated with PDFTK. The image formdocument 355, a master PDF, is populated with the updated FDF data with, for example, PDFTK or another program for manipulating PDF files and processor 231. In some embodiments, the updating of the image document 155, 355 as described with reference to Process Block 418 is performed substantially simultaneously or concurrently with the updating of the webpage document 153, 353 as described withreference to Process Block 416. The updating of the webpage document 153, 353 and the updating of the image document 155, 355 are both based on the same accepted editing data. In some embodiments, both sets of updates are performed substantiallysimultaneously or concurrently each time a user enters new editing data in editing interface 150 and indicates an update command by clicking on an ""update"" button (e.g., button 876 of FIG. 8C) in the editing interface (interface 850B of FIG. 8C). Thus,a user of client device 113 may update both image document 355 and webpage document 155 with the same editing data using webpage document editor 369 (which in some embodiments is a simple editor). As noted above, in some embodiments image document 355and webpage document 353 are merely different versions of the same hardcopy or printed document. In some embodiments, a user of second client device 113 may view the updated webpage document or updated image document in the editing interface 150 by clicking on the ""reload"" button or icon (not shown) on a browser window. Referencing Process Block 420, in some embodiments, method 400 includes continuing to display the editing interface 150 until an indication is received that the second client device 113 has terminated editing. In some embodiments, the circuitryand means for continuing to display the editing interface include at least second server 103, which continues to display the editing interface 150 with, for example, the document display program 373 and network/Internet connections/protocols 377, untilan indication is received by second server 103 that the second client device 113 has terminated editing the webpage document 153, 353. In some embodiments, the indication may be a termination of a session noted by, for example, processor 103 andnetwork/Internet connections/protocols 377. In some embodiments, the indication may be the receipt and processing of a logout signal by, for example, network authorization/authentication 367 and processor 231 of second server 103. Referencing Process Block 422, in some embodiments, method 400 optionally includes displaying the updated webpage document 353 on a webpage and providing access from the webpage to the updated image document 355. In some embodiments, thecircuitry or means for the displaying includes at least first server 102. In some embodiments, after the updating of the webpage document 153, 353 and the image document 155, 355, these documents are transmitted by second server 103 to first server 102. Referencing FIG. 5, an embodiment of an editing interface 550 is shown. Editing interface 550 includes a first portion and a second portion that are respectively, first window 552 and second window 554. The windows 552, 554 are alignedside-by-side for simultaneous viewing in two web browser windows of a client device, such as second client device 113. Each of windows 552, 554, has its own scroll bar 553A, 553B. In some embodiments, these windows 552, 554, are first and second framesof a browser (not shown) window. The first window 552 displays a webpage editing form document 557, in this case for a restaurant menu. Webpage editing form document 557 includes editable prices 562, editable descriptions 564 of various dishes, editable names 566 of menuitems, and editable legends 568. The second window 554 displays an image document 553, in this case a PDF version of a menu. Referencing FIGS. 8A-8E, an embodiment of an editing interface 850A (no edits shown), 850B (showing processed edits) is shown. Referencing FIG. 8A, a first window 852A of editing interface 850A is shown with no edits. First window 852A displays a webpage form document 853A, in this case, an HTML input form. The HTML input form 853A, an editable form document of amenu, has unedited prices 862A, editable descriptions 864A, editable names 866A, and editable legends 868A. Referencing FIG. 8B, the second window 854A of editing interface 850A of FIG. 8A is shown. Second window 854A displays web document 853A--the document to be edited--but without any edits. In another embodiment, second window 854A could displayan image document. Web document 853A is an HTML version of the menu of FIG. 8A. Web document 853A has unedited prices 862A and a link 880 (e.g., an HTML hyperlink) to an image document, in this case a PDF version of the menu (not shown). Referencing FIG. 8C, the editing interface 850B, first window 852B, and web form document 857B are the same as editing interface 850A, first window 852A, and web form document 857A of FIG. 8A, except that prices, a name, and a legend have beenedited: edited prices 862B. In some embodiments, editing interface 850B is shown on a client device, for example second client device 113 of FIG. 1. In some embodiments, the displaying is being performed by a server, for example second server 103 ofFIG. 1. Web form document 857B has an ""update"" icon or button 876 that can be ""clicked-on"", for example with a mouse (not shown), to signal the server to update the webpage document associated with the editing interface 850B. Server may then accept theediting data (e.g., changed prices 862B) and update both a webpage document 853A and a corresponding image document as is discussed above with reference to Process Blocks 416, 418 of FIG. 4A. Referencing FIG. 8D, the editing interface 850B, second window 854B, and webpage document 853B are the same as editing interface 850A, second window 854A, and webpage document 853A, except that edited prices 862B have been entered and thewebpage document 853B has been updated. Perhaps substantially simultaneously or concurrently, the corresponding image document (PDF version of the menu) that is accessible via link 880 has also been updated. Referencing FIG. 8E, second window 854C and image document 853C, illustrates that editing and updating via editing interface 850B results in the automatic and substantially simultaneous or concurrent updating and display of the same editedchanges in both the webpage document 853B and the image document 853C. As used herein, substantially concurrently refers to a window of time within which a computer would be expected to complete two update operations that are running concurrently. Insome embodiments, substantially concurrently refers to a window that is no greater than 15 seconds. However, on a busy server, the window of time may be greater. In some embodiments, substantially concurrently refers to a window that is no greater than1 second. In some embodiments, when the update operations are in response to an update command issued in response to clicking on update button 876, the updating of the webpage document (e.g., 353) and the corresponding image document (e.g., 355) isperformed concurrently by processor 231 of second server 103. In some embodiments, processor 231 comprises two or more processors or processor cores. Thus, in some embodiments, at least a portion of the update operations may be performed in parallelrather than concurrently. Although the embodiments of FIGS. 8A-8E show first and second windows 852, 854 that are viewable simultaneously, in alternative embodiments first and second windows are windows that do not share a browser page and may be viewable in separatebrowser windows that must be individually selected for viewing (e.g., by a mouse click to select a window for viewing). Other embodiments are also possible. Referencing FIG. 9A, an embodiment of an editing interface 950 includes first window and 552 and second window 554. First window displays a map document 559 and the second window displays webpage editing form document 557. In this embodiment,the webpage editing form document 557 depicts a menu. The map document 559 includes document portion link 570 for moving to a desired portion of webpage editing form document 557. Referencing FIG. 9B, an embodiment of an editing interface 950 includes first window 552 and second window 554. First window 552 displays a map document 559 and the second window 554 displays an image document 555. In this embodiment, theimage document 555 is an image document, a single page of the multiple-page menu document. Map document 559 that allows access to selected pages of the menu document, via document portion link 570. Second window 554 displays the image document 555 ofthe menu document. Referencing FIG. 10, an embodiment of an editing interface 1050 includes first window 552 and second window 554. First window 552 includes editing form 1057. Editing form 1057 displays miniaturized removable document portions 772, which allowsa user of a client device, in which editing interface 1050 is displayed, to delete portions of an image document. In this case, the delete operation is performed by selecting (e.g., by clicking with a mouse) a delete button 774 of Editing form 1057. Editing form 1057 also includes a file upload form 776 which allows a user of the client device, for example second device 113 of FIG. 1, to locate and select a file to upload and incorporate into Editing form 1057 and the associated image document. Theupload operation is performed by selecting the ""upload"" button 778 (e.g., by clicking on button 778 with a mouse). The second window 554 displays image document 1053, the finished results of Selecting/Uploading/Rebuilding functions of the takeout menu(See FIGS. 10 & 11), where all selected menu pages are assembled and combined and automatically reduced in size to fit a pre-determined and selected page size that is suitable for printing in a foldable takeout brochure format. Referencing FIG. 11, an embodiment of an editing interface 1150 includes a first window 552 and a second window 554. The first window 552 includes Editing form 1157. Editing form 1157 includes miniaturized document portions (e.g., documentportion 1172) and input fields (e.g., input fields 1174A, 1174B). A user of a client device in which editing interface 1150 is displayed may enter a numerical rank to arrange the order in which the document portions are displayed in, for example, imagedocument 1053 of the second window 554. As shown, four document portions are shown with ranks 1 through 4 and two document portions are shown with no rank (so will not be displayed). Referencing FIG. 12, a system 1200 includes a computer readable storage medium 1210 bearing non-volatile computer-executable program instructions that when executed by a computing device, cause the device to perform a process 1220. In someembodiments, the computer readable storage medium may be based on magnetic memory, an optical memory storage device or other memory technology. In some embodiments, the computer readable storage medium 1200 is a portion of a non-volatile memory, forexample memory 239 of FIG. 3. In some embodiments, the computer readable storage medium is a computer hard drive, a redundant array of independent disks (RAID), a compact disk (CD), a DVD, a Blu-ray disk, a thumb drive, a flash memory, or other computerreadable storage medium. In some embodiments, the process 1220 includes displaying an editing interface 150 to a second client device 113, via a second network 111B, the displayed editing interface 150 including at least a first portion 152 and a second portion 154. The first portion 152 may display at least one or more webpage form documents 357 for accepting editing data for editing documents, or one or more map documents 359 for navigating about the one or more webpage form documents 357 when performing edits. In some embodiments, the second portion 154 may display one of the webpage document 153 in a webpage file format or an image document 155 in an image format. The editing interface 150 may accept editing data (e.g., edited prices 862B of FIG. 8C), fromthe second client device 113, for editing the webpage document 153, 353 and the image document 355. In some further embodiments, the process 1220 includes, based on the accepted editing data, updating the webpage document 353. In some further embodiments, the process 1220 includes accessing, from a database 127, form data 365 that is in a data management file format, updating the form data 365 based on the accepted editing data, populating an image form document 363with the updated form data 365, the image form document 363 being in the image file format, and storing the updated form data 365 in the database 127. In some further embodiments, the process 1220 includes generating, with the populated image form document 363, an updated image document 355. Thus, in some embodiments, both the webpage document 353 and the image document 355 are updated baseddirectly, or indirectly, on the same editing data. In some further embodiments, the process includes continuing to display the editing interface 150 until an indication is received that the second client device 113 has terminated the editing of the webpage document. In some further embodiments, the process 1220 includes displaying, with the first server 102, the updated webpage document 353 on a webpage and providing access from the webpage to the updated image document 355. In some further embodiments, the process 1220 optionally includes transmitting the updated webpage document 353 and image document 355 to web server 102 for display of the webpage document 353 on a webpage and for providing access to the imagedocument 355 from the web page. In some further embodiments, the process 1220 optionally includes accepting a webpage document 353, an image document 355, webpage form documents 357, map documents 359, and image form documents 363 and generating form data 365 from the imageform documents 363. The form data 365 is generated in a data management file format. The form data 365 is stored in a database 127. Referencing FIG. 13, in some embodiments, a system 1310 for editing documents online includes at least one of means 1330, means 1340, means 1350, and means 1360. In some embodiments, system 1310 optionally also includes means 1320 and/or means1370. Although the means are stated as separate means, these are not necessarily separate means and in some embodiments one or more of means 1320, means 1330, means 1340, means 1350, means 1360, and means 1370 are the same means or share commonstructures or functions or otherwise partially or totally overlap. In some embodiments, one or more of means 1320, means 1330, means 1340, means 1350, means 1360, and means 1370 may be different means. Means 1320 includes means for displaying a webpage document, in a webpage format, on a webpage and providing access from the webpage to an image document in an image file format. Means 1330 includes means for displaying to a second client device, via a second network, an editing interface that includes at least a first portion and a second portion, the first portion displaying at least one of one or more webpage formdocuments for accepting editing data for editing one or more documents, or one or more map documents for navigating about the one or more webpage form documents when performing editing, the second portion displaying one of a webpage document or an imagedocument in an image file format, the editing interface accepting editing data for editing the webpage document. Means 1340 includes means for updating the webpage document based on the accepted editing data and for continuing to display the editing interface until an indication is received that the second client device has terminated the editing of thewebpage document. Means 1350 includes means for accessing, from a database, stored form data that is in a data management file format, for updating the form data based on the accepted editing data, for populating an image form document with the form data, theimage form document being in an image file format, and for storing the updated form data in the database. Means 1360 includes means for generating, with the populated image form document, an updated image document, the updated image document being in an image file format. Means 1370 includes means for displaying the updated webpage document on a webpage and providing access from the webpage to the updated image document. The foregoing embodiments and advantages are merely exemplary and are not to be construed as limiting the present invention. Those skilled in the art can appreciate from the foregoing description that the techniques of the embodiments of theinvention can be implemented in a variety of forms. For example, the configuration of servers, client devices, and networks may be modified in numerous ways from that displayed and discussed, without departing from the principles discussed herein. Therefore, while the embodiments of this invention have been described in connection with particular examples thereof, the true scope of the embodiments of the invention should not be so limited since other modifications will become apparent to theskilled practitioner upon a study of the drawings, the specification, and the following claims."
6|http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=53&p=2&f=G&l=50&d=PTXT&S1=(python.CLTX.+or+python.DCTX.)&OS=ACLM/python&RS=ACLM/python|Garbage collection implemented in hardware|A computing device is provided and includes a memory module, a sweep engine, a root snapshot module, and a trace engine. The memory module has a memory implemented as at least one hardware circuit. The memory module uses a dual-ported memory configuration. The sweep engine includes a stack pointer. The sweep engine is configured to send a garbage collection signal if the stack pointer falls below a specified level. The sweep engine is in communication with the memory module to reclaim memory. The root snapshot engine is configured to take a snapshot of roots from at least one mutator if the garbage collection signal is received from the sweep engine. The trace engine receives roots from the root snapshot engine and is in communication with the memory module to receive data.|"1. A computing device, comprising: a memory module having a memory implemented as at least one hardware circuit, the memory module using a dual-ported memory configuration; a sweep engine that includes a stack pointer, the sweep engine configured to send a garbage collection signal if the stack pointer falls below a specified level, the sweep engine in communication with the memory module to reclaim memory; a root snapshotengine configured to take a snapshot of roots from at least one mutator if the garbage collection signal is received from the sweep engine; a trace engine that receives roots from the root snapshot engine, the trace engine in communication with thememory module to receive data; and wherein the root snapshot engine includes a shadow register and a mutator register, wherein a value of the mutator register is copied into the shadow register, the root snapshot engine further including a mutator stackand a multiplexer, wherein both the shadow register and the mutator stack are sent through the multiplexer. 2. The computing device of claim 1, wherein the sweep engine is in communication with the memory module by an address to free port. 3. The computing device of claim 1, wherein a pointer that is read from the mutator stack emerges from the multiplexer as the snapshot of roots from the at least one mutator. 4. The computing device of claim 1, wherein an allocation request is received by a stack top register of the sweep engine, and the stack top register is used to remove a pointer to a free object from a free stack that decrements the stackpointer. 5. The computing device of claim 1, wherein the specified level is based on at least one of an allocation rate, a mutation rate, a live data amount, and a memory resource. 6. The computing device of claim 1, wherein the dual-ported memory configuration is a block random access memory (BRAM). 7. The computing device of claim 1, wherein the computing device is one of a field programmable gate array (FPGA), an application specific integrated circuit (ASIC), and a programmable gate array (PGA). 8. The computing device of claim 1, wherein the computing device is in communication with a client application written in a hardware description language. 9. The computing device of claim 8, wherein the hardware description language is one of a very-high-speed integrated circuits hardware description language (VHDL) and Verilog. 10. The computing device of claim 1, wherein the computing device is in communication with a client application written in a software based programming language. 11. The computing device of claim 10, wherein the software based programming language is one of C, C++, SystemC, Perl, Python, C#, CUDA, OpenCL, Java, and a language that is derived therefrom, and wherein a compiler converts the software basedprogramming language into a hardware description language. 12. The computing device of claim 1, wherein the root snapshot engine utilizes a Yuasa-style snapshot-at-the-beginning algorithm. 13. The computing device of claim 1, wherein the trace engine includes a mark map that is a dual-ported memory and a mark queue that is a block random access memory (BRAM) operating in first in first out (FIFO) mode. 14. A method of garbage collection in a computing device, the method comprising: providing a memory module having a memory implemented as at least one hardware circuit, the memory module using a dual-ported memory configuration; triggering agarbage collection signal by a sweep engine of the computing device, the sweep engine in communication with a memory module to reclaim memory; receiving the garbage collection signal by a root snapshot engine of the computing device; providing a shadowregister and a mutator register of the root snapshot engine; having the garbage collection signal going high for one clock cycle; copying a value of the mutator register into the shadow register after the garbage collection signal goes high; sendingthe shadow register and a mutator through a multiplexer of the root snapshot engine, wherein a pointer that is read from the mutator stack emerges from the multiplexer as the snapshot of roots from the at least one mutator; taking a snapshot of rootsfrom at least one mutator by the root snapshot engine responsive to the garbage collection signal being received; and receiving roots from the root snapshot engine by a trace engine of the computing device, the trace engine in communication with thememory module to receive data. 15. The method of claim 14, further comprising triggering the garbage collection signal if a stack pointer of the sweep engine falls below a specified level. 16. The method of claim 15, further comprising receiving an allocation request by a stack top register of the sweep engine, wherein the stack top register is used to remove a pointer to a free object from a free stack that decrements the stackpointer. 17. The method of claim 15, wherein the specified level is based on at least one of an allocation rate, a mutation rate, a live data amount, and a memory resource. 18. The method of claim 14, further comprising providing an address to free port to the sweep engine, wherein the memory module is in communication with the sweep engine by the address to free port. 19. The method of claim 14, further comprising sending a pointer value from the memory module to the trace engine. 20. The method of claim 14, further comprising allowing a read and a write operation to proceed in parallel by the dual-ported memory configuration of the memory module. 21. The method of claim 14, further comprising communicating with the computing device with a client application that is written in a hardware description language. 22. The method of claim 21, wherein the hardware description language is one of a very-high-speed integrated circuits hardware description language (VHDL) and Verilog. 23. The method of claim 14, further comprising communicating with the computing device by a client application that is written in a software based programming language. 24. The method of claim 23, wherein the software based programming language is one of C, C++, SystemC, Perl, Python, C#, CUDA, OpenCL, Java, and a language that is derived therefrom, and wherein a compiler converts the software basedprogramming language into a hardware description language. Description BACKGROUND The present invention relates to memory management techniques, and more specifically, to a garbage collector that is implemented in hardware. Frequency scaling, which is the technique of ramping processor frequency to achieve enhance performance, has led to other approaches for enhancing computing performance. One example of another approach for enhancing performance is multipleinstruction, multiple data (MIMD) parallelism employing multiple processors. However, MIMD parallelism may be relatively inefficient, and consumes a relatively high amount of power. One alternative to MIMD parallelism is reconfigurable hardware suchas, for example, field-programmable gate arrays (FPGA). One drawback of FPGAs is programming methodology. The most common computer languages for FPGAs are relatively low-level hardware description languages such as, for example, very-high-speed integrated circuits hardware description language(VHDL) and Verilog. These low-level languages use abstractions that are bits, arrays of bits, registers, wires, and other hardware, which make programming FPGAs much more complex than conventional central processing units (CPUs). Thus, there is a focuson raising the level of abstraction and programmability of FPGAs to that of higher-level software based programming languages. Some examples of recent research are the Kiwi project, which automatically translates C# programs into FPGA circuits, or theLiquid Metal project that has developed the Lime language. One fundamental feature of high-level languages is automatic memory management, in the form of garbage collection (i.e., attempts to reclaim memory occupied by objects that are no longer in useby a program). However, whether a low-level language or a higher-level programming language is used, the use of garbage collection in FPGAs and other types of reconfigurable hardware structures is generally non-existent.SUMMARY According to one embodiment of the present invention, a computing device is provided and includes a memory module, a sweep engine, a root snapshot module, and a trace engine. The memory module has a memory implemented as at least one hardwarecircuit. The memory module uses a dual-ported memory configuration. The sweep engine includes a stack pointer. The sweep engine is configured to send a garbage collection signal if the stack pointer falls below a specified level. The sweep engine isin communication with the memory module to reclaim memory. The root snapshot engine is configured to take a snapshot of roots from at least one mutator if the garbage collection signal is received from the sweep engine. The trace engine receives rootsfrom the root snapshot engine and is in communication with the memory module to receive data. Additional features and advantages are realized through the techniques of the present invention. Other embodiments and aspects of the invention are described in detail herein and are considered a part of the claimed invention. For a betterunderstanding of the invention with the advantages and the features, refer to the description and to the drawings. BRIEF DESCRIPTION OF THE SEVERAL VIEWS OF THE DRAWINGS The subject matter which is regarded as the invention is particularly pointed out and distinctly claimed in the claims at the conclusion of the specification. The forgoing and other features, and advantages of the invention are apparent fromthe following detailed description taken in conjunction with the accompanying drawings in which: FIG. 1 is a block diagram of an exemplary field-programmable gate array (FPGA) having a garbage collector according to one aspect of the invention; FIG. 2 is a block diagram of a memory module shown in FIG. 1 in accordance with an embodiment of the present invention; FIG. 3 is a block diagram of a root snapshot engine shown in FIG. 1 in accordance with an embodiment of the present invention; FIG. 4 is a block diagram of a trace engine shown in FIG. 1 in accordance with an embodiment of the present invention; FIG. 5 is a block diagram of a sweep engine shown in FIG. 1 in accordance with an embodiment of the present invention; and FIG. 6 is a timing diagram of the garbage collector shown in FIG. 1 in accordance with an embodiment of the present invention.DETAILED DESCRIPTION An embodiment of a garbage collector implemented in computer hardware (as opposed to previous hardware-assist techniques) is disclosed. In one embodiment, a field-programmable gate array (FPGA) and an on-chip memory are disclosed. Utilizing aconcurrent snapshot algorithm, the garbage collector as disclosed provides single-cycle access to the heap, and does not stall a mutator for a single cycle, thus achieving a deterministic mutator utilization (MMU) of about 100%. In various embodiments,the garbage collector as disclosed does not consume more than about 2% of the logic resources of a relatively high-end FPGA. In the embodiments as disclosed, the garbage collector may include either a stop-the-world or a fully concurrent configuration. However, when implemented in hardware, real-time collection may achieve a higher throughput, lower latency, lower memory usage, and energy consumption when compared to the stop-the-world configuration. With reference now to FIG. 1, a block diagram of an exemplary field-programmable gate array (FPGA) 10 is shown having a memory module 20. The FPGA 10 includes various programmable gates 12, which may be programmed to include one or more modulesor engines. In the embodiment as shown, the FPGA 10 includes a trace engine 22, a sweep engine 24, and a root snapshot engine 26. The memory module 20 may store configuration information, where a first application interface 30 that is in communicationwith the memory module 20, which receives programming instructions and communicates information to and from a host (not shown). The memory module 20 is also in communication with the trace engine 22 and the sweep engine 24, where the trace enginereceives data from the memory module 20. A second application interface 32 is in communication with the root snapshot engine 26. The root snapshot engine 26 is in communication with a host (not shown) over the second application interface 32. The hostmay separately communicate with the root snapshot engine 26 over the second application interface 32. The trace engine 22 and the sweep engine 24 create a garbage collector 34. Although FIG. 1 illustrates an FPGA, it is understood that any type of computing device having a managed memory implemented as one or more hardware circuits using a hardware description language may be used as well such as, for example, anapplication specific integrated circuit (ASIC) having appropriate combinational logic gates or a programmable gate array (PGA). The FPGA 10 may be in communication with a client application that is written in a hardware description language such as, forexample, very-high-speed integrated circuits hardware description language (VHDL) and Verilog. The FPGA 10 may also be in communication with a client application written in a higher-level software based programming language such as, for example, C, C++,SystemC, Perl, Python, C#, CUDA, Java, OpenCL, or a language that is derived therefrom, where a compiler (not illustrated) converts the higher-level software based programming language into the hardware description language. In one embodiment, the FPGA 10 is a programmable logic device having 4- or 6-input look-up tables (LUTs) which can be used to implement combinational logic, and flip-flops (not illustrated) which can be used to implement sequential logic. Specifically, several LUTs and flip-flops may be combined together to form a unit called a slice, which is the standard unit in which resource consumption is reported for FPGAs. The FPGA 10 also includes a clock distribution network (not illustrated)for propagating a globally synchronized clock to allow for the use of conventional clocked digital logic. In one embodiment, the global clock may be used to implement an efficient single-cycle atomic root snapshot. The FPGA 10 also contains arelatively large amount of configurable routing resources for connecting the slices, based on the data flow in a hardware description language program. The routing resources are used by a place-and-route (PAR) tool during hardware synthesis. The FPGA 10 may employ block random access memory (BRAM), which are specialized memory structures that are usually available on FPGAs. For example, some types of FPGAs may have a BRAM capacity of between 1.5 MB to 8 MB of BRAM. One feature ofa BRAM type memory is that BRAM may be organized in various form factors (i.e., analogous to word sizes on a central processing unit). One commercially available example of an FPGA is the Virtex.RTM.-5 FPGA manufactured by Xilinx Inc., headquartered inSan Jose, Calif. One feature of BRAM is that BRAM can be organized in various form factors (analogous to word sizes on a CPU). On the Virtex.RTM.-5, form factors of 1, 2, 4, 9, 18, 36, 72, and so on are supported. For example, a 36 KB BRAM can also beused as two logically separate 18 KB BRAMs. Moreover, a denser memory structure may be built by cascading multiple BRAMs horizontally, vertically or, in a hybrid configuration. Any memory structure which is smaller than 18 KB would lead to quantization(i.e., in memory system parlance, this is referred to as fragmentation). The quantization may be considerable, depending on the logical memory structure in the design. The BRAM may be used as a true dual-ported (TDP) RAM (shown in FIG. 2 as port A and port B) that provides two fully independent read-write ports. A dual-ported memory has ability to simultaneously read and write to different memory cells atdifferent addresses. Moreover, each port on the BRAM memory supports either read, write, read-before-write, and read-after-write operations. It should be noted that the BRAM may also be configured for use as a first in first out (FIFO) queues ratherthan a random access memory, which is used in the trace engine 22. The FGPA 10 includes memory structures (e.g., the memory 80 and 82 as illustrated in FIG. 2) that are typically more uniform than conventional software heaps. Thus, the memory structures in the FPGA 10 are organized into one or more miniheaps,in which objects have a fixed size and shape in terms of pointer and data fields. Each miniheap has an interface allowing objects to be allocated (and freed when using explicit memory management), and operations allowing individual data fields to beread or written. Miniheaps with one or two pointer fields and one or two data fields are generally employed. The quantization as described above may impact efficiency of BRAM utilization. For example, for a miniheap of size N=256, pointers are 8 bitswide, so a single 18 KB BRAM configured as 9 bits wide would be used. However, this wastes 1 bit per entry, but also wastes 1.75K entries, since only 256 (0.25K) entries are needed. The 1 bit wasted per field is a form of internal fragmentation and the1.75K wasted fields are a form of external fragmentation. To reduce external fragmentation, multiple fields of the same size may be implemented with a single BRAM set. However, since BRAMs are dual-ported, supporting more than two fields would result in a loss of parallelism in terms of field access. Furthermore, since one BRAM port is used for initialization of fields when allocated, this effect comes into play even with two fields. The opposite approach is also possible: multiple fields can be implemented with a single BRAM set, resulting in awider data width. In principle this can reduce internal fragmentation. However, in practice, this actually can result in poorer resource allocation because it reduces flexibility for the synthesis tools. The memory module 20 receives an allocation request 56, an address to free port 58, an address to read/write port 60, and a pointer to write port 62. The allocation request 56 may be a one-bit signal that is used to implement a malloc operation(e.g., dynamic allocation), and is received from a host (not shown) through the first application interface 30. The address to free port 58 is in communication with the sweep engine 24, and the address to read/write port 60 and the pointer to write port62 are in communication with a host (not shown) through the first application interface 30. The memory module 20 sends a pointer value 70 to the trace engine 22. A block diagram of the memory module 20 is illustrated in FIG. 2, showing primary data and control fields. Various approaches exist for implementing the miniheap as described above. Fundamentally, the miniheap represents a time/space (andsometimes power) trade-off between the number of available parallel operations, and the amount of hardware resources consumed. Regarding the FPGA 10 shown in FIG. 1, a logical memory block with a desired data width and number of entries is specified,and the synthesis tools attempt to allocate the required number of individual block RAMs as efficiently as possible, using various packing strategies. The BRAMs for such a logical memory block are referred to as a BRAM set. In the various embodimentsas described, one BRAM set is used for each field in the object. For example, if there are two pointers and one data field, then there are three BRAM sets. The non-pointer field has a natural width associated with its data type (e.g., 32 bits). However, for a miniheap of size N, the pointer fields are [log.sub.2 N] bits wide. Thus, because data widths on the FPGA 10 are customizable, the precise number of required bits are used. Thus, a larger miniheap will increase in size not only becauseof the number of entries, but because the pointer fields become larger. It should be noted that the memory module is the same as in software, where the pointer value 0 is reserved to mean ""null"", so a miniheap of size N can really only store N-1objects. For clarity, a single object field memory 80 is illustrated in FIG. 2, which is of pointer type, and is stored in a single BRAM set. A second set of memory 82 (e.g., a free stack of memory) is also provided to store a stack of free objects. Both the memories 80 and 82 include a dual-port configuration (e.g., having a first port A and a second port B). The allocation request 56 is sent to a stack top register 84, which is used to hold the value of a stack top of the second set of memory 82. Assuming the value of the stack top register 84 is a non-zero value, the stack top register 84 isdecremented and sent to port B of the memory 82, in read mode. A resulting pointer 86 from the memory 82 is also the address allocated port 72. The resulting pointer 86 is also sent to port B of the memory 80, in write mode. A resulting write value ofthe resulting pointer 86 is hard wired to null (e.g., `000`). To free an object a pointer (e.g., the address to free signal 58) is presented to the memory module 20, and the stack top register 84 is used as the address for the memory 82 on port B, inwrite mode, with the data value of the address to free signal 58. The stack top register 84 is incremented, which causes a pointer to the freed object to be pushed onto the freed stack of memory 82. In order to read or write to a field in the pointer memory 80, the address to read write signal 60 is presented, and if writing the pointer to write signal 62 is presented. This utilizes port A of the memory 80 in either read or write mode,resulting in the pointer value 70 in the write mode. Thus, as shown in FIG. 2, the memory module 20 can allow a read or write to proceed in parallel, which is allowed by the dual-ported memories 80 and 82. Turing back to FIG. 1, the root snapshot engine 26 may use a Yuasa-style snapshot-at-the-beginning algorithm (i.e., an algorithm that uses the snapshot-at-the-beginning strategy to preserve every reference at the beginning of garbage collection,and new objects allocated during garbage collection are also preserved). A root snapshot may be obtained virtually without stopping an application while the snapshot is taken. The root snapshot engine 26 takes two types of roots from one or moremutators, those in the registers and those in the stack. Referring now to FIG. 3, the root snapshot engine 26 is illustrated with a single mutator stack 90 and a single mutator register 92. The snapshot is controlled by a garbage collector (GC) signal sent from the sweep engine 24 (shown in FIG. 1). The GC signal goes high for one clock cycle at the beginning of collection. The snapshot of the roots is defined as the state of memory at the beginning of a next cycle after the GC signal goes high. A snapshot of the mutator register 92 is obtained byusing a shadow register 100. In the cycle after the GC signal goes high, the value of the mutator register 92 is copied into the shadow register 100. This can happen even if the mutator register 92 is also written by the mutator in the same cycle,since the new value will not be latched until the end of the cycle. The stack snapshot is obtained by having another register in addition to a stack top register 102, which is referred to as a scan pointer register 104. In the same cycle that the GC signal goes high, the value of a stack top register pointer106 minus one is written into the scan pointer register 104 (because the stack top points to the entry above the actual top value). Beginning in the following cycle, the scan pointer register 104 is used as the source address to port B of the mutatorstack 90, and a pointer 110 is read out, going through a multiplexer 112 (MUX) and emerging on a root to add port 114 from the snapshot module. The scan pointer register 104 is also decremented in preparation for the following cycle. It should be notedthat the mutator can continue to use the mutator stack 90 via port A of the BRAM set, while the snapshot uses port B of the mutator stack 90. Moreover, because the mutator cannot pop values off the stack faster than a collector can read the values, theproperty is preserved that the snapshot contains exactly the roots that existed in the cycle following the GC signal. One feature omitted from FIG. 3 is that a state machine (not shown) is required to sequence the values from the mutator stack 90 and the shadow register 100 through the multiplexer 112 to the root to add port 114. It should be noted that thevalues from the mutator stack 90 are processed first, because the stack snapshot technique relies on staying ahead of the mutator without any explicit synchronization. If multiple stacks are provided, then a shadow stack will be provided to hold valuesas they were read out before the mutator could overwrite the hold values, which could then be sequenced onto the root to add port 114. As will be discussed below, the GC signal is only triggered by an allocation request by the mutator that causes freespace to drop below a threshold. Therefore, the generation of root snapshot logic only needs to consider the hardware states in which this might occur. Any register or stack not live in those states can be safely ignored. Turning back to FIG. 1, the trace engine 22 includes a single pointer memory (shown in FIG. 4 as reference number 120). The trace engine 22 provides the same mutator interference as the malloc/free style memory management approach of the memorymodule 20. In particular, referring to both FIGS. 1 and 4, the trace engine 22 also includes an address to read port 130, a pointer to write port 132, and a pointer value port 70, except that instead of the address to free port 58 (shown in FIG. 2), anaddress to clear port 136 is provided. Also, the root to add port 114 from the root snapshot engine 26 is provided. Continuing to refer to FIG. 4, during execution, there are three sources of pointers for the trace engine 22 to trace: externally added roots from the snapshot (e.g., the root to add port 114 from the snapshot engine 26), internally traced rootsfrom the pointer memory 120, and over-written pointers from the pointer memory 120 (which is captured with a Yuasa-style barrier to maintain the snapshot property). The different pointer sources flow through a multiplexer 140, and on each cycle apointer 142 (e.g., pointer to trace) can be presented to a mark map 146 (which is a dual-ported memory), and contains one bit for each of the N memory locations. Using the BRAM read-before-write mode, an old mark value is read, and then the mark valueis unconditionally set to 1. If the old mark value is 0, this pointer has not yet been traversed, so the negation of the old mark value (indicated by the bubble 150) is used to control whether a pointer 152 is added to a mark queue 154 (note that thismeans that all values in the mark queue 154 have been filtered, so at most N-1 values can flow through the queue). The mark queue 154 is a BRAM used in FIFO (rather than random access) mode. Pointers from the mark queue 154 are presented as a read address on port B of the pointer memory 120, and if non-null values are fed to a multiplexer 155 back to the marking step. The write barrier is implemented by using port A of the pointermemory 120 BRAM in read-before-write mode. When the mutator writes a pointer, the old value is read out first and placed into a barrier register 156. This is subsequently fed through the multiplexer 140 and marked. Given the three BRAMs involved inthe marking process, processing one pointer requires 3 cycles. However, the marking engine is implemented as a 3-stage pipeline, and is able to sustain a throughput of one pointer per cycle. For objects with two pointers, two trace engines may be provided and paired together to maximize resource usage (not shown). Since each trace engine only uses one port of the mark map, both engines can mark concurrently. Furthermore, the twomark queues are multiplexed together and the next item to mark is always taken from the less full queue. This allows the queues to be of size N/2. On each cycle, one pointer is removed from the queue, and the two pointers in the object retrieved areexamined and potentially marked and enqueued. The final optimization is that since there are now two write barrier registers and two mark queues, the write barrier values are not processed until there are two of them. This means that the mark enginescan make progress every other cycle even if the application is performing one write per cycle. The termination protocol for marking is relatively simple: once the last item from the mark queues 154 is popped (both mark queues become empty), it takes 2 or 3 cycles for the trace engine 22 to finish the current pipeline. If the two pointersreturned by the heap are null, then the mark process is terminated in the 2nd cycle as there is no need to read the mark bits in this case. Otherwise the mark bit for the non-null pointers are read to ensure that both pointers are marked, in which casethe mark phase is terminated in the third cycle. Write barrier values arriving after the first cycle of termination can be ignored, since by the snapshot property would either have to be newly allocated or else discovered by tracing the heap. However, note that some data structures (e.g.,linked lists) will cause a pathological behavior, in which a pointer is marked, removed from the queue, which will appear empty, and then 2 cycles later the next pointer from the linked list will be enqueued. So while the pipeline can sustain markingone object per cycle, pipeline bubbles will occur which reduce that throughput. Turning back to FIG. 1, the sweep engine 24 is provided, where sweeping will begin during the next machine cycle after the tracing in the trace engine 22 has been completed. During sweeping, memory is reclaimed. A mark signal 160 is sent fromthe trace engine 22 to the sweep engine 24 to indicate that the tracing has been completed. Referring now to FIG. 5, the sweep engine 24 receives the allocation request 56 from the mutator. The sweep engine 24 handles the allocation request 56 andmaintains a stack of pointers to a free memory that is a free stack 164. The sweep engine 24 also includes the mark map 146 of the trace engine 22 (shown in FIG. 4). When the allocation request 56 is received, a stack top register 166 is used to remove a pointer to a free object from the free stack 164, thereby decrementing a stack pointer 168. If the stack pointer 168 falls below a specified level then theGC signal is triggered by raising the GC signal. Referring to both FIGS. 1 and 4-5, the GC signal is sent from the stack top 166 of the sweep engine 24 to the root snapshot engine 26. In one embodiment, the specified level of the stack pointer 168 isabout 25%, however it is to be understood that the specified level may include other values as well. Specifically, the specified level may be based on one or more application and resource parameters such as, for example, allocation rates, mutationrates, live data amount, and memory resource. The address popped from the free stack 164 is returned to the mutator on an address allocated port 169. The address is also used to set an object's entry in a used map 170 to the value 01, which means ""freshly allocated"". A value of 00 means""free"", in which case the object is on the free stack 164. Sweeping is a simple linear scan. A sweep pointer 172 initialized to 1 (since slot 0 is reserved for null), and on every cycle (except when pre-empted by allocation) the sweep pointer is presented to both the mark map 146 and the used map 170. If an object is marked, the used map 170 entry is set to `10`. If an object is not marked and the used map 170 entry is `10` (which is indicated by an and gate 180 in FIG. 5) then the used map entry is set to 00. The resulting signal is also used tocontrol whether the current sweep pointer 172 address is going to be freed. If so, the sweep pointer 172 is pushed onto the free stack 164 and also output on the address to clear port 136, which is connected to the mark engine (e.g., the mark map 146)so that the data values being freed are zeroed out. It should be noted that since clearing only occurs during sweeping, there is no contention for port B of the pointer memory 120 in the trace engine 22 (FIG. 4) between clearing and marking. Furthermore, it should also be noted that anallocation request and a free request may happen in the same cycle (e.g., the stack top 84 as shown in FIG. 2 is accessed using read-before-write mode and returned as the address allocated signal 72, and then the newly freed object is pushed back). When an object is allocated, the object is not marked. Thus, the garbage collector 36 (shown in FIG. 1) does not allocate black, which means that the tracing engine 22 may encounter newly allocated objects in the marking pipeline (via newlyinstalled pointers in the heap), albeit at most once since the pointer will then be marked. This also affects worst-case execution time (WCET) analysis. Referring generally to FIGS. 1-5, the configuration of the garbage collector 36 thus allows for mutation and collection to occur unconditionally, in a single cycle. Thus, the minimum mutator utilization (MMU) is about 100%, unless insufficientresources are dedicated to the heap. Turning now to FIG. 6, a timing chart of the garbage collector 36 is illustrated. As shown in FIG. 6, garbage collection is triggered or initiated by the GC signal sent from the sweep engine 24 (shown in FIG. 1). Referring now to FIGS. 1 and 6, the GC signal is triggered if the pointer 168 (of the sweep engine 24 shown in FIG. 5) falls below the specified level (e.g., in one embodiment the specified level is 25%). The GC signal goes high for one clock cycle atthe beginning of garbage collection. The root snapshot module 26 receives the GC signal and takes a snapshot of the roots from the mutator during the root snapshot phase. The root snapshot engine 26 sends the root to add port 114 (e.g., the snapshot of the mutator) to the trace engine 22. Thus initiates a mark phase in the trace engine 22. The trace engine 22 is implemented as a 3-stage pipeline, having athroughput of one pointer per clock cycle. The mark signal 160 is sent from the trace engine 22 to the sweep engine 24 during a mark done phase to indicate that the tracing has been completed. The sweep phase then begins, where memory is reclaimed(e.g., the address to free port 58 sent back to the memory module 20). The GS signal triggered by the sweep engine 24 each time the pointer 168 (of the sweep engine 24 shown in FIG. 5) falls below the specified level. Unlike software-based garbage collectors, the garbage collector as described in FIGS. 1-6 is fully deterministic, as it is possible to analyze the worst case behavior down to a (machine) cycle. For example, given R is the maximum number ofroots and N is the size of the heap, then the worst-case time (in cycles) for garbage collection is: T=T.sub.R+T.sub.M+T.sub.W+T.sub.X+T.sub.S+T.sub.A where T.sub.R is the time to snapshot the roots, T.sub.M is the time (in cycles) to mark, T.sub.S isthe time to sweep, and T.sub.W is the time lost to write barriers during marking, T.sub.X is the time lost to blackening newly allocated objects during marking, and T.sub.A is time lost to allocations during sweeping. In the worst case, without anyknowledge of the application, T.sub.R=R+2, T.sub.M=3N+3, T.sub.W=0 T.sub.X=0, and T.sub.S=N. The reasoning for these quantities will now be explained. During the snapshot phase, one root into the mark queue every cycle may be placed, plus one cycle to start and finish the phase, accounting for R+2. During marking (e.g., performed bythe trace engine 22), there could be N objects in the heap, configured as a linked list which causes the mark pipeline to stall for two cycles on each object, plus 3 cycles to terminate. Sweeping (performed by the sweep engine 24) is unaffected byapplication characteristics, and always takes N cycles. Preemption of the collector by mutator write barriers (T.sub.W) does not factor into the worst-case analysis because the write barrier work is overlapped with the collector stalls. Extra markoperations to blacken newly allocated objects (T.sub.X) also simply fill stall cycles. The garbage collector as described in the embodiments shown in FIGS. 1-6 allows an allocation operation in every cycle, but allocation pre-empts the sweep phase, meaning that such an allocation rate can only be sustained in relatively shortbursts. The largest sustainable allocation rate is 0.5--otherwise the heap would be exhausted before sweeping completed. Thus, T.sub.A=N and T.sub.worst=R+5N+5. In one approach, real-time analysis may be performed where .mu. is the average number of mutations per cycle (.mu.<1), .alpha. is the average number of allocations per cycle (.alpha.<0.5), and m is the maximum number of live data objectsin the heap at any one time (m<N). The following equations are provided: .times..mu..mu..times..alpha..alpha..times. ##EQU00001## It should be noted that both .alpha. and .mu. can only be averaged over a time window guaranteed to be less than or equal to the phases which .alpha. and .mu. influence, and m is a safe window size. One inaccuracy may be due to pipelinestalls during marking, for which worst and average case behavior can be very different. Thus, B is the number of pipeline stalls (0.ltoreq.B.ltoreq.2m), so T.sub.M=m+B+3. For a linked list, B=2m; for three linked lists each with its own root, B=0. Fora heap considered as a forest without back-edges, B is bounded by the number of levels of width 1 plus the number of levels of width 2 (when the width is 3 or greater, there is enough parallelism to keep the 3-stage pipeline full and avoid stalls). Using these application-specific estimates, the WCET of collection is expressed as: .alpha..times..mu..times. ##EQU00002## Once the worst-case execution time for collection is known, the minimum heap size in which the collector can run with real-time behavior (zero stalls) is determined, where m objects are available for the live data. While a collection takingtime T.sub.max takes place, another .alpha.T.sub.max objects can be allocated (the so-called floating garbage). However, there may be .alpha.T.sub.max floating garbage when a collection starts, and then another .alpha.Tmax objects will be allocatedduring that collection. Thus the minimum heap size is: N.sub.min=m+2.alpha.T.sub.max If the non-size-dependent portion of T.sub.max from the previous equation is denoted as: .alpha..times..mu..times. ##EQU00003## and the following is solved: .times..alpha..times..times. ##EQU00004## .times..alpha..function. ##EQU00004.2## .times..alpha..times..times..times..alpha..times..alpha. ##EQU00004.3## A micro-benchmark was performed with three different types of memory management implementations, an explicit (e.g., malloc/free) memory management, real-time collection, and a stop-the-world collector. The comparison was performed using theVirtex.RTM.-5 FPGA. It should be noted that when implemented in hardware, the real-time collector is faster, has lower latency, can run more effectively in less space, and consumes less energy when compared to a stop-the-world collector. As will be appreciated by one skilled in the art, aspects of the present invention may be embodied as a system, method or computer program product. Accordingly, aspects of the present invention may take the form of an entirely hardwareembodiment, an entirely software embodiment (including firmware, resident software, micro-code, etc.) or an embodiment combining software and hardware aspects that may all generally be referred to herein as a ""circuit,"" ""module"" or ""system."" Furthermore,aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium(s) having computer readable program code embodied thereon. The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein, the singular forms ""a"", ""an"" and ""the"" are intended to include the plural forms aswell, unless the context clearly indicates otherwise. It will be further understood that the terms ""comprises"" and/or ""comprising,"" when used in this specification, specify the presence of stated features, integers, steps, operations, elements, and/orcomponents, but do not preclude the presence or addition of one more other features, integers, steps, operations, element components, and/or groups thereof. The corresponding structures, materials, acts, and equivalents of all means or step plus function elements in the claims below are intended to include any structure, material, or act for performing the function in combination with other claimedelements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description, but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications andvariations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practicalapplication, and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated The flow diagrams depicted herein are just one example. There may be many variations to this diagram or the steps (or operations) described therein without departing from the spirit of the invention. For instance, the steps may be performed ina differing order or steps may be added, deleted or modified. All of these variations are considered a part of the claimed invention. While the preferred embodiment to the invention had been described, it will be understood that those skilled in the art, both now and in the future, may make various improvements and enhancements which fall within the scope of the claims whichfollow. These claims should be construed to maintain the proper protection for the invention first described."
7|http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=78&p=2&f=G&l=50&d=PTXT&S1=(python.CLTX.+or+python.DCTX.)&OS=ACLM/python&RS=ACLM/python|Method and system for data centric heap profiling|A method and system for data centric heap profiling is disclosed. In one embodiment, a method, implemented in a computing device, for data centric heap profiling includes generating a type table for data structure types in source code using a compiler of the computing device. The method also includes identifying each heap allocation site and a corresponding data structure type in the source code using the compiler. The method further includes generating a data centric view of a heap o fan application compiled from the source code based on the each heap allocation site and the corresponding data structure type using a debugger of the computing device when a snapshot of the heap is requested during an execution of the application.|"1. A method, implemented in a computing device, for data centric heap profiling, comprising: generating a type table for data structure types in source code using a compilerof the computing device; identifying each heap allocation site and a corresponding data structure type in the source code using the compiler, wherein the identifying the each heap allocation site and the corresponding data structure type comprises:generating a heap allocation site table which includes a program counter (PC) value, an allocation/de-allocation flag, and at least one pointer to at least one of the data structure types; and generating a mapping between the each heap allocation siteand the corresponding data structure type using the at least one pointer; wherein the type table and the heap allocation site table are written to a non-loadable section of binary/object files generated by the compiler; and generating a data centricview of a heap of an application compiled from the source code based on the each heap allocation site and the corresponding data structure type using a debugger of the computing device when a snapshot of the heap is requested during an execution of theapplication. 2. The method of claim 1, wherein the type table comprises a data structure type and a size of the data structure type. 3. The method of claim 1, wherein the generating the data centric view of the heap comprises generating a run-time heap allocation call stack table which includes an address allocated for the each heap allocation site, a size of the address,the allocation/de-allocation flag, and the PC value. 4. The method of claim 1, wherein the generating the data centric view of the heap further comprises mapping a call graph signature at the point of the each heap allocation site to the corresponding data structure type, wherein the call graphsignature comprises a set of functions along a code path from the each heap allocation site to a main function. 5. The method of claim 1, wherein the identifying the each heap allocation site and the corresponding data structure type is based on an intra-procedural analysis. 6. The method of claim 1, wherein the identifying the each heap allocation site and the corresponding data structure type is based on an inter-procedural analysis, further comprising casting a pointer to void* as a pointer to a correct datastructure type. 7. The method of claim 1, wherein the source code is written using a weakly typed language which includes C, C++, Pascal, Scripting language, and Python. 8. A system for data centric heap profiling, comprising: a processor; and a memory configured for temporarily storing a set of instructions for a data centric heap profiling module, when executed by the processor, causes the processor toperform a method comprising: generating a type table for data structure types in source code using a compiler of a computing device; identifying each heap allocation site and a corresponding data structure type in the source code using the compiler,wherein the identifying the each heap allocation site and the corresponding data structure type comprises: generating a heap allocation site table which includes a program counter (PC) value, an allocation/de-allocation flag, and at least one pointer toat least one of the data structure types; and generating a mapping between the each heap allocation site and the corresponding data structure type using the at least one pointer; wherein the type table and the heap allocation site table are written toa non-loadable section of binary/object files generated by the compiler; and generating a data centric view of a heap of an application compiled from the source code based on the each heap allocation site and the corresponding data structure type usinga debugger of the computing device when a snapshot of the heap is requested during an execution of the application. 9. The system of claim 8, wherein the source code is written using a weakly typed language which includes C, C++, Pascal, Scripting language, and Python. 10. A non-transitory computer readable medium for a data centric heap profiling having instructions that, when executed by a computer, cause the computer to perform a method comprising: generating a type table for data structure types in sourcecode using a compiler of the computer; identifying each heap allocation site and a corresponding data structure type in the source code using the compiler, wherein the identifying the each heap allocation site and the corresponding data structure typecomprises: generating a heap allocation site table which includes a program counter (PC) value, an allocation/de-allocation flag, and at least one pointer to at least one of the data structure types; and generating a mapping between the each heapallocation site and the corresponding data structure type using the at least one pointer; wherein the type table and the heap allocation site table are written to a non-loadable section of binary/object files generated by the compiler; and generating adata centric view of a heap of an application compiled from the source code based on the each heap allocation site and the corresponding data structure type using a debugger of the computer when a snapshot of the heap is requested during an execution ofthe application. 11. The non-transitory computer readable medium of claim 10, wherein the identifying the each heap allocation site and the corresponding data structure type comprises: generating a heap allocation site table which includes a PC value, anallocation/de-allocation flag, and at least one pointer to at least one of the data structure types; and generating a mapping between the each heap allocation site and the corresponding data structure type using the at least one pointer. Description RELATED APPLICATIONS Benefit is claimed under 35 U.S.C. 119(a)-(d) to Foreign application Serial No. 1061/CHE/2009 entitled ""METHOD AND SYSTEM FOR DATA CENTRIC HEAP PROFILING"" by Hewlett-Packard Development Company, L.P., filed on 7 May, 2009, which is hereinincorporated in its entirety by reference for all purposes.BACKGROUND In certain programming languages, a heap may refer to an area of dynamically allocated computer memory that a program process may use to store data in some variable amount that may not be known until the program starts running. The programprocess may manage its allocated heap by requesting a block of the heap when needed, and returning or releasing the block when the block is not needed any longer. A memory leak may refer to a situation when the block no longer needed is not properlyfreed or de-allocated due to one or more causes, such as losing track of pointers to stored data objects. Currently, compiler and debugger tools for analyzing computer programs during the compile and run-time may be run to determine the memory leak or a growth of the heap associated with each computer program. In the case of compiler and debuggertools for weakly typed programming languages, such as C, C++, etc., code-centric profiling of the heap, which associates a heap allocation site with its corresponding call graph signature, may be generated if a snapshot of the heap is requested.BRIEF DESCRIPTION OF THE DRAWINGS Embodiments of the present invention are illustrated by way of an example and not limited to the figures of the accompanying drawings, in which like references indicate similar elements and in which: FIG. 1A is a block diagram which illustrates an exemplary process for generating a data centric view of a heap, according to one embodiment; FIG. 1B is an exemplary illustration of the data centric view of the heap in FIG. 1A; FIG. 1C is another exemplary illustration of the data centric view of the heap in FIG. 1A; FIG. 2A illustrates an exemplary type table in FIG. 1A; FIG. 2B illustrates an exemplary heap allocation site table in FIG. 1A; FIG. 2C illustrates an exemplary run-time heap allocation call stack table in FIG. 1A; FIG. 3 illustrates an exemplary computing device operable for practicing various embodiments of the present invention; FIG. 4 illustrates an exemplary network environment operable for practicing various embodiments of the present invention; and FIG. 5 illustrates a process flow chart for data centric heap profiling, according to one embodiment. Other features of the present embodiments will be apparent from the accompanying drawings and from the detailed description that follows.DETAILED DESCRIPTION A method and system for data centric heap profiling is disclosed. In the following detailed description of the embodiments of the invention, reference is made to the accompanying drawings that form a part hereof, and in which are shown by wayof illustration specific embodiments in which the invention may be practiced. These embodiments are described in sufficient detail to enable those skilled in the art to practice the invention, and it is to be understood that other embodiments may beutilized and that changes may be made without departing from the scope of the present invention. The following detailed description is, therefore, not to be taken in a limiting sense, and the scope of the present invention is defined by the appendedclaims. The terms `computer` and `computing device` are used interchangeably throughout the document. FIG. 1A is a block diagram which illustrates an exemplary process for generating a data centric view of a heap, according to one embodiment. Particularly, FIG. 1A illustrates a process of data centric heap profiling using a complier 104 and adebugger 112. The compiler 104 may be configured to receive source code 102 and compile the source code 102 to generate binary/object files 106. For example, the source code 102 may be code written using a weakly typed language such as C, C++, Pascal,Scripting language, Python and the like. The compiler 104 may also be configured to generate a type table 108 for data structure types in the source code 102 and a heap allocation site table 110. Further, the debugger 112 may be configured to control a target process/application image 114, a code segment 116 and a heap segment 118. Furthermore, the debugger 112 may be configured to generate a run-time heap allocation call stack table120. Moreover, the debugger 112 may be configured to generate a data centric view of the heap 122 using the type table 108, the heap allocation site table 110 and the run-time heap allocation call stack table 120. The data centric view of the heap 122is a view of the heap in terms of the data structure types in the source code 102 which are present in the heap at the run-time of the source code 102. In one embodiment, the debugger 112 may be configured to generate the data centric view of the heap122 when a snapshot of the heap is requested during the run-time of the source code 102. In operation, the compiler 104 may compile a source file(s) associated with the source code 102 to generate the binary/object files 106. The compiler 104 may then generate the type table 108 for the data structure types in the source code 102. The compiler 104 may further identify each heap allocation site and a corresponding data structure type in the source code 102. In one embodiment, the compiler 104 may generate the heap allocation site table 110 based on the each identified heapallocation site and the corresponding data structure type. Further, the complier 104 may write the type table 108 and the heap allocation site table 110 to a non-loadable section of the binary/object files 106. Then, the debugger 112 may execute the binary/object files 106 with the type table 108 andthe heap allocation site table 110. During execution, if a user requests for a snapshot of a heap of an application compiled from the source code 102, the debugger 112 may generate the run-time heap allocation site call stack table 120. Then, using thetype table 108, the heap allocation site table 110 in the non-loadable section of the binary/object files 106 and the run-time heap allocation call stack table 120, the debugger 112 may generate the data centric view of the heap 122. Exemplary datacentric views of the heap 122, that the debugger 112 may generate, are illustrated and described in greater detail in FIGS. 1B and 1C. FIG. 1B is an exemplary illustration of the data centric view of the heap 122 in FIG. 1A. As mentioned above, the data centric view of the heap 122 may be generated based on the each heap allocation site and the corresponding data structuretype in the source code 102. For example, consider that the source code 102 has total of 33 data structure types which include 15 struct `d`, 8 ints, and 10 chars. Also, the size of 15 struct `d`, 8 ints and 10 chars data structure types for which theheap is allocated is 3000 bytes, 32 bytes and 10 bytes, respectively. In the example embodiment illustrated in FIG. 1B, the data centric view of the heap 122 generated by the debugger 112 using the above-mentioned data structure types and their sizes isdisplayed as ""15 struct `d` structures for a total of 3000 bytes"", ""8 ints for a total of 32 bytes"" and ""10 chars for a total of 10 bytes"". FIG. 1C is another exemplary illustration of the data centric view of the heap 122 in FIG. 1A. As illustrated in FIG. 1C, the data centric view of the heap 122 generated by the debugger 112 includes an allocated address 124, a call graphsignature 126 and a data structure type 128. The allocated address 124 may be an address allocated for the heap allocation site. The call graph signature 126 may be a set of functions along a code path from the heap allocation site to a main function. In one embodiment, the debugger 112 may generate the data centric view of the heap 122 by mapping the call graph signature 126 at the point of the each heap allocation site to the corresponding data structure type 128. For example, consider the following source code 102 for which the debugger 112 may generate a data centric view of the heap 122: TABLE-US-00001 Main( ) { Foo( ); } Foo( ) { Structure node*p = malloc(sizeof(structure node)); ............ } Also, consider that `p` is allocated an address 1000. Thus, the data centric view of the heap 122 generated by the debugger 112 for the above source code 102 is as follows: TABLE-US-00002 Address 1000 Malloc( ) Foo( ) Main( ) Structure node where, in the above data centric view of the heap 122, `Address 1000` is the allocated address 124, `Malloc( )`, `Foo( )`, `Main( )` is the call graph signature 126 and `Structure node` is the data structure type 128. It can be seen from FIG.1C that, the data centric view of the heap 122 is generated based on mapping the call graph signature `Malloc( ), Foo( ), Main( )` at `Address 1000` allocated for the heap allocation site to the corresponding data structure type `Structure node`. FIG. 2A illustrates an exemplary type table 108 in FIG. 1A. The type table 108 as illustrated in FIG. 2A includes a data structure type column 202 and a size column 204. The data structure type column 202 may include data structure types inthe source code 102. The size column 204 may include a size of corresponding data structure type in the data structure type column 202. In the example embodiment illustrated in FIG. 2A, the data structure type column 202 shows the data structure typesin the source code 102 as `int`, `char` and `structure node`. Further, the size column 204 shows the size of the data structure types `int`, `char` and `structure node` as `4`, `1`, and `20` bytes respectively. FIG. 2B illustrates an exemplary heap allocation site table 110 in FIG. 1A. As illustrated in FIG. 2B, the heap allocation site table 110 includes a PC value or heap allocation site column 206, an alloc(A)/de-alloc(D) column 208 and a pointerto data structure type(s) column 210. The PC value column 206 may include a PC value indicating a static code address associated with the data structure type(s) in the source code 102. The alloc(A)/de-alloc(D) column 208 may include an allocation/de-allocation flag for the datastructure type(s) corresponding to the PC value. The pointers to data structure type(s) column 210 may include a pointer(s) which points to the data structure type(s) in the data structure type column 202 of the type table 108. In one embodiment, thecompiler 104 may use the pointers in the pointers to data structure type(s) column 210 to generate a mapping between the each heap allocation site and the corresponding data structure type. In one exemplary implementation, the compiler 104 may generate the heap allocation site table 110 upon identifying each heap allocation site and a corresponding data structure type associated with the heap used for processing the source code102. In one embodiment, the each heap allocation site and the corresponding data structure type associated with the heap may be identified based on an intra-procedural analysis if the corresponding data structure type returned at the each heapallocation site is a correct data structure type. In an alternate embodiment, each heap allocation site and the corresponding data structure type associated with the heap may be identified based on an inter-procedural analysis if a pointer to void* is returned at each heap allocation site andthe pointer is cast to a correct data structure type up in the call graph chain. In one example embodiment, the correct data structure type may be assigned to the returned pointer in an immediate caller of an allocating function associated with the eachheap allocation site. In another example embodiment, the correct data structure type may be assigned to the returned pointer from the allocation site in a caller in a call graph signature beyond the immediate caller of the allocating function associatedwith the each heap allocation site. It is appreciated that, the intra-procedural analysis and the inter-procedural analysis are well known to a person skilled in the art. In the example embodiment illustrated in FIG. 2B, the PC value column 206 shows the PC values as `1000`, `1800` and `2000`. The alloc(A)/de-alloc(D) column 208 shows the allocation/de-allocation flags as `A`, `D` and `A` which indicates thatthe PC values `1000` and `2000` are allocated to the data structure types while the PC value `1800` is de-allocated. The pointers to data structure type(s) column 210 shows the pointers as `3` and `1` in the first row, and `2` in the third row, whichindicates that the data structure types `int` and `structure node` are mapped to the PC value `1000` and the data structure type `char` is mapped to the PC value `2000`. FIG. 2C illustrates an exemplary run-time heap allocation call stack table 120 in FIG. 1A. The run-time heap allocation call stack table 120 may include an allocated/de-allocated address column 212, a size column 214, the alloc(A)/de-alloc(D)column 208 and a stack trace PCs column 216. The allocated/de-allocated address column 212 may include an allocated/de-allocated address for the each heap allocation site. The size column 214 may include a size of the allocated/de-allocated address forthe each heap allocation site. The stack trace PCs column 216 may include the PC value associated with the data structure types in the source code 102. In the example embodiment illustrated in FIG. 2C, the allocated/de-allocated address column 212 shows the allocated/de-allocated address for the each heap allocation site as `50000`, `60000` and `70000`. The size column 214 shows the size ofthe addresses `50000`, `60000` and `70000` as `512`, `2048` and `6000` bytes respectively. The alloc(A)/de-alloc(D) column 208 displays the allocation/de-allocation flags as `A`, `D` and `A` which indicates that the addresses `50000` and `70000` areallocated to the data structure types while the address `60000` is de-allocated. In accordance with the above-described embodiments, the debugger 112 may generate the data centric view of the heap 122 based on the each heap allocation site and the corresponding data structure type. As illustrated, the PC valuescorresponding to the allocated/de-allocated addresses in the stack trace PCs column 216 of the run-time heap allocation call stack table 120 points back to the respective PC values in the PC value column 206 in the heap allocation site table 110. Further, the pointer(s) for the data structure type(s) in the pointer for data structure type column 210 corresponding to the respective PC value is located in the heap allocation site table 110. Since there exist a mapping between the PC value andcorresponding data structure type, the located pointer for the corresponding data structure type(s) may facilitate to find out the corresponding data structure type of the heap based on the PC value. Moreover, the data structure type found may be usedto generate the data centric view of the heap 122 as illustrated in FIG. 1C. FIG. 3 illustrates an exemplary computing device 300 operable for practicing various embodiments of the present invention. One of ordinary skill in the art will appreciate that the computing device 300 is intended to be illustrative and notlimiting of the present invention. The computing device 300 may take many forms, including but not limited to a workstation, server, network computer, quantum computer, optical computer, bio-computer, Internet appliance, mobile device, pager, tabletcomputer, and the like. The computing device 300 may be an electronic device and includes a processor 302, a memory 304, a storage 306, an input control 314, a modem 316, a network interface 318 and a display 320. The processor 302 may be configured for controllingeach component of the computing device 300 for generating the data centric view of the heap 122. The memory 304 may be configured for temporarily storing instructions and data. Further, the memory 304 may be configured for providing the storedinstructions and data to the processor 302 so that the processor 302 operates the computing device 300 to generate the data centric view of the heap 122 based on a data centric heap profiling module 311 featured in the compiler 104 and the debugger 112of the application 310. The storage 306 may include software tools needed for an application 310. The storage 306 includes, in particular, code for an operating system (OS) 308 of the computing device 300, code for the application 310 running on the OS 308 includingapplications for generating the data centric view of the heap 122, for example, the data centric heap profiling module 311, and data 312 for the data centric view of the heap 122. The input control 314 may interface with a keyboard 322, a mouse 324, and other input devices. The computing device 300 may receive, through the input control 314, input data for generating the data centric view of the heap 122. The computingdevice 300 may display user interfaces in the display 320 for users to generate and use the data centric view of the heap 122. In one embodiment, a system for generating the data centric view of the heap 122 may include the processor 302, and the memory 304 configured for temporarily storing a set of instructions for the data centric heap profiling module 311. The setof instructions, when executed by the processor 302, may cause the processor 302 to perform a method including generating a type table for data structure types in source code 102 using the compiler 104 of the computing device 300. The method may also include identifying each heap allocation site and a corresponding data structure type in the source code 102 using the compiler 104. The method may further include generating a data centric view of the heap 122 compiled fromthe source code 102 based on the each heap allocation site and the corresponding data structure type using a debugger of the computing device 300. In one embodiment, the debugger 112 may generate the data centric view of the heap 122 when a snapshot ofthe heap is requested during an execution of the application. FIG. 4 illustrates an exemplary network environment 400 operable for practicing various embodiments of the present invention. The network environment 400 may include a server 404 coupled to clients 406 and 408 via a network 402, for example, acommunication network. The server 404 and the clients 406 and 408 may be implemented using the computing device 300 depicted in FIG. 3. The network interface 318 and the modem 316 of the computing device 300 may enable the server 404 to communicate with the clients 406 and 408 through the network 402. The network 402 may include Internet, intranet, local area network, wide areanetwork, metropolitan area network, and the like. The communication facilities may support the distributed implementations of the present invention. In the network environment 400, the server 404 may provide the clients 406 and 408 with software components or products under a particular condition, such as a license agreement. The software components or products may include those forgenerating the data centric view of the heap 122. The server 404 may send the clients 406 and 408 the software components or products under a specific license agreement. FIG. 5 illustrates a process flow chart 500 for data centric heap profiling, according to one embodiment. In step 502, a type table for data structure types in source code is generated using a compiler of a computing device. In one embodiment,the source code may be written using a weakly typed language which includes C, C++, Pascal, Scripting language, and Python. The type table may include a data structure type and a size of the data structure type. In step 504, each heap allocation site and a corresponding data structure type is identified in the source code using the compiler. The identifying the each heap allocation site and the corresponding data structure type may include generating aheap allocation site table. The heap allocation site table may include a PC value, an allocation/de-allocation flag, and at least one pointer to at least one of the data structure types. Further, the identifying the each heap allocation site and thecorresponding data structure type may include generating a mapping between the each heap allocation site and the corresponding data structure type using at least one pointer. In one embodiment, the each heap allocation site and the corresponding data structure type may be identified based on an intra-procedural analysis if the corresponding data structure type returned at the each heap allocation site is a correctdata structure type. In another embodiment, the each heap allocation site and the corresponding data structure type may be identified based on an inter-procedural analysis if a pointer to void* is returned at the each heap allocation site, and thepointer is cast to a correct data structure type. The correct data structure type may be in an immediate caller of an allocating function associated with the each heap allocation site. Alternatively, the correct data structure type may be in a callerin a call graph signature beyond the immediate caller of the allocating function associated with the each heap allocation site. In step 506, a data centric view of a heap of an application compiled from the source code is generated based on the each heap allocation site and the corresponding data structure type using a debugger of the computing device when a snapshot ofthe heap is requested during an execution of the application. In one embodiment, the generating the data centric view of the heap may include generating a run-time heap allocation call stack table. The run-time heap allocation call stack table mayinclude an address allocated for the each heap allocation site, a size of the address, the allocation/de-allocation flag, and the PC value. In addition, the generating the data centric view of the heap may include mapping a call graph signature at the point of the each heap allocation site to the corresponding data structure type. The call graph signature may be a set of functionsalong a code path from the each heap allocation site to a main function. Further, the type table and the heap allocation site table may be written to a non-loadable section of binary/object files generated by the compiler. Moreover, in one exampleembodiment, a computer readable medium for the data centric heap profiling has instructions that, when executed by a computer, cause the computer to perform the method illustrated in FIG. 5. In various embodiments, the systems and methods described in FIGS. 1 through 5 may provide a technique to map contents of the heap to actual data structure types used by a programmer in a weakly typed language such as C, C++, Pascal, Scriptinglanguage, Python, and the like. Further, a compile time type may be associated with a run-time allocated memory block. Furthermore, a data centric view of a heap along with a code centric view may be provided to the programmer for debugging memoryissues like excessive heap allocation, or leaks. This may help in better program understanding and debuggability. In addition, the code centric and data centric view of the heap may be provided in terms of call graph paths and data structure types. Although the present embodiments have been described with reference to specific example embodiments, it will be evident that various modifications and changes may be made to these embodiments without departing from the broader spirit and scopeof the various embodiments. Furthermore, the various devices, modules, analyzers, generators, and the like described herein may be enabled and operated using hardware circuitry, for example, complementary metal oxide semiconductor based logic circuitry,firmware, software and/or any combination of hardware, firmware, and/or software embodied in a machine readable medium. For example, the various electrical structure and methods may be embodied using transistors, logic gates, and electrical circuits,such as application specific integrated circuit."
8|http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=58&p=2&f=G&l=50&d=PTXT&S1=(python.CLTX.+or+python.DCTX.)&OS=ACLM/python&RS=ACLM/python|Optimizing program by reusing execution result of subclass test function|A technique for optimizing a program by reusing an execution result of a subclass test function. It includes a reusability determining unit to determine reusability of code of a subclass test function based on whether access to a global memory includes only access for reading out type information specified in a function call, a profiling unit configured to store an execution result of code determined to be reusable and specified information in a storage device in association with actually accessed type information, a reuse processing unit configured to reuse, in response to detection of a function call for calling the code determined to be reusable, the execution result on condition that the pieces of specified information specified in the function calls match, and a monitoring unit configured to monitor the type information associated with the execution result and prohibit reuse of the execution result if the type information is changed.|"1. A method for optimizing a program, comprising: determining reusability of code called by a function call of a subclass test function included in an execution-targetprogram, on the basis of whether or not access to a global memory within said code includes only access for reading out type information specified in said function call and information traceable from said type information; storing an execution result ofcode determined to be reusable and specified information specified in said function call of said code in a storage device as profile information of said code, in association with type information actually accessed within said code; reading out, inresponse to detection of said function call of the subclass test function that calls the code determined to be reusable, the profile information of said code from said storage device, and reusing said execution result of said profile information providedthat the specified information of said profile information matches specified information specified in said detected function call; and monitoring said type information associated with said execution result included in said profile information stored insaid storage device, and prohibiting, in response to a change made to said type information, reuse of said execution result associated with said type information, wherein said prohibiting said reuse of the execution result includes deleting said profileinformation associated with said change made to said type information and inserting an instruction sequence that invalidates said reuse of said execution result, wherein a processor coupled to a memory device is configured to perform: the determining,the storing, the reading out and the monitoring. 2. The method according to claim 1, wherein said step of storing further stores a namespace used at run time as said profile information of said code determined to be reusable together with said execution result of said code, and said step ofreusing further confirms that said detected function call calls said code determined to be reusable by confirming that said namespace of the read out profile information matches a current namespace. 3. The method according to claim 2, wherein said step of reusing includes a step of generating, as compiled code, reuse code that reuses said execution result of said profile information, provided that the specified information specified insaid detected function call matches the specified information of said profile information. 4. The method according to claim 3, further comprising: accessing pre-registered manipulation code for changing type information, and inserting, into said pre-registered manipulation code, an instruction sequence for invalidating said reusecode that reuses said execution result provided that said type information associated with said reused execution result is changed, wherein said step of prohibiting is performed by execution of said instruction sequence. 5. The method according to claim 1, wherein said code of said subclass test function whose execution result is to be stored for the purpose of reuse is limited to code of a default subclass test function. 6. The method according to claim 5, further comprising: generating a listener that corresponds to a change event of said type information associated with said execution result stored as said profile information and that invalidates, in responseto occurrence of said change event, said profile information corresponding to said changed type information, wherein the step of prohibiting is performed by execution of said listener. 7. The method according to claim 5, further comprising: generating a listener that corresponds to a change event of said type information associated with said reused execution result and that invalidates, in response to occurrence of saidchange event, said reuse code that reuses said execution result, wherein said step of prohibiting is performed by execution of said listener. 8. The method according to claim 2, wherein, in said step of determining, all access instructions to said global memory from said code for which reusability is determined are retrieved, and it is statically determined that said code is reusableprovided that all of said retrieved access instructions are regarding access for reading out said type information specified in said function call of said subclass test function and said information traceable from said type information. 9. The method according to claim 2, wherein, in said step of determining, computer determination code is generated in which values of an object and said type information that are specified in said function call of said subclass test functionare propagated on said code for which reusability is determined, and it is dynamically determined that said code is reusable provided that all access made to said global memory during run time of said generated determination code is access for readingout said type information. 10. The method according to claim 2, further comprising: creating, for said code determined to be reusable, a template for collecting an address of type information accessed by execution of said code, wherein said profile information isgenerated using a result of execution of said template. 11. The method according to claim 2, wherein said execution-target program is bytecode generated by a Python interpreter from a source program written in Python. 12. A computer program product reusing an execution result of a subclass test function included in an execution-target program, the computer program product comprising: a non-transitory computer readable storage medium having computer readablenon-transient program code embodied therein, the computer readable program code comprising: computer readable program code configured to perform the steps of a method according to claim 1. 13. A computer program product reusing an execution result of a subclass test function included in an execution-target program, the computer program product comprising: a non-transitory computer readable storage medium having computer readablenon-transient program code embodied therein, the computer readable program code comprising: computer readable program code configured to perform the steps of a method according to claim 2. Description CROSS REFERENCE TO RELATED APPLICATION This application claims priority under 35 U.S.C. 119 from Japanese Application 2011-050998, filed Mar. 9, 2011, the entire contents of which are incorporated herein by reference.BACKGROUND OF THE INVENTION 1. Field of the Invention The present invention relates to techniques for reusing execution results of subclass test functions in execution environments of dynamic programming languages. More particularly, the present invention relates to a technique for optimizing aprogram by efficiently and securely reusing profiled execution results of subclass test functions. 2. Description of Related Art In object-oriented languages, subclass test functions for testing whether an object is an instance of a class or an instance of a subclass of a class are often used. As such subclass test functions, the ""instanceof"" operator in Java.RTM. programming language and the ""isinstance"" function in Python, for example, are known. These subclass test functions are used when different processes are performed for individual classes in normal operations and exception handling. The frequency in use of subclass test functions is high but the subclass test functions have a high check cost, which is a problem. Accordingly, regarding subclass test functions whose operations are uniquely decided by the languagespecifications, such as the ""instanceof"" operator in Java.RTM., optimization approaches for simply caching results of tests conducted in the past and using the cached test results have been hitherto adopted (see, for example, Japanese Unexamined PatentApplication Publication No. 2000-39997 and U.S. Pat. No. 7,266,813). In addition, several patent literatures disclose other techniques for checking types of objects. U.S. Pat. No. 7,080,354 discloses the following technique: A virtual dynamic type check (DTC) function is generated for each object at run time. The virtual DTC function contains a sequence of instructions to type-check every element within an object type hierarchy. The virtual DTC function conducts dynamic type checking more efficiently for objects of a particular type for which the virtual DTCfunction is tailored. U.S. Pat. No. 7,007,030 discloses, as a method for representing a dataset having a plurality of elements characterized by a plurality of relations, a technique for assigning an identifier and an interval to each of the plurality of elements. The interval represents at least one relation of the element to at least one element of the plurality of elements. Japanese Unexamined Patent Application Publication No. 2003-186675 discloses a technique for implementing, as an array of class references, a Java.RTM. class hierarchy which represents the hierarchical relationship of parent classes of aJava.RTM. class. The array of class references is used to efficiently perform type checking in Java.RTM. computing environments. U.S. Pat. No. 7,216,333 discloses a technique for tracking superclasses of a class by using a subclass fingerprint and tracking locally declared interfaces of the class by using an interface fingerprint.BRIEF SUMMARY OF THE INVENTION To overcome these deficiencies, the present invention provides a method for optimizing a program, including: determining reusability of code called by a function call of a subclass test function included in an execution-target program, on thebasis of whether or not access to a global memory within the code includes only access for reading out type information specified in the function call and information traceable from the type information; storing an execution result of code determined tobe reusable and specified information specified in the function call of the code in a storage device as profile information of the code, in association with type information actually accessed within the code; reading out, in response to detection of thefunction call of the subclass test function that calls the code determined to be reusable, the profile information of the code from the storage device, and reusing the execution result of the profile information provided that the specified information ofthe profile information matches specified information specified in the detected function call; and monitoring the type information associated with the execution result included in the profile information stored in the storage device, and prohibiting, inresponse to a change made to the type information, reuse of the execution result associated with the type information. According to another aspect, the present invention provides an optimization apparatus for optimizing a program by reusing an execution result of a subclass test function included in an execution-target program, the optimization apparatusincluding: a storage device; a reusability determining unit configured to determine reusability of code called by a function call of the subclass test function included in the execution-target program on the basis of whether or not access to a globalmemory within the code includes only access for reading out type information specified in the function call and information traceable from the type information; a profiling unit configured to store an execution result of code determined to be reusableand specified information specified in the function call of the code in a storage device as profile information of the code, in association with type information actually accessed within the code; a reuse processing unit configured to read out, inresponse to detection of a function call of a subclass test function that calls the code determined to be reusable, the profile information of the code from the storage device, and configured to reuse the execution result of the profile informationprovided that the specified information of the profile information matches specified information specified in the detected function call; and a monitoring unit configured to monitor the type information associated with the execution result included inthe profile information stored in the storage device, and configured to prohibit, in response to a change made to the type information, reuse of the execution result associated with the type information. BRIEF DESCRIPTION OF THE SEVERAL VIEWS OFTHE DRAWINGS FIG. 1 is a diagram illustrating a functional configuration of an optimization apparatus 100 according to an embodiment of the present invention. FIG. 2 is a diagram schematically illustrating a relation between bytecode CALL_FUNCTION and a subclass test function to be called. FIG. 3 is a diagram illustrating an example of a data structure of profile information. FIG. 4A is a diagram schematically illustrating a flow of a process of generating a listener corresponding to a change event of type information. FIG. 4B is a diagram schematically illustrating a flow of a process of invalidating profile information performed by the listener. FIG. 5A is a diagram schematically illustrating a flow of another process of generating a listener corresponding to a change event of type information. FIG. 5B is a diagram schematically illustrating a flow of a process of invalidating reuse code performed by the listener. FIG. 6 illustrates an example of an operation flow of a program execution process performed by the optimization apparatus 100 according to the embodiment of the present invention. FIG. 7 illustrates an example of an operation flow of a reusability determination process performed by a reusability determining unit 120. FIG. 8 illustrates an example of an operation flow of a profiling process performed by a profiling unit 130. FIG. 9 illustrates an example of an operation flow of a reuse process performed by a reuse processing unit 140. FIG. 10 illustrates an example of an operation flow of a monitoring process performed by a monitoring unit 145. FIG. 11 illustrates an example of a hardware configuration of a computer 50 according to an embodiment of the present invention. FIG. 12A illustrates an example of a first implementation method of the present invention. FIG. 12B illustrates an example of a second implementation method of the present invention. FIG. 12C illustrates an example of a third implementation method of the present invention.DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS Embodiments of the present invention will be described in detail below based on the drawings. The following embodiments are not intended to limit the invention defined by the claims, and not all of the combinations of features described in theembodiments are mandatory for the problem-solving means of the invention. The same elements are assigned the same reference numerals throughout the description of the embodiments. A technique for reusing test results of a subclass test function according to this invention is applied to dynamic programming languages, such as Python, in which bytecode for the subclass test function is absent and an entity of a calledfunction and a definition of a subclass of each class may dynamically change. Prior to the detailed description of the present invention, a description will be given for a mechanism how a subclass test function whose operation is not uniquely decided isexecuted by using, as an example, the ""isinstance"" function that is a subclass test function in Python. In Python, bytecode for a subclass test function is absent and operation of the subclass test function is defined by Python functions. Accordingly, a subclass test function is executed by a function call in Python. The following code is anexample of a sequence of bytecode instructions for calling ""isinstance (obj, clazz)"". LOAD_GLOBAL ""isinstance"" LOAD_FAST ""obj"" LOAD_FAST ""clazz"" CALL_FUNCTION The behavior of the ""isinstance"" function is decided by the following two factors: (1) A function to be called by a function call using a value of ""isinstance"". (2) A definition of a class hierarchy in ""clazz"". For each ""isinstance"" function included in Python source code, a program may change the factor globally or locally, and statically or dynamically. The default behavior of the ""isinstance"" function is provided by an interpreter system, such asCPython. The ""isinstance"" function is provided by a built-in C function, whereas the definition of the class hierarchy is provided by a C function. If a user newly defines an ""isinstance"" function in Python source code, the ""isinstance"" function may execute different algorithms every time it is executed. That is, the behavior of the ""isinstance"" function may be freely defined or changed atthe application level. The ""isinstance"" function calls a non-default function mainly in the following cases: Case 1: In the case that the ""isinstance"" function is replaced in a built-in dictionary of a system. Case 2: In the case that another ""isinstance"" function is defined in the current scope. Case 3: In the case that a class has a unique ""isinstance"" function. Regarding case 1, a built-in function may be replaced anytime at any position of the code at run time. A change caused by the replacement can be transparently seen from every code within the program. The following code represents an example ofcase 1. Numerals at the left end indicate line numbers. At line 5, replacement is instructed. As a result, a result of executing the ""isinstance"" function at line 6 is a result of executing the replacing ""isinstance"" function as shown at lines 7 and8. TABLE-US-00001 1 >>> import _builtin.sub.-- 2 >>> def f(self, cls): 3 ... print ""I am f"" 4 ... return False 5 >>>_builtin_.isinstance = f 6 >>> isinstance(""a"", basestring) 7 I am f 8 False Regarding case 2, an ""isinstance"" function unique to a module can be defined. The definition can be made statically in an ""a.py"" file and can be added, replaced, or deleted anytime at any position of the code at run time. Such a change can betransparently seen from every code within the program. The following code represents an example of case 2. Here, numerals at the left end also represent line numbers. Lines 1 to 6 show a definition made in the ""a.py"" file, whereas lines 7 to 16 showan execution result obtained when the ""a.py"" file is imported. At lines 10 and 11, the ""isinstance"" function defined in the ""a.py"" file is called. However, at line 14, the ""isinstance"" function is restored back to the default one. As a result, at line15, the default ""isinstance"" function is called. TABLE-US-00002 - a.py 1 def isinstance(self, cls): 2 print ""a isinstance"" 3 return False 4 class myclass(object): 5 def test(self, inst): 6 return isinstace(inst, myclass) - run 7 >>> import a 8 >>>a._dict_.keys( ) 9[`_builtins_`, `_file_`, `myclass`,`_name_`, `isinstance`, `_doc_`] 10 >>>o=a.myclass( ) 11 >>> o.test(o) 12 a isinstance 13 False 14 >>>a.isinstance=isinstance 15 >>> o.test(o) 16 True Regarding case 3, a user sets a special metaclass when defining a class, thereby being able to change the default algorithm of the ""isinstance"" function. More specifically, the user defines a metaclass ""_instancecheck_"", thereby being able toreplace the algorithm anytime at any position of the code at run time. Such a change can be transparently seen from the class and subclasses of the class. The following code represents an example of case 3. Here, numerals at the left end alsorepresent line numbers. Additionally, lines 1 to 12 show a definition made in a ""b.py"" file, whereas lines 13 to 28 show a result obtained by executing the ""b.py"" file. In this example, the default ""isinstance"" function is called. However, it shouldbe noted that the actual operation of the ""isinstance"" function is the operation defined by the user. The default ""isinstance"" function returns FALSE for ""isinstance (T1, T2)"" if T1 is not a subclass of T2. However, in the execution result of the""b.py"" file, the default ""isinstance"" function returns TRUE because of ""_instancecheck_"" defined by the user. TABLE-US-00003 - b.py 1 from abc import ABCMeta 2 class MyABC: 3 _metaclass.sub.-- = ABCMeta 4 @classmethod 5 def_instancecheck_(self, inst): 6 print""MyABC _instancecheck_"" 7 returnTrue 8 class MyClass(MyABC): 9 pass 10 class HisClass(object):11 pass 12 print isinstance(HisClass( ),MyClass) - Run python b.py 13 >>> import b 14 MyABC _instancecheck.sub.-- 15 True 16 >>> class MyXYZ(b.MyClass): 17 ... def f(self,inst): 18 ... print ""MyXYZ f"" 19 ... return True 20>>> o=MyXYZ( ) 21 >>> b.MyABC._instancecheck.sub.-- 22 <bound methodABCMeta._instancecheck.sub.-- of <class `b.MyABC`>> 23 >>>b.MyABC._instancecheck_=o.f 24 >>> b.MyABC._instancecheck.sub.-- 25 <boundmethod hoe.f of<_main_.hoe object at 0x200b0730>> 26 >>> isinstance(b.HisClass( ),b.MyClass) 27 MyXYZ f 28 True The present invention provides an optimization method for optimizing a program by reusing an execution result of a subclass test function. The optimization method can be applied to dynamic programming languages, for example Python, in whichbytecode for the subclass test function is absent and an entity of a called function and a definition of a subclass of each class may dynamically change. The optimization method includes a step of determining reusability of code of the subclass testfunction, a step of profiling an execution result of the code of the subclass test function determined to be reusable, a step of detecting a function call for calling the code determined to be reusable and of reusing the execution result for the functioncall on a certain condition, and a step of monitoring occurrence of a state in which reuse of the execution result is inappropriate and of prohibiting the reuse. There may be a plurality of concrete implementation methods for the optimization method including the foregoing four steps, such as: a first implementation method in which an interpreter performs profiling during run time of a program andjust-in-time (JIT) code compiled by a JIT compiler uses the profiled result; a second implementation method in which an interpreter caches and uses a profiled result during run time of a program; and a third implementation method in which JIT code havinga low optimization level profiles a test result and JIT code having a high optimization level uses the profiled result. Embodiments of the present invention will be described below in accordance with the first implementation method. FIG. 1 is a functional block diagram of an optimization apparatus 100 according to an embodiment of the present invention. The optimization apparatus 100 includes an execution environment (not illustrated) for executing an execution-targetprogram, which is bytecode that is generated from a source program written in a dynamic programming language and executed by a virtual machine. In the execution environment, the optimization apparatus 100 includes a storage device 105, an event creatingunit 110, a reusability determining unit 120, a profiling unit 130, a reuse processing unit 140, and a monitoring unit 145. Meanwhile, the description will be given below based on an assumption that the execution-target program is bytecode generated bya Python interpreter from a source program written in Python. The storage device 105 includes an analysis result database (DB) 115, a profile DB 125, and a reuse code DB 135. The analysis result DB 115 stores results of analysis made on code of a subclass test function by the reusability determining unit120. The profile DB 125 stores results of profiling made on the subclass test function by the profiling unit 130. The reuse code DB 135 stores compiled code, which uses the execution result of the subclass test function and is generated by the reuseprocessing unit 140. Details about information stored in each DB will be described later in association with the corresponding component described below. In response to the fact that bytecode to be executed next in the execution-target program is a function call of a subclass test function, the event creating unit 110 creates event information, which includes a function pointer pointing to codecalled by the function call and specified information specified in the function call. Here, the specified information specified in the function call of the subclass test function indicates input parameters in the function call, e.g., information thatspecifies an object and a type (class) that are subjected to the test. Meanwhile, the event information created by the event creating unit 110 may further include counter information. The event creating unit 110 increments the counter of thecorresponding event information by one when the same subclass test function as the subclass test function for which the event information has been already created is called using the same input parameters. FIG. 2 illustrates an example of a relation between a function call in Python bytecode and code to be called by the function call. As described above, the subclass test function ""isinstance(obj, clazz)"" in Python source code is converted intothe following sequence of bytecode instructions including the function call (CALL_FUNCTION) by a Python interpreter: LOAD_GLOBAL ""isinstance"" LOAD_FAST ""obj"" LOAD_FAST ""clazz"" CALL_FUNCTION As illustrated in FIG. 2, the function call actually calls code (shown as subroutines in FIG. 2) serving as an entity of the subclass test function via a subtype test wrapper. The reusability determining unit 120 determines reusability of the code called by the function call of the subclass test function included in the execution-target program. This is done on the basis of whether or not access to a global memorywithin the code includes only access for reading out type information specified in the function call of the subclass test function and information traceable from the type information. Here, the information traceable from the type information specifiedin the function call of the subclass test function is information pointed to by a pointer of a class object serving as the type information and is, for example, an object of a parent class. Additionally, the global memory indicates a memory area, achange made in which can be referred to even after the program exits from an execution unit such as a function that has made the change, and includes, for example, an object heap and global variables. Meanwhile, the reusability determining unit 120 mayperform the aforementioned process in response to the process performed by the event creating unit 110 on condition that the counter of the event information is equal to or greater than a preset value. As described above, since the type information is unlikely to change at run time, the reuse of execution results that are highly likely to be invalidated in the future can be eliminated by determining that execution results of the subclass testfunction are reusable on the condition that only access for reading out type information is performed as access to global information. Additionally, according to the foregoing condition, subclass test functions that perform write access to the globalmemory are excluded from reuse targets. In the case where a value written in the global memory within a subclass test function is referred to by another thread, the other thread may possibly read out an incorrect value if the subclass test function isno longer executed as a result of reusing the execution result. Accordingly, it is possible to avoid a situation where the entire program improperly operates, by excluding subclass test functions that may possibly cause such side effects from the reusetargets. The aforementioned determination performed by the reusability determining unit 120 can be, for example, statically performed in the following manner: Specifically, the reusability determining unit 120 may retrieve all access instructions to theglobal memory from code for which reusability is determined. The reusability determining unit 120 may determine that the code is reusable on condition that all of the retrieved access instructions are regarding access for reading out the typeinformation specified in the function call of the subclass test function and the information traceable from the type information. Instead of the aforementioned static determination method, the reusability determining unit 120 may generate determination code in which values of the object and type information specified in the function call of the subclass test function arepropagated on the code for which the reusability is determined. The reusability determining unit 120 may determine that the code is reusable on the condition that all access made to the global memory during run time of the generated determination codeis access for reading out type information. Here, the determination code is preferably generated on the condition that it is determined that, by profiling statistics of pairs of the object and the type information specified in the function call of the subclass test function, a set of thepairs is not so large and an effect of caching is expected. Determination code having fixed values is generated for each pair. On the condition that it is confirmed, for all the generated determination code, that all access made to the global memoryduring run time is access for reading out type information, the code of the subclass test function is preferably determined to be reusable. Additionally, the reusability determining unit 120 preferably creates, for the code of the subclass test function determined to be reusable, a template for collecting an address of the type information accessed by execution of the code. Thetemplate is executed and used by the profiling unit 130 to be described later. For example, the template may be created by inserting the following ""instrument"" code into the aforementioned determination code. Such ""instrument"" code may be code forcollecting an address of the memory that actually stores the type information to be read by the determination code, and storing the collected address in a predetermined area (for example, a predetermined field--hereinafter, referred to as""TypeInfoReadSet"" field--of the template serving as an object). Meanwhile, the predetermined area (for example, ""TypeInfoReadSet"" field) is set empty at the time of creation of the template. Upon determining that the code called by the function call of the subclass test function is reusable, the reusability determining unit 120 stores, in the analysis result DB 115, the created template and the event information for the functioncall created by the event creating unit 110. The reusability determining unit 120 may also indicate that the code is reusable by attaching a mark to the code object determined to be reusable, such as by adding one field to the code object and setting apointer pointing to the template in the added field. The profiling unit 130 stores, in the profile DB 125, the execution result of the code of the subclass test function determined to be reusable by the reusability determining unit 120 and the specified information specified in the function callof the code as profile information of the code, in association with the type information actually accessed within the code. Here, the execution result of the code is boolean type information indicating whether or not the test-target object specified inthe function call of the subclass test function is an instance of the class specified in the function call or an instance of a subclass of the class. Whether or not the code is determined to be reusable is identified based on the mark attached to thecode by the reusability determining unit 120. In addition, as described above, the profiling unit 130 may collect the type information actually accessed within the code of the subclass test function by executing the template created by the reusability determining unit 120. Specifically, inresponse to execution of the code of the subclass test function determined to be reusable, the profiling unit 130 may read out the corresponding event information and template from the analysis result DB 115 by using the function pointer pointing to thecode as a key. The profiling unit 130 then may execute the read out template and obtain an address of the actually accessed type information from the ""TypeInfoReadSet"" field. The read out corresponding event information and the obtained address of thetype information are stored in the profile DB 125 for processes performed by the monitoring unit 145 and the reuse processing unit 140 to be described later. Also, the profiling unit 130 preferably stores a namespace used during run time of the code as the profile information in the profile DB 125 together with the execution result of the code of the subclass test function. This is done in order tomake it possible to confirm that the code called by the function call of the subclass test function does not differ between the time of profiling and the time of reuse of the execution result. It is done by using the namespace when the execution resultis reused since bytecode for a subclass test function is absent and an entity of a called function may dynamically change in dynamic programming languages subjected to the present invention. It is considered that, in Python, a namespace is a dictionary that returns a corresponding object when a name of the object is specified as a key. The namespace is uniquely decided for the entire object including the function call (the uniquelydecided dictionary is referred to as a current dictionary). On the other hand, when the algorithm of the called function is changed or a new object having the same name is defined, the current dictionary is replaced by another dictionary or the contentof the dictionary changes. Accordingly, it is possible to confirm that the code called by the function call of the subclass test function is the same by confirming that the namespace at the time of profiling matches the namespace at the time of reuse ofthe execution result. Meanwhile, the subclass test function is rarely replaced in the built-in dictionary of the system. Accordingly, it may be roughly guaranteed that the called code does not differ between the time of profiling and the time of reuse of theexecution result. This is done by limiting the code of the subclass test function whose execution result is to be stored for the purpose of reuse to code of the default subclass test function built in the system. In this case, a pointer of default codeis previously obtained. At the time of reuse, it is determined that a pointer of code supposed to be called when the execution result is not reused matches the previously obtained pointer. Obviously, the protection mechanism using the namespace is notlimitedly applied to Python but is applicable to other dynamic programming languages that adopt rules similar to those of Python regarding the namespace. FIG. 3 illustrates an example of the profile information stored in the storage device 105 by the profiling unit 130. In FIG. 3, bytecode 300 includes a function call 305. The function call 305 calls code of a subclass test function 310. Aprofile repository 320 indicates an area in the storage device 105 that stores the profile information and corresponds to the profile DB 125 illustrated in FIG. 1. A profile 325 is a set of pieces of profile information for the subclass test function310, and includes a pointer PC 330 pointing to the subclass test function 310 and pieces of profile information 335 and 340 obtained when the code is called with different input parameters. Each profile information includes corresponding eventinformation E, a namespace N, a set R of addresses of type information actually accessed during run time, and an execution result L. In response to detection of a function call of the subclass test function calling code determined to be reusable, the reuse processing unit 140 reads out the corresponding profile information from the profile DB 125. On the condition thatspecified information specified in the detected function call matches the specified information of the profile information, the reuse processing unit 140 reuses the execution result of the profile information. The detection of the function call of thecode determined to be reusable may be performed by confirming that the corresponding profile information exists in the profile DB 125 by using the function pointer as a key. Preferably, the reuse processing unit 140 guarantees that the detected functioncall calls the code determined to be reusable by confirming that the namespace at the time of generation of the profile information matches the namespace at the time of reuse. In this embodiment based on the first implementation method in which JIT code reuses the profiled result, the execution result is used in compiled code. Specifically, the reuse processing unit 140 generates reuse code that reuses the executionresult included in the profile information, on condition that the specified information specified in the current function call matches the specified information included in the profile information. The generated reuse code is stored in the reuse code DB135 in order to be executed by the optimization apparatus 100. An example of the reuse code generated by the reuse processing unit 140 is illustrated below. In this example, the execution result is used on condition that corresponding pieces of specified information specified in the function calls, i.e.,objects and pieces of type information match and on the condition that corresponding namespaces match. Meanwhile, ""cacheForThisCode.fwdarw.count"" indicates the number of entries of the profile information of the code called by the detected functioncall. TABLE-US-00004 for(i=0; i < cacheForThisCode->count; i++) { if(match(cacheForThisCode->entry[i].nameSpace,currentNameSpace)&& cacheForThisCode->entry[i].obj == obj && cacheForThisCode->entry[i].objType == objType){result=cacheForThisCode->entry[i].result; break; } } If the above-illustrated reuse code includes no matching entry of the profile information, an instruction for calling the subclass test function may be added. Also, efficiency may be increased by stopping using the loop and the reference toelements of the array in the code. Additionally, when an argument is determined to be a constant in the code (for example, a class argument is a constant), a compiler may appropriately propagate such information in the code to make the reuse code moreefficient. It is also possible to speed up the matching check by performing a comparison of identifiers of the namespaces and an invariance check using a technique for assuming that content of the namespaces is invariant. The monitoring unit 145 monitors the type information associated with the execution result included in the profile information stored in the profile DB 125. In response to a change made to the type information, the monitoring unit 145 prohibitsreuse of the execution result associated with the type information. Here, prohibition of reuse of the execution result includes at least one of deletion of the profile information associated with the changed type information or a set of pieces ofprofile information of each code including the profile information, and deletion of reuse code that reuses the execution result associated with the changed type information. There may be some concrete implementation methods of the monitoring unit 145. Here, the description will be sequentially given for a first implementation method for inserting code functioning as the monitoring unit 145 into code for changingmonitoring-target type information and a second implementation method for using a listener corresponding to a change event for the change of the monitoring-target type information. In the first implementation method, the reuse processing unit 140 accesses manipulation code for changing type information, in response to reuse of the execution result. On the condition that the type information associated with the reusedexecution result is changed, the reuse processing unit 140 inserts, into the manipulation code, an instruction sequence for invalidating the reuse code that reuses the execution result. The monitoring unit 145 is realized by execution of the aboveinstruction sequence in response to execution of the manipulation code. Here, the manipulation code for changing type information may be implementation code of an interpreter or may be JIT code compiled by a JIT compiler. Meanwhile, since manipulationcode for changing type information is limited and known in a Python interpreter, a list of such manipulation code is previously created and the list is referred to when the invalidation instruction sequence is inserted. An example of a type-information changing portion of the manipulation code and the instruction sequence to be inserted into the manipulation code is illustrated below. Meanwhile, suppose that the profile information of the reused executionresult includes, as the type information accessed during run time, a pointer pointing to a ""parents"" field of ""A. class object"" and a pointer pointing to the reuse code that reuses the execution result. Also, suppose that these two pieces of pointerinformation are obtained by the ""getNextTypeInfoReadSet( )"" function. The to-be-inserted instruction sequence is inserted in front of or behind the instruction for changing the monitoring-target type information. TABLE-US-00005 A. Class Object struct class_object{ header_t header; list_t parents; ... } B. Type-information Changing Portion of Manipulation Code t->parents= p C. To-be-inserted Instruction Sequence while(s= getNextTypeInfoReadSet( )){if(s->ptr == &t-;>parents){ Invalidate(s->JITcode); } } In the second implementation method, the monitoring unit 145 is realized as a listener corresponding to a change event of the type information associated with the execution result stored as the profile information. The listener is generatedwhen the profile information is generated by the profiling unit 130, includes a pointer to the corresponding profile information, and is registered in all class objects indicated by the actually accessed type information included in the correspondingprofile information. Upon receiving a notification of the type-information change event from any one of the class objects, the listener invalidates the corresponding profile information using the pointer. FIG. 4A illustrates an overview of a process in which a listener is generated by the profiling unit 130 and the listener is registered in a corresponding class object. Meanwhile, in FIG. 4A, the profiling unit 130 and the profile DB 125 areillustrated as a profiler 415 and a profile repository 420, respectively. In an embodiment, the process occurs as follows: 1. A function call 405 included in bytecode 400 calls a subclass test function 410; 2. The profiler 415 detects the function call of the subclass test function 410; 3. The profiler 415 stores the execution result of the subclass test function 410 in the profile repository 420 as profile information 440; 4. The profiler 415 generates a second listener 450, which is a listener regarding the profile information 440 and has a pointer to the profile information 440; and 5. The profiler 415 registers the second listener 450 in a class object 460 indicated by the actually accessed type information included in the profile information 440. Similarly, a first listener 445 illustrated in FIG. 4A is a listenercorresponding to a change event for a class object 455 and has a pointer to profile information 435. FIG. 4B illustrates an overview of a process in which the generated listener is notified of the change event from the corresponding class object and invalidates the corresponding profile information. Meanwhile, in FIG. 4B, the same componentsas those illustrated in FIG. 4A are assigned the same numerals. In an embodiment, the process occurs as follows: 1. A change is made to the class object 455; 2. The first listener 445 receives a notification of occurrence of the change event from the class object 455; and 3. The first listener 445 deletes the corresponding profile information 435 from the profile repository 420 using the pointer to the corresponding profile information 435 included therein to invalidate the profile information 435, and deletesitself (the first listener 445). At this time, the first listener 445 may invalidate all of other pieces of profile information 440 for the same code and the second listener 450 associated with the profile information 440. Additionally, in the second implementation method, the monitoring unit 145 is realized also as a listener corresponding to a change event of type information associated with the reused execution result. The listener is generated when the reuseprocessing unit 140 reuses the execution result, includes a pointer to reuse code that reuses the corresponding execution result, and is registered in all class objects indicated by the actually accessed type information included in the correspondingprofile information. Upon receiving a notification of the type-information change event from any one of the class objects, the listener invalidates the corresponding reuse code using the pointer. FIG. 5A illustrates an overview of a process in which a listener is generated by the reuse processing unit 140 and is registered in a corresponding class object. Meanwhile, compiled code 500 illustrated in FIG. 5A is the function call 405illustrated in FIG. 4A that has been optimized using a profile 425. Since the profile 425 includes the pieces of profile information 435 and 440 which are execution results of the function call 405 for two pairs of the input parameters, the compiledcode 500 is written such that type information specified in the detected (current) function call 405 is compared with each of the two pairs of input parameters and the execution result included in the profile information for the matching type informationis used. In an embodiment, the process occurs as follows: 1. The reuse processing unit 140 generates the compiled code 500 using the profile information 440 illustrated in FIG. 4A; 2. The reuse processing unit 140 generates a fourth listener 540 which is a listener regarding the compiled code 500 and has a pointer to the compiled code 500; and 3. The fourth listener 540 is registered in a class object 545 indicated by the actually accessed type information included in the profile information 440. Similarly, a third listener 525 illustrated in FIG. 5A is a listener that is registeredin a class object 530 indicated by other actually accessed type information included in the profile information 435 and has a pointer to the compiled code 500. FIG. 5B illustrates an overview of a process in which the generated listener receives a notification of the change event from the corresponding class object and invalidates the corresponding compiled code. Meanwhile, in FIG. 5B, the samecomponents as those illustrated in FIG. 5A are assigned the same numerals. In an embodiment, the process occurs as follows: 1. A change is made to the class object 530; 2. The third listener 525 receives a notification of occurrence of the change event from the class object 530; and 3. The third listener 525 invalidates the entire compiled code 500 using the pointer to the corresponding compiled code 500 included therein. Additionally, the third listener 525 can delete itself (the third listener 525) and the fourthlistener 540 associated thereto. Next, operations of the optimization apparatus 100 according to the embodiment of the present invention will be described with reference to FIG. 6 through FIG. 10. FIG. 6 is a flowchart illustrating an example of the flow of a program executionprocess performed by the optimization apparatus 100. FIG. 7 is a flowchart illustrating an example of the flow of a reusability determination process in step S624 of the flowchart illustrated in FIG. 6. FIG. 8 is a flowchart illustrating an example ofthe flow of a profiling process in step S630 of the flowchart illustrated in FIG. 6. Meanwhile, in the embodiment of the present invention based on the first implementation method, the program execution process illustrated in FIG. 6 is executed by aninterpreter. Additionally, the reusability determination process illustrated in FIG. 7 is executed by a reusability determining module (corresponding to the reusability determining unit 120) called by the interpreter, whereas the profiling processillustrated in FIG. 8 is executed by a profiling module (corresponding to the profiling unit 130) called by the interpreter. In addition, FIG. 9 is a flowchart illustrating an example of the flow of a compile process performed by the optimization apparatus 100. FIG. 10 is a flowchart illustrating an example of the flow of a monitoring process performed by theoptimization apparatus 100. Meanwhile, in the embodiment of the present invention based on the first implementation method, the compile process illustrated in FIG. 9 is executed by a JIT compiler. Additionally, the monitoring process illustrated inFIG. 10 is executed by the interpreter when type information is changed by the interpreter or is executed by JIT code when type information is changed by the JIT code. The program execution process illustrated in FIG. 6 starts from step S600 and the optimization apparatus 100 fetches bytecode B to be executed next from an execution-target program. The optimization apparatus 100 then determines whether or notthe bytecode B to be executed next exists (step S602). If the bytecode B to be executed next does not exist (NO in step S602), the process ends. On the other hand, if the bytecode B to be executed next exists (YES in step S602), the optimizationapparatus 100 determines whether or not the bytecode B is the CALL_FUNCTION instruction (step S604). If the bytecode B is the CALL_FUNCTION instruction (YES in step S604), the optimization apparatus 100 obtains a target function F to be called by the CALL_FUNCTION instruction (step S606), and determines whether or not the function F is thesubtype test wrapper (step S608). If the function F is the subtype test wrapper (YES in step S608), the optimization apparatus 100 creates an event E (step S612). Meanwhile, the event E is information constituted by a function pointer of code C of thesubclass test function called by the CALL_FUNCTION instruction via the subtype test wrapper and a pair of arguments specified for the CALL_FUNCTION instruction. The optimization apparatus 100 then profiles the frequency of the event E (step S614), and determines whether or not profile information regarding the frequency of the event E already exists (step S616). The profile information regarding thefrequency of the event E may be stored in the storage device 105 of the optimization apparatus 100. If the profile information of the event E does not exist in the storage device 105 (NO in step S616), the optimization apparatus 100 creates the profileinformation regarding the frequency of the event E, and stores the profile information in the storage device 105 (step S620). On the other hand, if the profile information of the event E already exists in the storage device 105 (YES in step S616), theoptimization apparatus 100 updates the frequency information of the event E stored in the storage device 105 (step 618). A series of processing steps from step S614 to step S620 enclosed by a rectangle 640 may be optional and may be appropriatelyperformed as needed, such as when optimization is desired for the frequently executed code. Subsequently, the optimization apparatus 100 determines whether or not the event E exists in the analysis result DB 115 (step S622). If the event E does not exist in the analysis result DB 115 (NO in step S622), the optimization apparatus 100determines reusability of the code C of the subclass test function called by the bytecode B (step S624). Details about the reusability determination process will be described later with reference to FIG. 7. The optimization apparatus 100 thendetermines whether or not the result of the reusability determination process indicates that the execution result is reusable (step S626). If the determination result indicating that the execution result is not reusable is obtained for the code C of thesubclass test function (NO in step S626), if the bytecode B is not the CALL_FUNCTION instruction in step S604, or if the function F is not the subtype test wrapper in step S608, the process proceeds to step S610 and the optimization apparatus 100executes the bytecode B. The process then returns to step S600 and the optimization apparatus 100 repeats the series of processing steps. On the other hand, the determination result indicating that the execution result is reusable is obtained for the code C of the subclass test function in step S626 or if the event E exists in the analysis result DB 115 in step S622, the processproceeds to step S628 and the optimization apparatus 100 executes the bytecode B. In parallel to or after execution of this step, the optimization apparatus 100 profiles the execution result of the code C of the subclass test function called by thebytecode B (step S630). Details about the profiling process will be described later with reference to FIG. 8. The process then returns to step S600 and the optimization apparatus 100 repeats the series of processing steps. The reusability determination process illustrated in FIG. 7 performed by the reusability determining unit 120 starts from step S700 and the reusability determining unit 120 reads out information of the event E, i.e., the function pointer andvalues of the pair of arguments, from the storage device 105, and creates determination code S by propagating the values of the pair of arguments on the code C of the subclass test function. If the frequency information of the event E is stored in thestorage device 105, the reusability determining unit 120 may perform the following processing on the event E having the frequency information equal to or greater than a certain level. Subsequently, the reusability determining unit 120 executes the determination code S, and determines whether or not write access is made to the global memory during run time (step S702) and whether or not only type information is read out as theglobal information (step S704). If the access to the global memory is not constituted only by access for reading out the type information (YES in step S702 or NO in step S704), the reusability determining unit 120 generates a determination result forprohibiting the reuse (step S712). The process then ends. On the other hand, if the access to the global memory is constituted only by access for reading out type information (NO in step S702 and YES in step S704), the reusability determining unit 120 collects addresses of type information accessedduring run time of the code C of the subclass test function, and creates the template T that stores the collected information in the ""TypeInfoReadSet"" field thereof (step S706). The reusability determining unit 120 then stores the created template T andthe event E in the analysis result DB 115 (step S708), and generates a determination result for permitting the reuse (step S710). The process then ends. The profiling process illustrated in FIG. 8 performed by the profiling unit 130 starts from step S800 and the profiling unit 130 determines whether or not profile information corresponding to the event E exists in the profile DB 125. If theprofile information corresponding to the event E already exists in the profile DB 125 (YES in step S800), the process ends. On the other hand, if the profile information corresponding to the event E does not yet exist in the profile DB 125 (NO in step S800), the profiling unit 130 obtains the execution result L of the bytecode B (step S802) and the namespace N (stepS804). The profiling unit 130 also obtains the event E and the template T from the analysis result DB 115 using the function pointer used by the bytecode B to make a function call as a key (step S806). The profiling unit 130 then executes the obtainedtemplate T, and obtains the set R of addresses of type information accessed during run time from the ""TypeInfoReadSet"" field of the template T (step S808). Subsequently, the profiling unit 130 attaches, to the bytecode B, a mark indicating that the execution result is reusable (step S810), and stores the event E, the namespace N, the set R of addresses of type information, and the execution resultL in the profile DB 125 as the profile information of the bytecode B (step S812). The process then ends. The compile process illustrated in FIG. 9 starts from step S900 and the optimization apparatus 100 fetches the bytecode B to be executed next from the execution-target program. The optimization apparatus 100 then determines whether or notunprocessed bytecode B exists (step S902). If the unprocessed bytecode B does not exist (NO in step S902), the process ends. On the other hand, if the unprocessed bytecode B exists (YES in step S902), the optimization apparatus 100 determines whetheror not the profile information corresponding to the bytecode B exists in the profile DB 125 (step S904). Such determination is made by confirming that the bytecode B is the CALL_FUNCTION instruction for calling the code C of the subclass test functionand that the profile information of the code C of the subclass test function can be retrieved from the profile DB 125 using the function pointer for use in the function call as a key. If the corresponding profile information does not exist in the profile DB 125 in step S904, the optimization apparatus 100 compiles the bytecode B on the bases of the related art to optimize the bytecode B (step S906). The process then returnsto step S900 and the optimization apparatus 100 repeats the series of processing steps. On the other hand, if the corresponding profile information exists in the profile DB 125 in step S904, the optimization apparatus 100 reads out, from the profile DB125, all pieces of profile information corresponding to the bytecode B, i.e., all sets of pieces of profile information (E, N, R, and L) regarding the code C of the subclass test function called by the bytecode B (step S908). Subsequently, the optimization apparatus 100 performs, for each of the read out sets of pieces of profile information (E, N, R, and L), generation of reuse code J (step S910) and generation and insertion of monitoring code D (step S912). Morespecifically, in step S910, the optimization apparatus 100 generates, as compiled code of the bytecode B that calls the subclass test function, the reuse code J that reuses the execution result L included in the profile information, on the condition thatvalues of a pair of arguments specified in the current function call of the subclass test function match values of the pair of arguments included in the event E of the profile information and that the current namespace matches the namespace N of theprofile information. Additionally, step S912 is executed for each address A included in the set R of addresses of type information of the profile information. The optimization apparatus 100 accesses manipulation code M that may change a value of a memory at theaddress A, and inserts an instruction sequence for invalidating the reuse code J in front of or behind a code changing portion of the manipulation code M on condition that the address of the memory where the change has been made is the address A. Afterthe processing in step S910 and step S912 is performed for all of the sets of pieces of profile information (E, N, R, and L), the process then returns to step S900 and the optimization apparatus 100 repeats the series of processing steps. Meanwhile, inthe embodiment of the present invention based on the first implementation method, steps enclosed by a rectangle 920 in FIG. 9 are performed by a reuse processing module (corresponding to the reuse processing unit 140) called by the JIT compiler. The monitoring process illustrated in FIG. 10 performed by the monitoring unit 145 is started once the code changing portion of the manipulation code M including the one or more pieces of monitoring code D inserted in step S912 of FIG. 9 isexecuted to change the memory at an address Y. The monitoring unit 145 determines, for each piece of monitoring code D inserted into the manipulation code M, whether or not the address Y matches the address A (step S1000). There are as many pieces ofmonitoring code D as the number of pieces of type information accessed during run time of the code C of the subclass test function, and the individual pieces of monitoring code D monitor changes made to different pieces of type information. Accordingly,it should be noted that the pieces of monitoring code D are associated with the addresses A of different pieces of type information. If it is determined that, for any one of the pieces of monitoring code D, the address Y matches the address A in step S1000, the monitoring unit 145 invalidates the corresponding reuse code J by deleting the reuse code J (step S1002). Themonitoring unit 145 then terminates the process and the process returns to the original process performed on the manipulation code M. On the other hand, if it is determined in step S1000 that the address Y does not match the address A, the monitoringunit 145 then determines whether or not the unprocessed monitoring code D exists (step S1004). If the unprocessed monitoring code D exists (YES in step S1004), the process returns to step S1000 and the monitoring unit 145 repeats the series ofprocessing steps. On the other hand, if the unprocessed monitoring code D does not exist (NO in step S1004), the monitoring unit 145 terminates the process and the process returns to the original process performed on the manipulation code M. FIG. 11 is a diagram illustrating an example of a hardware configuration of a computer 50 according to an embodiment. The computer 50 includes a main central processing unit (CPU) 1 and a main memory 4 that are connected to a bus 2. Removablestorage (external storage system in which recording media are replaceable), such as hard disk drives 13 and 30, CD-ROM drives 26 and 29, a flexible disk drive 20, an MO drive 28, and a DVD drive 31, is connected to the bus 2 via a flexible diskcontroller 19, an IDE controller 25, a SCSI controller 27, and so forth. A storage medium, such as a flexible disk, an MO, a CD-ROM, or a DVD-ROM, is inserted into the removable storage. On such a storage medium, the hard disk drives 13 and 30, and a ROM 14, code of a computer program, which operates in cooperationwith the operating system to give instructions to the CPU or the like and carries out the present invention, can be recorded. Specifically, on the various storage devices described above, a program for providing an execution environment for executing anexecution-target program, which is generated from a source program written in a dynamic programming language and is bytecode to be executed by a virtual machine, can be recorded. More specifically, on the various storage devices described above,interpreters such as CPython, various libraries, such as SSL and zlib, used by interpreters, JIT compilers, and JIT code generated by the JIT compilers can be recorded. In addition, an optimization program that is installed into the computer 50 and causes the computer 50 to function as the optimization apparatus 100 can be recorded on the various storage devices described above. The optimization programincludes an event creating module, a reusability determining module, a profiling module, a reuse processing module, and a monitoring module. These modules control the CPU 1 or the like to cause the computer 50 to function as the event creating unit 110,the reusability determining unit 120, the profiling unit 130, the reuse processing unit 140, and the monitoring unit 145. The computer program may be compressed or divided into a plurality of portions, and may be recorded on a plurality of media. The computer 50 receives input from input devices, such as a keyboard 6 and a mouse 7, via a keyboard-mouse controller 5. The computer 50 receives input from a microphone 24 and outputs sound from a speaker 23 via an audio controller 21. Thecomputer 50 is connected to a display device 11 via a graphics controller 10 in order to present visual data to a user. The computer 50 is connected to a network via a network adaptor card 18 (such as an Ethernet card or a token-ring card) and canperform communication with other computers or the like. It should be easily understood from the above description that the computer 50 according to the embodiment is realized by an information processing apparatus such as an ordinary personal computer, a workstation, or a mainframe, or a combinationthereof. Meanwhile, the above-described components are merely illustrative and all of the components are not necessarily mandatory to the present invention. While the present invention has been described above using the embodiments, the technical scope of the present invention is not limited to the scope described in the foregoing embodiments. It is obvious to those skilled in the art that variouschanges and improvements can be made to the foregoing embodiments. For example, the foregoing embodiments of the present invention have been described based on the first implementation method in which an interpreter performs profiling during run time ofa program and JIT code compiled by a JIT compiler uses the profiled result. However, the present invention can be implemented based on the second implementation method in which an interpreter caches and uses the profiled result during run time of aprogram and the third implementation method in which JIT code having a low optimization level profiles test results and JIT code having a high optimization level uses the profiled results. The present invention can be embodied in a computer program product reusing an execution result of a subclass test function included in an execution-target program. The computer program product includes a computer readable storage medium havingcomputer readable non-transient program code embodied therein, and configured to perform the steps of the method of the invention. FIG. 12A is a diagram illustrating a relation of modules 1212 to 1218 constituting a reuse program, a JIT compiler 1206, an interpreter 1208, and JIT code 1210 in the first implementation method. Also illustrated are the hardware 1200, theoperating system 1202, and the library 1204. In the first implementation method, the reusability determining module 1214 and the profiling module 1216 are called by the interpreter 1208 that is executing an execution-target program. Additionally, thereuse processing module 1212 is called by the JIT compiler when the execution-target program is compiled. Furthermore, the monitoring module 1218 is called by the interpreter 1208 if type information is changed by the interpreter 1208 or is called bythe JIT code 1210 if the type information is changed by the JIT code 1210. FIG. 12B is a diagram illustrating a relation of modules 1214 to 1220 constituting a reuse program, a JIT compiler 1206, an interpreter 1208, and JIT code 1210 in the second implementation method. Also illustrated are the hardware 1200, theoperating system 1202, and the library 1204. The second implementation method differs from the first implementation method in that the reuse processing module 1220 is called by the interpreter 1208 that is executing the execution-target program. Meanwhile, the reuse processing module 1220 in the second implementation method, unlike the reuse processing module 1212 illustrated in FIG. 12A corresponding to the above-described reuse processing unit 140, does not generate reuse code but provides theinterpreter 1208 with a function for directly reusing execution results on condition that namespaces matches and values of pairs of arguments match. FIG. 12C is a diagram illustrating a relation of modules 1212, 1218, 1222, and 1224 constituting a reuse program, a JIT compiler 1206, an interpreter 1208, and JIT code 1210 in the third implementation method. Also illustrated are the hardware1200, the operating system 1202, and the library 1204. The third implementation method differs from the first implementation method in that the reusability determining module 1222 and the profiling module 1224 are called by the JIT code 1210. Meanwhile, in the third implementation method, before calling the reuse processing module 1212 and generating JIT code having a high optimization level, the JIT compiler 1206 calls a new module not illustrated in FIG. 12C and generates, as JIT codehaving a low optimization level, the JIT code 1210 for calling the reusability determining module 1222 and the profiling module 1224. As described above, embodiments obtained by making changes and improvements in the above-described embodiments areobviously included in the technical scope of the present invention. It should be noted that, regarding the execution order of processes such as operations, procedures, steps, and stages in the apparatuses, the systems, the programs, and the methods described in the claims, the description, and the drawings,expression such as ""before"" and ""prior to"" is not explicitly given, and the apparatuses, the systems, the programs, and the methods can be implemented in any order unless the output of a preceding process is used by a following process. It should alsobe noted that, even when the output of the preceding process is used in the following process, another process may be inserted between the preceding process and the following process or that, even when the description is given such that another processmay be inserted between the preceding process and the following process, the configuration can also be changed so that the preceding process is performed immediately before the following process. Even when operation flows in the claims, the description,and the drawings are described using expressions such as ""first"", ""next"", and ""subsequently"" for convenience, this does not necessarily mean that such order is required."
9|http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=80&p=2&f=G&l=50&d=PTXT&S1=(python.CLTX.+or+python.DCTX.)&OS=ACLM/python&RS=ACLM/python|Dynamic centralized unit determination in a credit control charging system|A charging system includes a rating engine, a session control module, and a charging unit determination module. The session control module receives a request for service units, associated with a charging session, from a client or service element, and obtains one or more input parameters from the request for service units. The charging unit determination module obtains account data associated with the request for service units, determines at least one charging session related parameter based on the one or more input parameters and/or the account data, and pass the at least one charging session related parameter to the rating engine. The rating engine grants service units based on the at least one charging session related parameter, and forwards an indication of the granted service units to the session control module for return to the client or service element.|"1. A credit control server, comprising: a rating engine; a session control module configured to: receive a request for service units, associated with a charging session,from a client or service element that is providing a network service to an end user; and obtain one or more input parameters from the request for service units and passing the one or more input parameters to a charging unit determination module; thecharging unit determination module configured to: obtain account data associated with the request for service units from an account balance management module; determine, based on a dynamically configurable logic, a unit type based on the account data; and pass the determined unit type to the rating engine; wherein the rating engine is configured to: rate credit and grant service units based on at least the determined unit type; and forward an indication of the granted service units of the determinedunit type to the session control module for return to the client or service element. 2. The credit control server of claim 1, where the unit type comprises one of time, volume or money. 3. The credit control server of claim 1, where the one or more input parameters comprises at least one of a Serving General Packet Radio System (GPRS) Support Node (SGSN) address, a gateway GPRS support Node (GGSN) address, a mobile countrycode (MCC), or a mobile network code (MNC). 4. The credit control server of claim 1, where the account data includes an identifier of a campaign in which a user of the client or service element is participating. 5. The credit control server of claim 1, where the charging unit determination module is configured to generate the unit type based on a time of day associated with the request for service units, where the least one charging session relatedparameter includes a unit type associated with the request for service units. 6. The credit control server of claim 1, where the dynamically configurable logic includes conditions and modifiers for generating the unit type. 7. The credit control server of claim 1, where the dynamically configurable logic includes JavaScript, Python, or Perl programmable logic. 8. The credit control server of claim 6, where the dynamically configurable logic includes logical trees and where the charging unit determination module is configured to: branch, within the logical trees, using the account data and the one ormore input parameters and based on the conditions, to execute the modifiers to determine the unit type. 9. The credit control server of claim 1, where the charging unit determination module is configured to: receive modifications to the dynamically configurable logic via the user interface. 10. The credit control server of claim 1, where the charging unit determination module is configured to determine unit type based on the one or more input parameters. 11. A method implemented in a credit control server, the method comprising: receiving a request for service units, associated with a charging session, from a client or service element that is providing a network service to an end user; obtaining one or more input parameters from the request for service units; obtaining account data associated with the request for service units; determining, based on a dynamically configurable logic, a unit type based on the account data; creditrating and granting service units based on at least the determined unit type; and sending an indication of the granted service units of the determined unit type to the client or service element. 12. The method of claim 11, where the unit type comprises one of time, volume or money. 13. The method of claim 11, where the one or more input parameters comprises at least one of a Serving General Packet Radio System (GPRS) Support Node (SGSN) address, a gateway GPRS support Node (GGSN) address, a mobile country code (MCC), or amobile network code (MNC). 14. The method of claim 11, where the determining the unit type is based on a time of day associated with the request for service units, and where the least one charging session related parameter includes a unit type associated with the requestfor service units. 15. The method of claim 11, further comprising: receiving dynamically configurable logic via a user interface, and determining the unit type based further on the dynamically configurable logic. 16. The method of claim 11, where the dynamically configurable logic includes conditions and modifiers for generating the unit type. 17. The method of claim 11, where the dynamically configurable logic includes JavaScript, Python, or Perl programmable logic. 18. The method of claim 16, where the dynamically configurable logic includes logical trees, the method further comprising: branching, within the logical trees, using the account data and the one or more input parameters and based on theconditions, to execute the modifiers to determine the unit type. 19. The method of claim 11, the method further comprising: receiving modifications to the dynamically configurable logic via the user interface. Description TECHNICAL FIELD Implementations described herein relate generally to credit-control systems and, more particularly, to the implementation of dynamic centralized unit determination in a credit control charging system based on service unit requests.BACKGROUND Credit control may involve mechanisms that interact in real-time with accounts associated with end users, and may control or monitor the charges related to service usage associated with those end users' accounts. For example, credit control mayinvolve checking whether credit is available for a given account, reserving credit, deducting credit from the end user account when service is completed, and/or refunding reserved credit that is not used. Credit control has particular applicability inthe provision of network services, such as, for example, provision of cellular airtime in a cellular radio network, provision of multimedia data in a wired or wireless network, etc. Credit control may be implemented by a charging system (e.g., a creditcontrol server) that monitors and controls charges related to service usage of end users, and that grants and/or denies credit authorizations to those end users, thus, enabling network service delivery to the end users. RFC 4006, entitled ""Diameter Credit-Control Application"" (DCCA), provides a specification that can be used to implement real-time credit-control for a variety of end user services such as network access services, Session Initiation Protocol(SIP) services, messaging services, and download services. RFC 4006 provides a general solution to real-time cost and credit-control in charging systems.SUMMARY A credit control charging session typically involves the receipt of a request for service units at a charging system (e.g., the credit control server) that checks credit availability, reserves service units, and/or grants service units to an enduser that is using a network service. Upon receipt of the request for service units, the charging system may perform various functions to enable the charging system to grant service units to the end user. Mechanisms for granting service units during acredit control charging session typically lack the capacity to determine charging session related parameters in ways that satisfy market requirements. For example, mechanisms for granting service units during a credit control charging session lack thecapacity to determine charging session related parameters (e.g., unit type, validity time, etc.) based on, for example, certain input parameters (e.g., roaming position, etc.) obtained from the request for service units or based on certain account data(e.g., a particular offered campaign) associated with the end user. Exemplary embodiments described herein relate to centralized unit determination that may be performed at a charging system, during the service unit granting process, in response to a request for service units received in association with an enduser's charging session. As described herein, a dynamic centralized unit determination module may be implemented in the charging system using dynamically configurable logic to implement the centralized unit determination. The centralized unitdetermination may include determining one or more charging session related parameters based on input parameters contained in the request for service units and based on account data of an account associated with the end user. The charging session relatedparameters may include a service unit type (e.g., service unit type of time, data volume, or money) to be granted to the charging session, or other charging session related data. The other charging session related data may include parameters, other thanservice unit type, related to a particular charging session (e.g., a validity-time parameter which can be used for a service unit reservation that depends on account parameters). The determined charging session related parameters may be used by a ratingengine of the charging system to grant an amount of service units to the end user and/or may be returned to a client and/or service element that is engaged in providing a network service to the end user. Use of the dynamic centralized unit determinationmodule, described herein, advantageously enables the determination of unit type, and/or other charging session related parameters, based on various different input parameters obtained from request for service units, or from end user account data. Byimplementing the dynamic centralized unit determination module with dynamically configurable logic, the determination of unit type, and/or charging session related parameters, may be performed in a flexible way that may be easily re-configured based uponend user or service provider needs or requirements. According to one aspect, a charging system may include a rating engine, and a session control module to: receive a request for service units, associated with a charging session, from a client or service element that is providing a networkservice to an end user, and obtain one or more input parameters from the request for service units. The charging system may further include a charging unit determination module to: obtain account data associated with the request for service units froman account balance management module, determine at least one charging session related parameter based on the one or more input parameters and/or the account data, and pass the at least one charging session related parameter to the rating engine. Therating engine is to: grant service units based on the at least one charging session related parameter, and forward an indication of the granted service units to the session control module for return to the client or service element. According to a further aspect, a method implemented in a charging system may include receiving a request for service units, associated with a charging session, from a client or service element that is providing a network service to an end user,and obtaining one or more input parameters from the request for service units. The method may further include obtaining account data associated with the request for service units, and determining at least one charging session related parameter based onthe one or more input parameters and/or the account data. The method may also include granting service units based on the at least one charging session related parameter, and sending an indication of the granted service units to the client or serviceelement. BRIEF DESCRIPTION OF THE DRAWINGS The accompanying drawings, which are incorporated in and constitute a part of this specification, illustrate one or more embodiments of the invention and, together with the description, explain the invention. In the drawings: FIG. 1A illustrates an exemplary system in which a network service(s) may be provided to one or more end users; FIG. 1B illustrates an exemplary implementation of the system of FIG. 1A in which one client includes a gateway GPRS support Node (GGSN) and another client includes a Serving General Packet Radio System (GPRS) Support Node (SGSN); FIG. 2 illustrates exemplary components of a device that may correspond to the charging system of FIG. 1A; FIG. 3 illustrates exemplary functional components of the charging system of FIG. 1A; FIG. 4 illustrates an example of logic that may be used in the dynamic centralized unit determination module of FIG. 3; FIG. 5 illustrates an example of the user interface of FIG. 3; FIG. 6 is a flowchart that illustrates exemplary blocks associated with entering logic for use by the dynamic centralized unit determination module of FIG. 3; FIG. 7 illustrates a specific example of a logical tree structure that may be used by the dynamic centralized unit determination module of FIG. 3; FIG. 8 is a flowchart that illustrates an exemplary process for processing request for service units received from a client(s)/service element(s), and for determining other charging session related parameters associated with the service request; FIG. 9 illustrates the functional components of FIG. 3 implementing the exemplary process of FIG. 8; and FIGS. 10-15 illustrate specific examples of centralized unit type determination, or the determination of other charging session related data, based on input parameters contained in a request for service units and based on an end user's accountdata.DETAILED DESCRIPTION The following detailed description of the invention refers to the accompanying drawings. The same reference numbers in different drawings may identify the same or similar elements. Also, the following detailed description does not limit theinvention. FIG. 1A illustrates an exemplary system 100 in which a network service(s) may be provided to one or more end users. As shown in FIG. 1A, system 100 may include end users 105-1 through 105-N connected to a network 110. Network 110 may includeclients 115-1 through 115-M that act as intermediate devices for forwarding a service event 120 associated with a network service to a service element 125, which provides the network service to end users 105-1 through 105-N. Each of clients 115-1 through115-M may include a credit-control client (e.g., a Diameter Credit control client as specified in IETF RFC 4006) that interacts with a credit-control server, such as, for example, charging system 130. Each of clients 115-1 through 115-M may monitorusage of a service grant according to instructions provided by charging system 130 (e.g., the credit-control server). Service element 125 may include a network element or device that provides a network service to end users 105-1 through 105-N. In someimplementations, service element 125 and a client (e.g., client 115-M) may be combined into a single network element or device, and service element 125/client 115-M may act as a credit-control client. Examples of service element 125 may include anetwork access server (NAS), a SIP proxy server, a Serving General Packet Radio Service (GPRS) Support Node (SGSN), a GPRS node, or an Application server, such as, for example, a messaging server, a content server, and/or a gaming server. Charging system 130 may include a server entity that performs credit-control associated with one or more network services. Charging system 130 may perform the credit-control before a service event is delivered to one or more of end users 105-1through 105-N. In implementations described herein, charging system 130 may implement dynamic centralized unit determination based on, for example, input parameters contained in service unit requests (e.g., Request for Service Units (RSU)) and based onaccount data associated with end users 105-1 through 105-N. As shown in FIG. 1A, a service event 120, intended for one or more of end users 105-1 through 105-N, may be received by client 115-1. Client 115-1 may forward service event 120 to client 115-M which, in turn, may forward service event 120 toservice element 125 for provision of the associated service to one or more of end users 105-1 through 105-N. In conjunction with the forwarding of service event 120, each of clients 115-1 through 115-M may send a charging request (e.g., a request forservice units--not shown) to charging system 130 requesting authorization/denial of delivery of service event 120 to a respective one of end users 105-1 through 105-N. In response to each charging request, charging system 130 may send an authorizationmessage that grants delivery of the service (e.g., delivery of a granted quota of service units) to the respective end user, or a denial message that denies delivery of the service to the respective end user based on performance of credit-controlmechanisms. Each of end users 105-1 through 105-N may include a cellular radiotelephone, a personal digital assistant (PDA), a Personal Communications Systems (PCS) terminal, a laptop computer, a desktop computer, a palmtop computer, or any other type ofdevice or appliance that includes a communication transceiver that permits the device to communicate with other devices. A PCS terminal may combine a cellular radiotelephone with data processing, facsimile, and data communications capabilities. A PDAmay include a radiotelephone, a pager, an Internet/intranet access device, a web browser, an organizer, calendars, and/or a global positioning system (GPS) receiver. A PCS or PDA may include a Session Initiation Protocol (SIP) User Agent (SIP UA) whichmay be used for SIP signaling in a Internet Protocol (IP) Multimedia Subsystem (IMS) domain. Network 110 may include one or more networks of any type, including a local area network (LAN); a wide area network (WAN); a metropolitan area network (MAN); a telephone network, such as a Public Switched Telephone Network (PSTN) or a PublicLand Mobile Network (PLMN); a satellite network; an intranet, the Internet; or a combination of these and/or other types of networks. The PLMN(s) may further include a packet-switched sub-network, such as, for example, General Packet Radio Service(GPRS), Cellular Digital Packet Data (CDPD), a Mobile Internet Protocol (IP) network, or an IMS network. It will be appreciated that the components illustrated in FIG. 1A are shown by way of example. Other configurations with more components, fewer components, different components, or a different arrangement of components may be implemented. Moreover, in some embodiments, one or more components in FIG. 1A may perform one or more of the tasks described as being performed by one or more other components in FIG. 1A. FIG. 1B illustrates system 100 in an exemplary implementation in which client 115-1 includes a Gateway GPRS Support Node (GGSN) and client 115-M includes a SGSN. In the exemplary implementation of FIG. 1B, SGSN combines the functionality ofclient 115-M and service element 125 of FIG. 1A, and the service event (i.e., service event 120 of FIG. 1A) includes packet data 120 that is being delivered to one or more of end users 105-1 through 105-N. Upon receipt of packet data 120, GGSN 115-1 mayforward packet data 120 to SGSN 115-M for possible delivery to one or more of end users 105-1 through 105-N. GGSN 115-1 additionally may send a charging request (e.g., a request for service units--not shown) to charging system 130 requestingauthorization/denial of delivery of packet data 120 to one or more of end users 105-1 through 105-N. SGSN 115-M may receive packet data 120 from GGSN 115-1 and may also send a charging request (not shown) to charging system 130. Upon receipt of theauthorization/denial from charging system 130, SGSN 115-M may either deliver, or not deliver, packet data 120 to one or more of end users 105-1 through 105-N. FIG. 2 is a diagram of a device 200, which may correspond to one or more of clients 115-1 through 115-M, service element 125, and/or charging system 130, according to an exemplary implementation. As illustrated, device 200 may include a bus210, a processing unit 220, a main memory 230, a Read Only Memory (ROM) 240, a storage device 250, an input device 260, an output device 270, and a communication interface 280. Bus 210 may include a path that permits communication among the componentsof device 200. Processing unit 220 may include a processor, microprocessor, or processing logic that may interpret and execute instructions. Main memory 230 may include a random access memory (RAM) or another type of dynamic storage device that may storeinformation and instructions for execution by processor 220. ROM 240 may include a ROM device or another type of static storage device that may store static information and instructions for use by processing unit 220. Storage device 250 may include amagnetic and/or optical recording medium and its corresponding drive. Input device 260 may include a mechanism that permits an operator to input information to device 200, such as a keyboard, a mouse, a pen, voice recognition, a touch screen display, and/or biometric mechanisms, etc. Output device 270 may includea mechanism that outputs information to the operator, including a display, a printer, a speaker, etc. Communication interface 280 may include any transceiver-like mechanism that enables device 200 to communicate with other devices and/or systems. Forexample, communication interface 280 may include mechanisms for communicating with another device or system via a network, such as network 110. Device 200 may perform certain operations/processes described herein. Device 200 may perform these operations in response to processing unit 220 executing software instructions contained in a computer-readable medium, such as memory 230, ROM240, and/or storage device 250. A computer-readable medium may be defined as a physical or logical memory device. Each of main memory 230, ROM 240 and storage device 250 may include computer-readable media. The magnetic and/or optical recording media(e.g., readable CDs or DVDs) of storage device 250 may also include computer-readable media. The software instructions may be read into memory 230 from another computer-readable medium, such as storage device 250, or from another device via communication interface 280. The software instructions contained in memory 230 may causeprocessing unit 220 to perform operations or processes described herein. Alternatively, hardwired circuitry may be used in place of or in combination with software instructions to implement processes described herein. Thus, implementations describedherein are not limited to any specific combination of hardware circuitry and software. It will be appreciated that the components illustrated in FIG. 2 are shown by way of example. Other configurations with more components, fewer components, different components, or a different arrangement of components may be implemented. Moreover, in some embodiments, one or more components in FIG. 2 may perform one or more of the tasks described as being performed by one or more other components in FIG. 2. FIG. 3 depicts a diagram of exemplary functional components of charging system 130. The functional components of charging system 130 may include a session control module 300, a dynamic centralized unit determination (DCUD) module 310, anaccount balance management module 320, and a rating engine 330. FIG. 3 further depicts a management application 340, and a user interface (I/F) 350 that may be used for providing new logic, or for modifying existing logic, used by DCUD module 310. Management application 340 and user I/F 350 may be implemented by charging system 130, or by an external entity that may communicate with charging system 130. The functional components illustrated in FIG. 3 may be implemented in hardware or acombination of hardware and software. In one embodiment, one or more of the functional components illustrated in FIG. 3 may be implemented by one or more of the components illustrated in FIG. 2. Session control module 300 may receive charging requests associated with charging sessions from clients 115-1 through 115-M. Session control module 300 may process the charging requests to obtain one or more input parameters from the chargingrequests. The one or more input parameters may include, but are not limited to, an SGSN address of the SGSN serving an end user, the GGSN address of the GGSN serving the end user, the Mobile Country Code (MCC) associated with the location of the enduser, the Mobile Network Code (MNC) associated with the location of the end user, and/or a service class of the end user's traffic. Session control module 300 may pass the input parameters to dynamic centralized unit determination (DCUD) module 310 andto rating engine 330. DCUD module 310 may receive the input parameter(s) from session control module 300 and may obtain account data, associated with the charging requests, from account balance management module 320. DCUD module 310 may include dynamicallyconfigurable logic for performing, among other functions, unit type determination (i.e., a type of service unit to be granted, such as, time, volume, or money) based on the input parameters and the account data as configured through interface 350 usingManagement Application 340. DCUD module 310 may also include dynamically configurable logic for determining other charging session related parameters based on the input parameters, the account data and/or other data. The other charging session relatedparameter(s) may include, for example, one or more of the following parameters that are defined in ""Diameter Charging Applications,"" 3GPP TS 32.299 V7.7.0 2007-09: 1) a trigger parameter(s); 2) a threshold parameter(s); 3) a Continuous Time Period (CTP)or Discrete Time Period (DTP) parameter(s); 4) an envelope reporting parameter(s); 5) a Quota Holding Time (QHT) parameter(s); and 6) a Quota Consumption Time (QCT) parameter(s). For example, the QCT parameter(s) may be determined based on account dataassociated with the end user (e.g., based on whether the end user is participating in a particular offer or is a member of a particular group). The QCT parameter(s) may inform the client or service element to ""over consume"" (i.e., consume units eventhough no traffic flows) during a time period specified by the QCT parameter(s). As another example, the CTP or DTP parameters may be determined based on account data associated with the end user (e.g., based on whether the end user is participating ina particular offer or is a member of a particular group). The CTP or DTP parameters may inform the client or service element of time envelopes which define rules of consumption to be applied to downloaded units. DCUD module 310 may pass the determined service unit type to rating engine 330. DCUD module 310 may also pass the determined other charging session related parameters to rating engine 330, and to session control module 300 for return to theclient or service element. The configurable logic used by DCUD module 310 may include any type of logic, such as, for example, Javascript, Python, or Perl programmable logic. In one implementation, the configurable logic used by DCUD module 310 mayinclude a logical tree structure that further includes various ""branches."" Each of the branches may include conditions and modifiers, as described in further detail below with respect to FIG. 4, where the conditions may cause branching within the logicaltree structures based on the input parameters and the account data, to execute the modifiers to determine at least one charging session parameter. Account balance management module 320 may maintain account data (e.g., account balance information) for accounts associated with each of end users 105-1 through 105-N. Account balance management module 320 may supply the account data to DCUDmodule 310 or rating engine 330 based on credit requests associated with respective ones of end users 105-1 through 105-N. The account data may include, but is not limited to, a current monetary value of a main account associated with an end user, acurrent value of promotional accounts associated with the end user, a current value of usage accumulators (UAs) associated with the end user, promotions and campaigns offered to the end user, family and friend numbers associated with the end user, andcommunities to which the end user belongs. Each account associated with an end user may store the above-noted account information, and possibly other information. Rating engine 330 may use the input parameters, the account data, the determined service unit type, the other charging session related data, and/or other data to reserve service units related to a respective charging request, and/or to updateaccount data of the account related to a respective charging request. Rating engine 330 may pass an indication of the reserved service units to session control module 300 for return to the client or service element. Management application 340 may include functionality for entering new logic into DCUD module 310, or for modifying existing logic of DCUD module 310. A user (e.g., an administrator of charging system 130) may use user I/F 350 to control thefunctionality of management application 340 to enter new logic into DCUD module 310 or to modify existing logic of DCUD module 310. The functional components illustrated in FIG. 3 are shown by way of example. Other configurations with more functional components, fewer functional components, different functional components, or a different arrangement of functional componentsmay be implemented. Moreover, in some embodiments, one or more functional components in FIG. 3 may perform one or more of the tasks described as being performed by one or more other functional components in FIG. 3. FIG. 4 depicts an example of logic 400 that may be used by DCUD module 310 for performing, among other functions, unit determination. In the example of FIG. 4, logic 400 may be configured in a logical tree structure, where the logical tree mayinclude multiple nodes (e.g., nodes 410-1 and 410-2 shown by way of example), each of which may act as a container that groups conditions 420, modifiers 430 and/or other nodes. The nodes in logic 400 may indicate the order of execution of logic in thelogical tree structure, and each node in logic 400 may represent the beginning of a branch in the tree. The output of a node in logic 400 may be evaluated by using conditions 420 for the node. Conditions 420 may include logic decision points that canbe evaluated as true or false (e.g., similar to IF and SET operations in a programming language). Modifiers 430 may perform calculations or data modifications based on whether a corresponding condition 420 is evaluated as being true or false. Amodifier 430 may use, modify, or add data, and may also determine if the execution of logic 400 in a corresponding node should stop or continue. FIG. 5 depicts an example of user I/F 350 that may be used to enter logic 400 that may further be used by DCUD module 310 for performing centralized unit determination based on input parameters and account data associated with a chargingrequest, or for determining other charging session related parameters based on the input parameters, the account data, and/or other data associated with the charging request. As shown in FIG. 5, a first portion 500 of user I/F 350 may be used to enterlogic (e.g., a logical tree), and a second portion 510 may be used to specify settings of components of the logic. For example, as shown in FIG. 5, portion 510 of I/F 350 may be used to specify settings of a modifier 520 of the logic, or to specifysettings of a node or condition of the logic. FIG. 6 is a flowchart that illustrates an exemplary process for providing, and dynamically modifying, logic for use by DCUD module 310. The exemplary process of FIG. 6 may be performed by management application 340. Management application 340may be implemented by charging system 130, or by another device or entity (not shown in FIGS. 1-3) communicating with charging system 130. The exemplary process may include providing a user interface for entry of new logic (block 600). Management application 340 may implement a user interface that a user (e.g., an administrator) may be use to enter new logic. For example,management application 340 may implement user I/F 350 depicted in FIG. 5. Input to the user interface may be received to create new logic (block 610). For example, referring to user I/F 350 depicted in FIG. 5, a user may enter logic in portion 500 ofthe user I/F, and may specify settings of the various nodes, conditions, and modifiers of the logic in portion 510 of the user FF. The new logic may be supplied to DCUD module 310 (block 615). Management application 340 may supply the newly enteredlogic to DCUD module 310 via user I/F 350. FIG. 7 depicts one example of a logical tree structure 700 that may be entered by a user via user I/F 350. In the example logical tree 700, a service unit type for the requested service units may be determinedbased on a roaming position of an end user 105 associated with the request for service units. Returning to FIG. 6, it may be determined if changes are to be made to the logic (block 620). For example, management application 340, based on input from a user, may retrieve previously entered logic for entering changes to the logic. Ifchanges are to be made to the logic (block 620-YES), input to the user interface may be received that modifies the logic (block 625). The user (e.g., the administrator) may supply input to I/F 350 that modifies the previously entered logic. Themodified logic may be supplied to DCUD module 310 (block 630). Management application 340 may supply the modified logic to DCUD module 310 via user I/F 350. The blocks of FIG. 6 may be selectively repeated for each group of logic entered by a user via user I/F 350. The blocks depicted in FIG. 6 are shown by way of example. The exemplary process may include other blocks, fewer blocks, differentblocks, or a different arrangement of blocks than those depicted in FIG. 6. FIG. 8 is a flowchart that illustrates an exemplary process for processing request for service units (RSUs) received from a client(s)/service element(s), and for determining other charging session related parameters associated with the servicerequest(s). The exemplary process of FIG. 8 may be performed by the logic implemented by DCUD module 310, possibly in conjunction with other components of charging system 130. The exemplary process of FIG. 8 is described below with reference to theexample of FIG. 9. The exemplary process may include receiving new and/or modified logic at DCUD module 130 (block 800). In accordance with blocks 615 or 630 of the exemplary process of FIG. 6, management application 340 may supply new or modified logic to DCUDmodule 130 via user I/F 350. DCUD module 310 may obtain an input parameter(s) associated with a request for service units (RSU) received from a client or service element (block 805). Referring to FIG. 9, session control module 300 may receive a requestfor service units (RSU) 900 from the client or service element, may extract an input parameter(s) 905 from the received RSU, and may pass input parameter(s) 905 to DCUD module 310. DCUD module 310 may obtain user account data from account balancemanagement module 330 (block 810). As shown in FIG. 9, account balance management module 330 may pass account data 910 that is associated with RSU 900 (i.e., account data associated with end user 105 for which the service units are being requested) toDCUD module 310. DCUD module 310 may determine a service unit type based on the input parameter(s), the user account data, and/or other data (block 815). DCUD module 310 may implement the logic received in block 800 to determine the service unit type to begranted. For example, if the logic includes a logical tree structure, DCUD module 310 may apply one or more conditions and modifiers (described above) to determine the service unit type to be granted. DCUD module 310 may determine the service unit typebased on, for example, an SGSN address associated with the location of the end user, a GGSN address associated with the location of the end user, a MCC associated with a location of the end user, a MNC associated with a location of the end user, acampaign identifier associated with an advertising campaign in which the end user is participating; a time of day associated with a time a request for service units is received by charging system 130, or a traffic service class associated with therequest for service units. DCUD module 310 may send the determined service unit type to session control module 300, for passing to rating engine 340, for credit rating and service unit reservation (block 820). As shown in FIG. 9, DCUD module 310 may pass the service unittype/other data 915 to session control module 300. Session control module 300 may further pass service unit type/other data 915 to rating engine 340 for credit rating and service unit reservation. Upon receipt of service unit type/other data 915,rating engine 340 may grant service units, of the determined service unit type, to the client/service element. Rating engine 340 may pass the granted service units 925 to session control module 300. Rating engine 340 may also send an account dataupdate 930 to account balance management module 330 to update values stored in the account associated with end user 105 for which the grant of service units is directed. DCUD module 310 may determine other charging session related parameter(s) based on the input parameter(s), user account data, and/or other data (block 825). DCUD module 310 may implement the logic received in block 800 to determine the othercharging session related parameter(s). For example, if the logic includes a logical tree structure, DCUD module 310 may apply one or more conditions and modifiers (described above) to determine the other charging session related parameter(s) based onthe input parameter(s), user account data, and/or other data. The other charging session related parameter(s) may include one or more of the following parameters that are defined in ""Diameter Charging Applications,"" 3GPP TS 32.299 V7.7.0 2007-09: 1) atrigger parameter(s); 2) a threshold parameter(s); 3) a Continuous Time Period (CTP) or Discrete Time Period (DTP) parameter(s); 4) an envelope reporting parameter(s); 5) a Quota Holding Time (QHT) parameter(s); and 6) a Quota Consumption Time (QCT)parameter(s). For example, the QCT parameter(s) may be determined based on account data associated with the end user (e.g., based on whether the end user is participating in a particular offer or is a member of a particular group). The QCT parameter(s)may inform the client or service element to ""over consume"" (i.e., consume service units even though no traffic flows) during a time period specified by the QCT parameter(s). As another example, the CTP or DTP parameters may be determined based onaccount data associated with the end user (e.g., based on whether the end user is participating in a particular offer or is a member of a particular group). The CTP or DTP parameters may inform the client or service element of time envelopes whichdefine rules of consumption to be applied to downloaded service units. DCUD module 310 may send the other charging session related parameter(s) to session control module 300 for returning to the client or service element (block 830). As shown in FIG. 9, DCUD module 310 may pass the other charging session relatedparameter(s) 920 to session control module 300. Session control module 300 may pass granted service units 935 of the determined service unit type, and the other charging session related data (if any) to the client/service element. The blocks depicted in FIG. 8 are shown by way of example. The exemplary process may include other blocks, fewer blocks, different blocks, or a different arrangement of blocks than those depicted in FIG. 8. FIGS. 10-15 depict several examples of the determination of service unit type and/or other charging session related data as performed by DCUD module 310 of charging system 130, and the granting of service units for a charging session. FIGS.10-15 are intended to merely represent several examples of the determination of service unit type and/or other charging session related data, and not to represent all of the numerous examples of service unit type or other charging session related datadetermination that may be implemented by DCUD module 310. In the example of FIG. 10, a client 115 or service element 125 (e.g., a GGSN) sends a credit control request (CCR) 1000 to charging system 130, where the input parameters contained in CCR 1000 may include the following: a service identifier, arequest for service units (RSUs), and a location identifier. The location identifier may include any type of data that provides an exact, or approximate, location of end user 105 with which the CCR is associated. For example, the location identifiermay include an SGSN address (i.e., of SGSN 115-M that is serving end user 105), a Mobile Country Code (MCC), and/or a Mobile Network Code (MNC). At charging system 130, DCUD module 310 may determine 1010 a service unit type for the charging sessionbased on the SGSN address, the GGSN address, the MCC, and/or the MNC. In the example of FIG. 10, charging system 130 is depicted as determining one of two service unit types based on the SGSN address, the GGSN address, the MCC, and/or the MNC. Forexample, DCUD module 310 (not shown) of charging system 130 may determine a service unit type of time or a service unit type of data based on the SGSN address, the GGSN address, the MCC, and/or the MNC. FIG. 10 depicts charging system 130 sending acredit control answer (CCA) 1020 with a granted service units (GSUs) being a service unit type of time with a value of 180 seconds if the SGSN/GGSN address, MCC and/or MNC indicates that end user 105 is roaming. FIG. 10 further depicts charging system130 sending a CCA 1030 with the GSUs being a service unit type of data volume, having a value of 200 octets of data, if the SGSN/GGSN address, MCC, and/or MNC indicates that end user 105 is not roaming. FIG. 11 illustrates another example in which other charging session related data is determined by DCUD module 310 of charging system 130 based on input parameters contained in the RSU. As shown in FIG. 11, a client 115 or service element 125may send a CCR 1100 to charging system 130 to request service units. Upon receipt of CCR 110 at charging system 130, DCUD module 310 may determine 1110 charging session related data, that may include data other than a service unit type, based on accountdata values associated with CCR 1100. For example, the charging session related data may include an amount of GSU and a length of a validity time that, when the validity time elapses, causes client 115 or service element 125 to report consumption fordeduction from the account. In this example, the more money that is associated with the account, the larger the amount of GSU and the longer the validity time that may be determined by DCUD module 310. In the example of FIG. 11, CCA 1120, including anamount of GSU and a validity time, may be sent to client 115 or service element 125. FIG. 12 illustrates a further example in which a client 115 or service element 125 may send a CCR 1200 to charging system 130 to request service units. Upon receipt of CCR 1200 at charging system 130, DCUD module 310 may determine 1210 aservice unit type for the charging session based on account data values associated with end user 105 with which the request for service units is associated. FIG. 12 depicts charging system 130 sending two different CCAs 1220 or 1230 depending on theaccount data values of the account associated with end user with which the request for service units is associated. In the example of FIG. 12, CCA 1220, including service unit type of time, and a length of time of 180 seconds, may be sent to client 115or service element 125 if the account data values satisfy a first condition; or CCA 1230, having a service unit type of data, and an amount of 200 data octets, may be sent to client 115 or service element 125 if the account data values satisfy a secondcondition. FIG. 13 illustrates a further example in which a client 115 or service element 125 may send a CCR 1300 to charging system to request service units. Upon receipt of CCR 1300 at charging system 130, DCUD module 310 may determine 1310 if end user105, with which the request for service units is associated, is participating in a particular offer or advertised campaign. For example, a particular campaign offered by a provider may offer different prices for specific service unit types (e.g., $10for an hour of service, or $1 for a Megabyte (Mb) of transmitted data, etc.). Therefore, in the example of FIG. 13, DCUD module 310 of charging system 130, upon receipt of CCR 1300, may determine 1310 if the end user is participating in a particularoffered campaign and, if so, may determine 1320 a service unit type based on the campaign's identifier. Charging system 130 may return a CCA to client 115 or service element 125 with a grant of service units of the service unit type determined by DCUDmodule 310. In the example depicted in FIG. 13, charging system 130 may return a CCA 1330 with a service unit type of time and a time length of 180 seconds if it is determined that end user 105 is not participating in the campaign (e.g., a campaignoffering a data volume for a specific price). Alternatively, charging system 130 may return a CCA 1340 with a service unit type of data volume, and an amount of 200 data octets, if it is determined that end user 105 is participating in the campaign. FIG. 14 illustrates a further example in which a client 115 or service element 125 may send a CCR 1400 to charging system 130 to request service units. Upon receipt of CCR 1400 at charging system 130, DCUD module 310 may determine 1410 acurrent time (i.e., the time of day) at which CCR 1400 is received. DCUD module 310 may further determine 1420 a service unit type based on the time of day (e.g., unit type=data volume during the day, unit type=time during the night). Charging system130 may return a CCA to client 115 or service element 125 with a grant of service units of the service unit type determined by DCUD module 310. In the example depicted in FIG. 14, charging system 130 may return a CCA 1430 with a service unit type oftime and a time length of 180 seconds if the time-of-day is determined to be the nighttime. Alternatively, charging system 130 may return a CCA 1440 with service unit type of data volume (e.g., total octets=180) if the time-of-day is determined to bethe daytime. FIG. 15 illustrates yet another example in which a client 115 or service element 125 may send a CCR 1500 to charging system 130 to request service units. Upon receipt of CCR 1500 at charging system 130, DCUD module 310 may determine a serviceclass associated with the request for service units. Charging system 130 may support multiple service classes (e.g., Gold, Silver, and Bronze), where different service unit types may be associated with each of the different service classes (e.g., aservice unit type of time for the Gold service class, and a service unit type of volume for Silver and Bronze service classes). DCUD module 130 may then determine 1520 a service unit type based on the determined service class. Charging system 130 mayreturn CCA 1530 to client 115 or service element 125 with a grant of service units of the service unit type determined by DCUD module 310. In the example depicted in FIG. 15, charging system 130 may return CCA 1530 with a service unit type of time and atime length of 180 seconds. The foregoing description of implementations provides illustration and description, but is not intended to be exhaustive or to limit the invention to the precise form disclosed. Modifications and variations are possible in light of the aboveteachings, or may be acquired from practice of the invention. For example, while series of blocks have been described with regard to FIGS. 6 and 8, the order of the blocks may be modified in other implementations consistent with the principles of theinvention. Further, non-dependent blocks may be performed in parallel. Aspects described herein may also be implemented in methods and/or computer program products. Accordingly, the embodiments described herein may be embodied in hardware and/or in a combination of hardware and software (including firmware,resident software, microcode, etc.). Furthermore, embodiments described herein may take the form of a computer program product on a computer-usable or computer-readable storage medium having computer-usable or computer-readable program code embodied inthe medium for use by or in connection with an instruction execution system. The actual software code or specialized control hardware used to implement the embodiments described herein is not limiting of the invention. Thus, the operation and behaviorof the embodiments were described without reference to the specific software code--it being understood that one of ordinary skill in the art would be able to design software and control hardware to implement the aspects based on the description herein. Furthermore, certain portions of the invention may be implemented as ""logic"" that performs one or more functions. This logic may include hardware, such as an application specific integrated circuit or field programmable gate array, or acombination of hardware and software. Even though particular combinations of features are recited in the claims and/or disclosed in the specification, these combinations are not intended to limit the invention. In fact, many of these features may be combined in ways notspecifically recited in the claims and/or disclosed in the specification. It should be emphasized that the term ""comprises/comprising"" when used in this specification is taken to specify the presence of stated features, integers, steps, components or groups but does not preclude the presence or addition of one or moreother features, integers, steps, components or groups thereof. No element, act, or instruction used in the present application should be construed as critical or essential to the invention unless explicitly described as such. Also, as used herein, the article ""a"" is intended to include one or more items. Where only one item is intended, the term ""one"" or similar language is used. Further, the phrase ""based on"" is intended to mean ""based, at least in part, on"" unless explicitly stated otherwise."
10|http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=88&p=2&f=G&l=50&d=PTXT&S1=(python.CLTX.+or+python.DCTX.)&OS=ACLM/python&RS=ACLM/python|Method for invoking UOML instructions|Embodiments of the present invention disclose a method for encapsulating Unstructured Operation Markup Language (UOML) into an Application Programming Interface (API), including: mapping an object of an UOML operation to a data type of a programming language, mapping the UOML operation to an API function prototype in the programming language, wherein an attribute or sub element of the UOML operation is mapped to a parameter of the API function prototype; wherein, when an API function is invoked, the API function issues a corresponding UOML operation instruction to a docbase management system according to the mapping relations; after an operation defined by the UOML operation instruction is executed by the docbase management system, the return result from the docbase management system is converted into a data type of the programming language by the API function. In this way, API functions in different programming languages, which correspond to the UOML, can be implemented, and the application developers of the programming languages may invoke suitable API functions directly to implement applications on the docbase management system, thus the development efficiency can be improved.|
11|http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=51&p=2&f=G&l=50&d=PTXT&S1=(python.CLTX.+or+python.DCTX.)&OS=ACLM/python&RS=ACLM/python|Robot task commander with extensible programming environment|A system for developing distributed robot application-level software includes a robot having an associated control module which controls motion of the robot in response to a commanded task, and a robot task commander (RTC) in networked communication with the control module over a network transport layer (NTL). The RTC includes a script engine(s) and a GUI, with a processor and a centralized library of library blocks constructed from an interpretive computer programming code and having input and output connections. The GUI provides access to a Visual Programming Language (VPL) environment and a text editor. In executing a method, the VPL is opened, a task for the robot is built from the code library blocks, and data is assigned to input and output connections identifying input and output data for each block. A task sequence(s) is sent to the control module(s) over the NTL to command execution of the task.|
12|http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=55&p=2&f=G&l=50&d=PTXT&S1=(python.CLTX.+or+python.DCTX.)&OS=ACLM/python&RS=ACLM/python|Beverage dispensing apparatus|A beverage dispensing apparatus may be adapted to mix together a concentrate fluid with a base fluid. In particular implementations, an apparatus may include a trunk line carrying the base fluid, a manifold, an inline and an outline extending between the trunk and the manifold, a python and a bar gun assembly fluidly connected to the downstream side of the manifold by a plurality of conduits contained in the python, wherein the apparatus includes a recirculation channel having an inlet port and an outlet port fluidly connected to respective in and out conduits in the python, the said in and out conduits being fluidly connected respectively to the inline and the outline of the cool fluid trunk line via the manifold, the beverage dispensing apparatus further including a plurality of product lines, a mixing mechanism and a dispensing outlet.|
13|http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=57&p=2&f=G&l=50&d=PTXT&S1=(python.CLTX.+or+python.DCTX.)&OS=ACLM/python&RS=ACLM/python|Cross language object sharing|Methods, system, and computer storage media are provided for enabling cross-language object sharing by providing shareable typename information agreed upon by clients that wish to share object with each other. A first client creates an object by communicating a create request, which includes typename information associated with the object. The object is created and the typename information, along with data and properties associated with the object, is stored. A second client requests to open that object. The data, properties, and typename information stored in associated with the object is communicated to the second client so that the second client is able to create a correct instance of the object.|"1. One or more tangible computer storage devices storing computer-useable instructions that, when used by one or more computing devices, cause the one or more computingdevices to perform a method of enabling cross-language object sharing, the method comprising: receiving from a first client a create request to create an object, wherein the create request includes typename information associated with the object; creating the object according to the create request; storing the typename information, one or more properties of the object, and data associated with the object; receiving from a second client an open request to open the object; and communicating thedata associated with the object, the one or more properties associated with the object, and the typename information for the object to the second client, wherein the second client, using the typename information, is able to correctly utilize the data tocreate a correct instance of the object. 2. The one or more devices of claim 1, wherein the typename information, the one or more properties of the object, and the data associated with the object are stored on a server. 3. The one or more devices of claim 2, wherein the open request comprises identical typename information to that stored on the server. 4. The one or more devices of claim 2, wherein if the typename information provided by the second client is different than the typename information stored on the server, further comprising communicating an error message to the second client. 5. The one or more devices of claim 2, wherein if the typename information provided by the second client corresponds to the typename information stored on the server, further comprising communicating the data associated with the object, the oneor more properties associated with the object, and the typename information for the object to the second client. 6. The one or more devices of claim 4, wherein when the error message is communicated to the second client, not communicating any object to the second client. 7. The one or more devices of claim 1, wherein the first client utilizes a dynamically typed language, which comprises one or more of APL, Erlang, Groovy, JavaScript, Lisp, Lua, MATLAB/GNU Octave, Perl, PHP, Prolog, Python, Ruby, Smalltalk,Clojure, or Tcl. 8. The one or more devices of claim 1, wherein the first client utilizes a strongly typed language, which comprises one or more of Java, C#, Pascal, Ada, C, or C++. 9. The one or more devices of claim 1, wherein the second client is a newly-written client that utilizes a strongly typed language. 10. The one or more devices of claim 1, wherein creating the correct instance of the object comprises creating a container of an appropriate size for the data that comprises the object. 11. The one or more devices of claim 1, wherein the data associated with the object comprises key value pairs that define a field name and a value for that field. 12. The one or more devices of claim 1, wherein without the typename information, the second client would not know how to create the correct instance of the object. 13. The one or more devices of claim 1, wherein the typename information is not language-specific. 14. The one or more devices of claim 1, wherein the first client and the second client, prior to creation of the object, agreed on sharing the object based on the typename information. 15. One or more tangible computer storage devices storing computer-useable instructions that, when used by one or more computing devices, cause the one or more computing devices to perform a method of enabling cross-language object sharing, themethod comprising: storing, at a server, data, typename information, and properties associated with a plurality of objects that have been created for use by a plurality of clients, wherein the plurality of clients have previously agreed on a structure ofthe plurality of objects based on the typename information corresponding to each of the plurality of objects; receiving an open request from a first client of the plurality of clients to open an object of the plurality of objects, wherein the firstclient utilizes a strongly typed language; retrieving from the server the data, the typename information, and the properties associated with the requested object; and communicating the data, the typename information, and the properties associated withthe requested object to the first client such that the first client, using the typename information, is able to create a correct instance of the object. 16. The one or more devices of claim 15, wherein the typename information comprises a typename associated with the object, and wherein the typename is associated with the object at a time of the object's creation. 17. The one or more devices of claim 15, wherein the object was created by a second client that utilizes a dynamically typed language. 18. The one or more devices of claim 17, wherein the dynamically typed language comprises one or more of APL, Erlang, Groovy, JavaScript, Lisp, Lua, MATLAB/GNU Octave, Perl, PHP, Prolog, Python, Ruby, Smalltalk, Clojure, or Tcl. 19. The one or more devices of claim 15, wherein the first client utilizes the strongly typed language, which comprises one or more of Java, C#, Pascal, Ada, C, or C++. 20. An object sharing system including one or more computing devices having one or more processors and one or more tangible computer storage devices, the object sharing system comprising: a create request receiving component that receives froma dynamically typed client a create request to create an object, wherein the create request includes typename information associated with the object, and wherein the dynamically typed client utilizes a dynamically typed language; an object creationcomponent that creates the object according to the create request; a storing component that stores the typename information, one or more properties of the object, and data associated with the object; an open request receiving component that receivesfrom a strongly typed client an open request to open the object, wherein the strongly typed client utilizes a strongly typed language; and a communication component that, upon a notification that the open request has been received, communicates the dataassociated with the object, the one or more properties associated with the object, and the typename information for the object to the strongly typed client such that the strongly typed client, using the typename information, is able to correctly utilizethe data to create a correct instance of the requested object. Description BACKGROUND With improved connectivity and access of computers and other devices to various networks, it has become commonplace for different programs, or clients, to share access to the same information, such as data objects. Sharing of data objectsenables the sharing of information in real-time across multiple, disparate clients, such as machines that are running multiple pieces of technology. Current techniques used to share information, such as data objects, between clients that utilizedifferent languages are fairly limited and are inherently problematic. For instance, programs may implement their own mechanisms for sharing data, but doing so is generally cumbersome for the programmer, considering how much information may be sharedamong computers and other devices.SUMMARY This summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This summary is not intended to identify key features or essential features of the claimed subjectmatter, nor is it intended to be used as an aid in determining the scope of the claimed subject matter. Embodiments of the present invention relate to the sharing of data objects between clients of disparate languages, such as strongly typed and dynamically typed languages. According to embodiments of the present invention, upon creation of anobject, the client provides typename information associated with the object such that when a request is received in the future to open that object, the typename information can be provided to the requesting client to enable that client to create acorrect instance of the object. In this case, the typename information is not language specific, but is shareable among various language types. While strongly typed languages have typenames and fixed properties, dynamically typed languages do not havea type system, nor do they have fixed properties. As such, typenames provided to a server when creating an object are friendly, shareable names agreed upon by the clients who will be sharing the objects. Instead of typenames consisting of alanguage-specific string, typenames are shareable by all languages, even languages that have yet to be developed. BRIEF DESCRIPTION OF THE DRAWINGS The present invention is described in detail below with reference to the attached drawing figures, wherein: FIG. 1 depicts a block diagram of an exemplary computing environment suitable for use in implementing embodiments of the present invention; FIG. 2 depicts a block diagram that illustrates a computing environment suitable for embodiments of the present invention; FIG. 3 illustrates a flow chart showing a method for creating and opening shared objects, according to an embodiment of the present invention; FIG. 4 illustrates a flow diagram showing a method for enabling cross-language object sharing, in accordance with an embodiment of the present invention; and FIG. 5 illustrates a flow diagram showing a method for enabling cross-language object sharing, in accordance with an embodiment of the present invention.DETAILED DESCRIPTION The subject matter of the present invention is described with specificity herein to meet statutory requirements. However, the description itself is not intended to limit the scope of this patent. Rather, the inventors have contemplated thatthe claimed subject matter might also be embodied in other ways, to include different steps or combinations of steps similar to the ones described in this document, in conjunction with other present or future technologies. Moreover, although the terms""step"" and/or ""block"" may be used herein to connote different elements of methods employed, the terms should not be interpreted as implying any particular order among or between various steps herein disclosed unless and except when the order ofindividual steps is explicitly described. Embodiments of the present invention are directed to storing typename information at a server or data store for objects such that when a client requests to open a particular object, typename information is communicated to that client. Typenames, according to embodiments of the present invention, are friendly, shareable typenames that are agreed upon in advance by a plurality of clients who will be sharing objects such that the typenames are not language-specific, but can be understoodby many languages, even those languages that do not currently exist but that may be developed in the future. Typename information is provided to the object server when an object is created so that this information can be stored and communicated to anyclient who requests to open that particular object in the future. The client utilizes the typename information to create a correct instance of that object. Once an object is created by a client, the object may be updated by that client or other clientswho have previously agreed (e.g., by way of an implicit contract) as to the structure of the object based on the agreed upon typename information that is shared between multiple clients with programs written in various languages, including strongly typedand dynamically typed languages. Accordingly, in one aspect, an embodiment of the present invention is directed to one or more computer storage media storing computer-useable instructions that, when used by one or more computing devices, cause the one or more computing devicesto perform a method of enabling cross-language object sharing. The method includes receiving from a first client a create request to create an object. The create request includes typename information associated with the object. Further, the methodincludes creating the object according to the create request, storing the typename information, one or more properties of the object, and data associated with the object, and receiving from a second client an open request to open the object. The methodadditionally includes communicating the data associated with the object, the one or more properties associated with the object, and the typename information for the object to the second client. The second client, using the typename information, is ableto correctly utilize the data to create a correct instance of the object. In another embodiment, an aspect of the invention is directed to one or more computer storage media storing computer-useable instructions that, when used by one or more computing devices, cause the one or more computing devices to perform amethod of enabling cross-language object sharing. The method includes storing, at a server, data, typename information, and properties associated with a plurality of objects that have been created for use by a plurality of clients. The plurality ofclients have previously agreed on a structure of the plurality of objects based on the typename information corresponding to each of the plurality of objects. The method further includes receiving an open request from a first client of the plurality ofclients to open an object of the plurality of objects, wherein the client utilizes a strongly typed language, retrieving from the server the data, the typename information, and the properties associated with the requested object, and communicating thedata, the typename information, and the properties associated with the requested object to the client such that the client, using the typename information, is able to create a correct instance of the object. A further embodiment of the present invention is directed to an object sharing system including one or more computing devices having one or more processors and one or more computer storage media. The object sharing system includes a createrequest receiving component that receives from a dynamically typed client a create request to create an object. The create request includes typename information associated with the object, and wherein the dynamically typed client utilizes a dynamicallytyped language. The system further includes an object creation component that creates the object according to the create request and a storing component that stores the typename information, one or more properties of the object, and data associated withthe object. Additionally, the system includes an open request receiving component that receives from a strongly typed client an open request to open the object. The strongly typed client utilizes a strongly typed language. The system also includes acommunication component that, upon a notification that the open request has been received, communicates the data associated with the object, the one or more properties associated with the object, and the typename information for the object to thestrongly typed client such that the strongly typed client, using the typename information, is able to correctly utilize the data to create a correct instance of the requested object. Having briefly described an overview of embodiments of the present invention, an exemplary operating environment in which embodiments of the present invention may be implemented is described below in order to provide a general context forvarious aspects of the present invention. Referring initially to FIG. 1 in particular, an exemplary operating environment for implementing embodiments of the present invention is shown and designated generally as computing device 100. Computing device100 is but one example of a suitable computing environment and is not intended to suggest any limitation as to the scope of use or functionality of the invention. Neither should the computing device 100 be interpreted as having any dependency orrequirement relating to any one or combination of components illustrated. The invention may be described in the general context of computer code or machine-useable instructions, including computer-executable instructions such as program modules, being executed by a computer or other machine, such as a personal dataassistant or other handheld device. Generally, program modules including routines, programs, objects, components, data structures, etc., refer to code that perform particular tasks or implement particular abstract data types. The invention may bepracticed in a variety of system configurations, including handheld devices, consumer electronics, general-purpose computers, more specialty computing devices, etc. The invention may also be practiced in distributed computing environments where tasks areperformed by remote-processing devices that are linked through a communications network. With reference to FIG. 1, computing device 100 includes a bus 110 that directly or indirectly couples the following devices: memory 112, one or more processors 114, one or more presentation components 116, input/output (I/O) ports 118,input/output components 120, and an illustrative power supply 122. Bus 110 represents what may be one or more busses (such as an address bus, data bus, or combination thereof). Although the various blocks of FIG. 1 are shown with lines for the sake ofclarity, in reality, delineating various components is not so clear, and metaphorically, the lines would more accurately be grey and fuzzy. For example, one may consider a presentation component such as a display device to be an I/O component. Also,processors have memory. The inventors recognize that such is the nature of the art, and reiterate that the diagram of FIG. 1 is merely illustrative of an exemplary computing device that can be used in connection with one or more embodiments of thepresent invention. Distinction is not made between such categories as ""workstation,"" ""server,"" ""laptop,"" ""handheld device,"" etc., as all are contemplated within the scope of FIG. 1 and reference to ""computing device."" Computing device 100 typically includes a variety of computer-readable media. Computer-readable media can be any available media that can be accessed by computing device 100 and includes both volatile and nonvolatile media, removable andnon-removable media. By way of example, and not limitation, computer-readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile, removable and non-removable mediaimplemented in any method or technology for storage of information such as computer-readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or othermemory technology, CD-ROM, digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium, which can be used to store the desired informationand which can be accessed by computing device 100. Communication media typically embodies computer-readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism andincludes any information delivery media. The term ""modulated data signal"" means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation,communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared and other wireless media. Combinations of any of the above should also be included within the scope ofcomputer-readable media. Memory 112 includes computer-storage media in the form of volatile and/or nonvolatile memory. The memory may be removable, non-removable, or a combination thereof. Exemplary hardware devices include solid-state memory, hard drives,optical-disc drives, etc. Computing device 100 includes one or more processors that read data from various entities such as memory 112 or I/O components 120. Presentation component(s) 116 present data indications to a user or other device. Exemplarypresentation components include a display device, speaker, printing component, vibrating component, etc. I/O ports 118 allow computing device 100 to be logically coupled to other devices including I/O components 120, some of which may be built in. Illustrative components include a microphone, joystick, game pad, satellite dish, scanner, printer,wireless device, etc. Referring now to FIG. 2, a block diagram is provided illustrating an exemplary computing system environment 200 suitable for use in implementing embodiments of the present invention. It will be understood and appreciated by those of ordinaryskill in the art that the computing system environment 200 shown in FIG. 2 is merely an example of one suitable computing system environment and is not intended to suggest any limitation as to the scope of use or functionality of embodiments of thepresent invention. Neither should the computing system environment 200 be interpreted as having any dependency or requirement related to any single module/component or combination of modules/components illustrated therein. Among other components notshown, the system 200 includes client devices 202 and 204, object server 208, and a data store 220, all in communication with one another through a network 206. The network 206 may include, without limitation, one or more local area networks (LANs)and/or wide area networks (WANs). Such networking environments are commonplace in offices, enterprise wide computer networks, intranets, and the Internet. Accordingly, the network 206 is not further described herein. In some embodiments, one or more of the illustrated components/modules may be implemented as stand-alone applications. In other embodiments, one or more of the illustrated components/modules may be integrated directly into other components. Itwill be understood by those of ordinary skill in the art that the components/modules illustrated in FIG. 2 are exemplary in nature and in number and should not be construed as limiting. Any number of components/modules may be employed to achieve thedesired functionality within the scope of embodiments hereof. Further, components/modules may be located on any number of servers, client devices, or the like. By way of example only, object server 208 might reside on a larger server, cluster ofservers, or a computing device remote from one or more of the remaining components. Objects, as used herein, refer to any entity that is able to be manipulated by commands of one or more programming languages, such as value, variable, function, or data structure. In software development, objects are used to implement abstractdata structures by bringing together the data components with the procedures that manipulate them. Properties are generally characterized by three distinct properties. These properties include (1) an identity of the object (the property of an objectthat distinguishes it from other objects); (2) a state that describes the data stored in the object; and (3) behavior, which describes methods in the object's interface by which the object can be used. An object stores its state in fields, or variablesin some programming languages, and exposes its behavior through methods or functions in some programming languages. Many instances of a particular object may exist, and thus these instances belong to a particular class, which is the blueprint from whichindividual objects are created. While clients utilizing or written in different programming languages are typically unable to share the same objects, embodiments of the present invention enable cross-language object sharing. For instance, while strongly typed languages, suchas Java, C#, Pascal, Ada, C, or C++, have typenames and fixed properties, dynamically typed languages, such as APL, Erlang, Groovy, JavaScript, Lisp, Lua, MATLAB/GNU Octave, Perl, PHP, Prolog, Python, Ruby, Smalltalk, Clojure, or Tcl, do not have a typesystem with fixed properties. These differences make object sharing inherently problematic. Embodiments of the present invention provide an explicit type resolution where developers provide a type resolver that maps from a concrete strong type into ashareable typename. For example, a strongly typed class of Microsoft.Foo.Bar could map to the C++ type CBar and to a dynamic JavaScript object that is filled with matching properties. The developer creates a direct 1:1 mapping between types it wants toshare and friendly, shareable names. A prerequisite is that all clients agree on the same typename such that objects can be shared across clients of all language types. As used herein, a typename is any uniquely identifiable piece of information. Inone embodiment, the typename is a human readable string, such as ""Square"" or ""PersonV1,"" but it could also be any unique binary value or number. Javascript (and other dynamically typed languages) and C# (and other strongly typed languages) have inherently distinct approaches to object typing. While C#, C, C++, etc. are traditional strongly typed languages, Javascript is dynamic andprovides an extremely high level of flexibility. An object server, as further described herein, can be used to provide metadata about an object when that object is being requested so that strong typing can be enforced on the strongly typed clients. Insome instances, a resolver may be used so that types in strongly typed languages can be mapped to string and strings can be mapped back into types in strongly typed languages. The resolver enables bidirectional mapping between a developer-specifiedtypename and a strong type in a language, such as C#. In embodiments, resolvers are used only for strongly typed languages, and not for dynamically typed languages. For instance, when an object payload is received at a strongly typed client, theregistered resolver would retrieve the language-specific typename. If a type resolver is not specified, the system may attempt to construct the type using the typename information associated with the object. If that fails, the object will default toload into a dynamic object, although most strongly typed languages do not support dynamic objects. Object versioning is also possible, such that if a version change occurs in a strongly typed object, developers may have the option of changing thetypename to indicate a version change. Another aspect to the present invention is the implicit type resolution. In the implicit model, the type resolution is all done implicitly by each client. For example, a .NET client, when it opens a shared object of name ""MyBar"" would providethe concrete .NET type it expects to be filled with shared information. The .NET client would then fill that type with information based on the set of shared properties the server has a record of. The server, in this scenario, is not provided with afriendly or shared typename. In one embodiment, the system can run in a mixed mode where some clients are using implicit type resolution and others are using explicit type resolution. The named shared object and named shared collection on all clientsmust implicitly agree as to which properties those objects and collections contain. In both scenarios, both implicit and explicit, the client may specify whether it wants tight or loose binding for missing properties. If loose binding is specified, thestrongly typed object is allowed to contain only a subset of the properties that the server has for that particular object. In a tightly bound configuration, the client would receive an error while trying to open a shared object with properties thatdon't map exactly to the server view of the object. With continued reference to FIG. 2, each of the client devices 202 and 204, and the object server 208 may be any type of computing device, such as computing device 100 described with reference to FIG. 1, for example. The components maycommunicate with each other via a network 206, which may include, without limitation, one or more local area networks (LANs) and/or wide area networks (WANs). Such networking environments are commonplace in offices, enterprise wide computer networks,intranets, and the Internet. It should be understood that any number of client devices, servers, and data stores may be employed within the system 200 within the scope of the present invention. Each may comprise a single device or multiple devicescooperating in a distributed environment. For instance, the object server 208 may comprise multiple devices arranged in a distributed environment that collectively provide the functionality of the object server 208 described herein. Additionally, othercomponents not shown may also be included within the system 200, while components shown in FIG. 2 may be omitted in some embodiments. The client devices 202 and 204 may be any type of computing device owned and/or operated by a client that can access the network 206. For instance, each of the client devices 202 and 204 may be a desktop computer, a laptop computer, a tabletcomputer, a mobile device, or any other device having network access. Generally, a client may employ the client devices 202 and 204 to, among other things, create a program using a particular programming language that can create and request shareableobjects from the object server 208. The object server 208 comprises multiple components, some of which are illustrated in FIG. 2. These include a request receiving component 210, an object creation component 212, a storing component 214, an open request receiving component 216,and a communicating component 218. In one embodiment, the create request receiving component 210 receives a create request from a client to create an object. The client that requests creation of an object may be implemented in either a strongly typedor dynamically typed language. The create request includes typename information, which is stored at the server or in a data store in association with the object data and properties. The client that creates an object may utilize a strongly typedlanguage or a dynamically typed language. As dynamically typed languages don't have typenames as do strongly typed languages, embodiments of the present invention provide for a client that utilizes a dynamically typed language or for a client thatutilizes a strongly typed language to provide a friendly, shareable, non-language specific typename when creating a new object, which allows for sharing of the newly created object between clients of disparate languages. For instance, a strongly typedclient (e.g., a client that utilizes a strongly typed language) may now be able to open an object created by a dynamically typed client (e.g., a client that utilizes a dynamically typed language), as typename information is now available and can be usedby strongly typed clients to create a correct instance of that object. Each time a strongly typed client instantiates an instance of a particular object, the computer will allocate memory to have a place to store various data that comprises the object. For instance, for the class ""person,"" at least two properties may be associated with that class, including first name and last name, such that each time an object belonging to the class ""people"" is opened, a computer running a strongly typed languageclient will allocate memory to have a place to store a first and last name. If the client wants to add an address field, the source code would have to be changed, recompiled, and the class's definition would have to be modified to add an address fieldor property. Regardless of whether the client requesting creation of an object is implemented in a dynamically typed or strongly typed language, typename information is provided to the server upon creation of an object. The object creation component 212 is configured to create an object according to the create request received by the create request receiving component 210. Further, the storing component 214 is configured to store various types of informationassociated with the object, including data that comprises the object, properties associated with the object, and typename information that has been assigned to that particular object or class of objects. The storing component 214, in one embodiment, isconfigured to communicate the object information to be stored in the data store 220. While just one data store 220 is illustrated in FIG. 2, multiple data storage units may be utilized to practice embodiments of the present invention. The open request receiving component 216 is configured to receive open requests from clients to open a particular object. The object information that is sent along with the open request may vary from instance to instance, and from client toclient. For example, strongly typed clients may know the typename of a particular object that it wants to open, and as such may send this information to the object server 208, and particularly the open request receiving component 216, along with theopen request. Dynamically typed clients, on the other hand, may not know the actual typename associated with a particular object, as they typically do not use typenames, and as such may not send the actual typename along with the open request. Instead,in one embodiment, dynamically typed clients may send typename information (e.g., hint or alias) which corresponds to the typename information agreed upon by the clients ahead of time. As such, the typename information works across different languagesand basically operates as an alias as to the actual typename on the different shared languages. In one embodiment, the typename information (e.g., hint or alias) is defined by the developer such that multiple hints can map to the same system typename,or actual typename. The object server 208 may do a comparison to determine whether the typename information provided by the client matches the typename information stored at the server or in a data store, such as the data store 220. If the objectserver 208 or one of its components determines that the typename information matches (e.g., person versus Foo.person), the object information will be communicated to the requesting client with the typename information stored at the object server 208. But if the typename information does not match (e.g., toaster versus person), an error message may be generated and sent to the requesting client. In one instance, the object server 208 sends the object information back to the requesting client, butindicates that it may not be the object that the client is expecting or searching for. The object server 208 stores the typename for a given object, but may not have a way to enforce that the object matches the type. As such, it may be theresponsibility of the clients to obey their implicit contract that defines typename information for each object, wherein the typename information is sharable across different languages. In one embodiment, after an open or create request is made to the object server, the object server may include the following in its response to the client: OpenObject ""President1"" (TypeName=""Person"", Properties FirstName=GeorgeLastName=Washington. In this embodiment, the object server has stored the type information of ""Person"" so that when it receives this typename information from the client, it can match which object the client is requesting. The object server can thendetermine that ""Person"" typename information corresponds to the stored typename of ""Foo.Person,"" which is returned to the requesting client along with data and properties associated with that object. The communicating component 218 is configured to communicate object information to the requesting client upon receiving a notification that the open request has been received at the object server 208, or more particularly at the open requestreceiving component 216. As mentioned, the object information may include typename information, data, and properties associated with the object. Turning to FIG. 3, a flow chart is illustrated showing a method 300 for creating and opening shared objects, according to an embodiment of the present invention. The components of FIG. 3 include a dynamically typed client 310, a strongly typedclient 312, and an object server 314. What is meant by a dynamically typed client is a client that is programmed utilizing a dynamically typed language. What is meant by a strongly typed client is a client that is programmed utilizing a strongly typedlanguage. Examples of each language type are provided herein. At step 316, the dynamically typed client 310 determines to create a new object and, as such, communicates 318 an object create request 320 to the object server 314. The object createrequest 320 includes typename information that can be used by other clients that open this object in the future, as the typename information indicates to the clients how to create a correct instance of the object for their specific programming languagetype. At step 322, the object server 314 creates the object according to the object create request 320 and stores the typename information and other object information (e.g., data and properties) at step 324. The object server 314 communicates 326 an acknowledgement 328 to the dynamically typed client 310 acknowledging that the object has been created. At this point, any other client, either dynamically typed or strongly typed, may elect to open theobject that was just created. As shown here, initially a dynamically typed client 310 attempts to open the object. While it is shown in FIG. 3 that the same dynamically typed client 310 that created the object is now opening it, any other dynamicallytyped client could also open the object in the same manner. The dynamically typed client 310 communicates 330 an open request 332 to the object server 314. The object server 314, at step 334, may access a data store to determine and locate the objectinformation stored in association with the requested object. In one embodiment, typename information, data, and properties associated with the object are located by the object server 314 at step 334. This object information 338 is communicated 336 tothe requesting client, or here the dynamically typed client 310. The dynamically typed client 310 may then use the object information 338 at step 340 to instantiate the correct instance of the object according to its particular language type. Next, a strongly typed client 312 attempts to open the object that was previously created. The strongly typed client 312 communicates 342 an open request 344 to the object server 314. Because the requesting client utilizes a strongly typedlanguage, the open request, in one embodiment, includes the typename information. In another embodiment, however, the particular strongly typed client 312 that is requesting to open the object may be a client that is utilizing a new programminglanguage, and thus may not know the type information. Alternatively, a program using new program logic may expect or require that a particular object is a ""person"" (which could resolve to ""Foo.person""), in which case it could provide ""person"" as thetypename to the object server to have the server enforce the type match. Or, it may not know the type of the object ahead of time and just create the object after learning the typename from the server and resolving it. In either case, the object server314, at step 346, accesses a data store to identify the object information that it needs to send to the requesting client. The object server 314 communicates 348 the object information 350, including the typename information, to the strongly typedclient 312. The strongly typed client 312 then uses the typename information at step 352 to instantiate the correct instance of the object, based on its particular language. FIG. 4 illustrates a flow diagram showing a method 400 for enabling cross-language object sharing, in accordance with an embodiment of the present invention. Initially, at step 410, a create request is received from a first client to create anobject. The create request includes typename information associated with the object. The typename information, in one embodiment, is not language-specific, and thus can be read and understood by nearly any programming language, which enablescross-language object sharing, as described herein. For instance, prior to creating objects, clients utilizing a variety of languages may agree on typename information such that they all know, ahead of time, how to handle objects associated with varioustypenames. The first client may be a client that utilizes a dynamically typed language, such as APL, Erlang, Groovy, JavaScript, Lisp, Lua, MATLAB/GNU Octave, Perl, PHP, Prolog, Python, Ruby, Smalltalk, Clojure, or Tcl, or a client that utilizes astrongly typed language, such as Java, C#, Pascal, Ada, C, or C++. At step 412, the object is created according to the create request. The typename information, properties, and data associated with the object are stored at step 414. The dataassociated with the object may include key value pairs, including a field name and values for that field. In one embodiment, this object information is stored on a server or on a data store accessible by the server. An open request to open the objectis received from a second client at step 416. In one embodiment, the first client and the second client utilize different language types. For instance, if the first client utilizes a dynamically typed language, then the second client utilizes a strongly typed language, but if the firstclient utilizes a strongly typed language, then the second client utilizes a dynamically typed language. In an alternate embodiment, both the first and second clients utilize the same type of language, but different languages. At step 418, the data,properties, and the typename information associated with the object are communicated to the second client so that the second client is able to correctly utilize the data to create a correct instance of the object using the typename information. Inembodiments, creating the correct instance of the object includes creating a container of an appropriate size for the data that comprises the object. Without the typename information, the second client, especially if utilizing a strongly typed language,would now know how to create the correct instance of the requested object. In one instance, the second client may utilize a programming language that is well-known and that has been used for some time. In another instance, however, the second clientmay utilize a newly developed programming language, and without embodiments of the present invention, that client would not know what to do with the object information it receives, such as if it didn't know what to do with the typename information thatit receives. Further, for a strongly typed language, the developer may need to provide a mapping from the typename to a type that it defines. Regardless of whether the language is new or not, as long as it is strongly typed. As mentioned, strongly typed languages, as used herein, are those programming languages that require all variables to have a defined type. Dynamically typed languages, to the contrary, are high-level programming languages that execute atruntime many common behaviors that other languages, such as strongly typed languages, might perform during compilation, if at all. These behaviors could include extension of the program, by adding new code, by extending objects and definitions, or bymodifying the type system, all during program execution. In one embodiment, the typename information provided by the second client is different than the typename information stored by the server, for example. If the typename information received by the second client is different than that stored onthe server, an error message may be communicated to the second client indicating that it has requested to open an object that may not exist, or that the second client has provided inaccurate information. However, in that case that the typenameinformation provided by the second client matches to the typename information stored at the server, the data, properties, and typename information associated with the object are communicated to the second client. The second client may have provided ahint or alias as to the actual typename of the request object. Referring to FIG. 5, a flow diagram is illustrated of method 500 for enabling cross-language object sharing, in accordance with an embodiment of the present invention. At step 510, data, typename information, and properties associated with aplurality of objects are stored at a server. The objects have been created by a plurality of clients that have previously agreed on how to share the object based on typename information. At step 512, an open request is received from a first client toopen an object that has already been created. In one instance, the first client utilizes a strongly typed language. The data, typename information, and properties associated with the requested object are retrieved from the server at step 514 to sendback to the first client. This object information is communicated to the client at step 516 such that the client, using the typename information, is able to create a correct instance of the object. In embodiments, the typename information comprises atypename associated with the object that is not language specific. In one instance, the typename is associated with the object at the time of the object's creation such that the client that creates the object is responsible for providing a typename tothe server when the object is created. For example, the object may have been created by a second client that utilizes either a dynamically or strongly typed language. As can be understood, embodiments of the present invention provide for cross-language object sharing. The present invention has been described in relation to particular embodiments, which are intended in all respects to be illustrative ratherthan restrictive. Alternative embodiments will become apparent to those of ordinary skill in the art to which the present invention pertains without departing from its scope. From the foregoing, it will be seen that this invention is one well adapted to attain all the ends and objects set forth above, together with other advantages which are obvious and inherent to the system and method. It will be understood thatcertain features and subcombinations are of utility and may be employed without reference to other features and subcombinations. This is contemplated by and is within the scope of the claims."
14|http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=71&p=2&f=G&l=50&d=PTXT&S1=(python.CLTX.+or+python.DCTX.)&OS=ACLM/python&RS=ACLM/python|Automated lamp stack migration|Embodiments of the present invention provide a method, system and computer program product for automated LAMP stack data migration. In an embodiment of the invention, a method for automated LAMP stack data migration can be provided. The method can include retrieving a profile for a LAMP stack executing in a source operating platform, selecting a LAMP stack for deployment onto a target operating platform and deploying the selected LAMP stack onto the target operating platform. The method further can include translating the retrieved profile for compatibility with the selected LAMP stack, directing a reboot of the target operating platform, and applying the translated profile to the target operating platform.|
15|http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=67&p=2&f=G&l=50&d=PTXT&S1=(python.CLTX.+or+python.DCTX.)&OS=ACLM/python&RS=ACLM/python|Method and system for dynamic digital rights bundling|"Methods and systems for dynamically bundling portions into secured destination files are provided. Example embodiments provide a Dynamic Digital Rights Bundling System (""DDRBS""), which dynamically bundles a set of portions each variously containing digital rights management components, user interface controls, and content, into a secured destination file in response to a designated content request. In one embodiment, the DDRBS comprises a bundling engine, a translation engine, a merging engine, and an assortment of data repositories. These components cooperate to dynamically assemble and provide customized secured destination files comprising the requested content together with specialized user interface and digital rights management controls. This abstract is provided to comply with rules requiring an abstract, and it is submitted with the intention that it will not be used to interpret or limit the scope or meaning of the claims."|
16|http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=97&p=2&f=G&l=50&d=PTXT&S1=(python.CLTX.+or+python.DCTX.)&OS=ACLM/python&RS=ACLM/python|Embedded distributed computing solutions|Methods and Systems are provided for participating in distributed computing. The distributed computing program instructions are embedded in content delivered to a client computer. The client computer renders the content delivered from the server and executes the program instructions generating solutions for datasets delivered from the server, thus participating in distributed computing.|"1. A method of distributed computing, comprising: embedding first program instructions in a first streaming content, the first program instructions being configured tocompute a first calculation result for the distributed computing intended to solve a problem; detecting at a server a first request sent from a first client for the first streaming content via a network; sending the first streaming content and thefirst program instructions embedded in the first streaming content from the server to the first client in response to the first request, said first program instructions being configured to be executed at the first client; receiving at the server thefirst calculation result of the first program instructions, said first calculation result being sent to the server from the first client; embedding second program instructions in a second streaming content, the second program instructions beingconfigured to compute a second calculation result for the distributed computing intended to solve said problem; detecting at the server a second request sent from a second client for the second streaming content via a network; sending the secondstreaming content and the second program instructions embedded in the second streaming content from the server to the second client in response to the second request, said second program instructions being configured to be executed at the second client; receiving at the server the second calculation result of the second program instructions, said second calculation result being sent to the server from the second client; embedding third program instructions in a third streaming content, said thirdprogram instructions being the same as said second program instructions; detecting at the server a third request sent from a third client for the third streaming content via a network; sending the third streaming content with the third programinstructions embedded in the third client in response to the third request, said third program instructions being configured to be executed at the third client; receiving at the server a third calculation result from the third client; and using thethird calculation result from the third client to validate the second calculation result from the second client; wherein the first calculation result and the second calculation result received at the server both contribute towards solving said problem. 2. The method of claim 1, wherein executing the first program instructions occurs while the first streaming content is being downloaded. 3. The method of claim 1, wherein at least a portion of the first streaming content conforms to a standard selected from a group consisting of HTML, SVG, MP3, MP4, WMA, WMV and MPEG; and wherein the first streaming content is configured to berendered resulting in playing audio, video or both audio and video. 4. The method of claim 1, further comprising: detecting termination of rendering the first streaming content; and stopping execution of the first program instructions in response to the termination. 5. The method of claim 1, wherein the first program instructions conform to a standard selected from a group consisting of Java script, VB script, Perl script, Python script, CGI script, .NET script, and executable code. 6. The method of claim 1, wherein the first and second program instructions are part of a plurality of programs of instructions; and wherein a plurality of client computers each executes one of the plurality of programs of instructions, eachof the plurality of client computers solving a unique dataset. 7. The method of claim 1, wherein executing the first program instructions is delayed until a portion of the first streaming content has been rendered. 8. The method of claim 1, wherein at least a portion of the first program instructions are executed before said first streaming content is rendered. 9. The method of claim 1, wherein the first calculation result, the second calculation result, and a plurality of other calculation results received at the server both are used to solve said problem. 10. A method of participating in distributed computing, comprising: connecting a server to a network; receiving a first content request sent from a first client to the server; delivering from the server to the first client a first streamingcontent responsive to the first content request, the first streaming content containing first program instructions configured to compute a first calculation result for the distributed computing intended to solve a problem; receiving at the server thefirst calculation result of the first program instructions, said first calculation result being sent to the server from the first client; receiving a second content request sent from a second client to the server; delivering from the server to thesecond client a second streaming content responsive to the second content request, the second streaming content containing second program instructions configured to compute a second calculation result for the distributed computing intended to solve saidproblem; receiving at the server the second calculation result of the second program instructions, said second calculation result being sent to the server from the second client; embedding third program instructions in a third streaming content, saidthird program instructions being the same as said second program instructions; receiving a third content request sent from a third client to the server; delivering from the server to the third client the third streaming content responsive to the thirdcontent request, the third streaming content containing third program instructions configured to compute a third calculation result for the distributed computing intended to solve said problem; receiving at the server the third calculation result fromthe third client; and using the third calculation result from the third client to validate the second calculation result from the second client; wherein the first calculation result and the second calculation result received at the server bothcontribute towards solving said problem. 11. The method of claim 10, wherein at least a portion of the first streaming content conforms to a standard selected from a group consisting of HTML, SVG, MP3, MP4, WMA, WMV and MPEG; and wherein the first streaming content is configured tobe rendered resulting in playing audio, video or both audio and video. 12. The method of claim 10, wherein the first program instructions are selected from a group consisting of Java script, VB script, Perl script, Python script, CGI script, .NET script, and executable code. 13. The method of claim 10, wherein at least a portion of the first program instructions are executed before said first streaming content is rendered. 14. The method of claim 10, wherein the first calculation result, the second calculation result, and a plurality of other calculation results received at the server both are used to solve said problem. 15. A server participating in distributed computing, comprising: a communication interface configured to couple to a network for sending a first streaming content from the server to a first client, and for sending a second streaming contentfrom the server to a second client; a memory suitable for storing a first set of program instructions configured for calculating a first calculation result and for storing a second set of program instructions configured for calculating a secondcalculation result, said first and second calculation results both being configured to contribute to solving a distributed computing problem; and a processor configured to detect a first request from the first client for said first streaming content andto detect a second request from the second client for said second streaming content, the processor further being configured to send the first set of program instructions and the first streaming content to said first client in response to the firstrequest and to send the second set of program instructions and the second streaming content to said second client in response to the second request; wherein the set of first program instructions is embedded in the first content and the set of secondprogram instructions is embedded in the second content; wherein the memory is further configured to store the first calculation result received from the first client in response to execution of the first set of program instructions by the first client,the memory further being configured to store the second calculation result received from the second client in response to execution of the second set of program instructions by the second client; wherein the first calculation result and the secondcalculation result received at the server both contribute towards solving said problem; wherein the communication interface is further configured to couple to the network for sending third program instructions embedded in a third streaming content, saidthird program instructions being the same as said second program instructions; wherein the memory is further configured to store a third calculation result from a third client executing the third program instructions; and wherein the third calculationresult from the third client validates the second calculation result from the second client. 16. The server of claim 15, wherein at least a portion of the streaming content conforms to a standard selected from a group consisting of HTML, SVG, MP3, MP4, WMA, WMV and MPEG; and wherein the first streaming content is configured to berendered resulting in playing audio, video or both audio and video. 17. The server of claim 15, wherein the first program instructions are selected from a group consisting of Java script, VB script, Perl script, Python script, CGI script, .NET script, and executable code. 18. The server of claim 15, further comprising: a plurality of client computers coupled to the network, wherein the first client and the second client are both included as part of the plurality of client computers; the first and second clientcomputers respectively receiving the first and second streaming content and first and second program instructions; and the first and second client computers respectively rendering the first and second content and respectively executing the first andsecond program instructions, the first and second program instructions configured to contribute towards solving the problem. 19. The server of claim 15, wherein at least a portion of the first program instructions are executed before said first streaming content is rendered. 20. The server of claim 15, wherein the first calculation result, the second calculation result, and a plurality of other calculation results received at the server both are used to solve said problem. Description BACKGROUND 1. Field The present invention relates to software, and more specifically, to methods, systems and software products for enabling participation in distributed computing. 2. Background Processing intensive problems can be solved by segmenting the calculations into smaller computing problems then assigning these smaller computing problems to networked computer systems, for example, making use of CPU and storage on the networkedcomputer. Distributed computing is a method of computer processing in which different parts of a computing problem are given to multiple computers. These computers calculate the solution for the part of the problem assigned, and then return the resultsto a server or another networked computer. Distributed computing may harness CPU cycles and storage space of many computers to solve massive computing problems. This type of computing may be, among other things, referred to as distributed computing,segmented computing, parallel computing, volunteer computing, or grid computing. SETI@home is an example distributed computing project using internet connected computers. The SETI@home server is hosted by the Space Sciences Laboratory at the Universityof California, Berkeley. SETI@home was released to the public on May 17, 1999. To participate in conventional distributed computing, client computers require a software package installed on the system. This software package is typically downloaded by a computer operator to a computer system then installed by the computeroperator to the computer system. In other words, existing distributed computing solutions require the user to install complex software. This tends to reduce the amount of user participation.SUMMARY Embodiments are disclosed herein for improved methods, systems and computer products that deliver distributed computing problems to client computers utilizing program instructions embedded in streaming content requested by a client from aserver. In accordance with various embodiments, program instructions are configured to participate in distributed computing. The distributed computing is intended to solve a problem. A request for streaming content via a network is detected and thecontent is sent. When the streaming content is rendered, the program instructions embedded in the content may be executed and the program instructions may contribute towards solving the problem. The program instructions may be executed while thecontent is being downloaded. The program instruction execution may be stopped upon detecting termination of rendering of the streaming content. Executing the program instructions may be delayed until a portion of the content has been rendered. Theremay be a plurality of programs of instruction and a plurality of client computers where each client computer executes one of the programs of instruction so each client computer solves a unique dataset. BRIEF DESCRIPTION OF THE DRAWINGS The accompanying drawings, which are incorporated in and constitute part of the specification, illustrate various embodiments of the invention. Together with the general description, the drawings serve to explain the principles of theinvention. In the drawings: FIG. 1A depicts various client devices connected to a server through a network. FIG. 1B is a block diagram depicting features of the exemplary desktop computer system 100 that may be used to implement various embodiments of the invention. FIG. 2 depicts functional aspects of the server as well as functional aspects of the client devices. FIG. 3 depicts a flowchart of an exemplary method a server may use in communicating with a client computer that may be used to implement various embodiments of the invention. FIG. 4 depicts an exemplary flowchart a client may use in communicating with a server computer that may be used to implement various embodiments of the invention FIG. 5A lists exemplary HTML code demonstrating an external file containing program instructions. FIG. 5B lists exemplary HTML code demonstrating program instructions embedded in the HTML code. FIG. 5C lists exemplary SVG code demonstrating program instructions embedded in the SVG code.DETAILED DESCRIPTION Various embodiments disclosed herein utilize computer program instructions embedded with content from the server to solve a portion of a distributed computing problem. Distributed computing is a method of computer processing in which different parts of a program run simultaneously on two or more computing devices that are communicating over a network. Distributed processing may require that a program besegmented--divided into sections that can run simultaneously. Distributed computing also requires that the division of the program take into account the different environments on which the different sections of the program will be running. For example,two computing devices may have different file systems and different hardware components. A computer system participating in distributed computing is using resources to aid in coming up with a solution to the distributed computing solution. A server orcentral computer may participate in distributed computing by distributing the computing workload between clients and collating the results of the client's calculations. Client computers may participate in distributed computing by using local processingand storage resources to calculate a solution for part of the distributed problem, then send the results to the client. In this context, participation does not mean the server or client need to come to a solution. FIG. 1A shows multiple types of computing devices, also known as clients 70, connected through a network 80 to a server 90. Client computing devices may be, but are not limited to, desktop computers 100, notebook computers 110, PDAs (PersonalData Assistants) 120, Tablet computers 130, cell phones 140, and other like devices capable of processing instructions and sending and receiving signals. The network 80 may be required for the client to download the content and program instructions,however, the client may then disconnect from the network. The content may be rendered offline as well as the program instructions may execute offline. The program instructions may communicate the results to the server when the client connects to thenetwork 80 again. FIG. 1B is a block diagram depicting features of the exemplary desktop computer system 100 that may be used to implement various embodiments of the invention. It should be noted that notebook computers 110, PDAs 120, Tablet computers 130 andcell phones 140 suitable for implementing the various embodiments may also have many of the features depicted in FIG. 1B. The computer system 100 includes a processor 101 which may be embodied as a microprocessor or central processing unit (CPU). Theprocessor 101 is typically configured to access an internal memory 103 via a bus such as the system bus 150. The internal memory 103 may include one or more of random access memory (RAM), read-only memory (ROM), cache memory, or a combination of theseor other such circuitry configured to store information in a retrievable format. In some implementations the internal memory 103 may be configured as part of the processor 101, or separate from it but within the same packaging. The processor 101 may beable to access internal memory 103 via a different bus, or via control lines (e.g., local bus 105) than it uses access the other components of computer system 100. The computer system 100 also typically includes, or has access to, one or more storage drives 107 and floppy disk drives 109. The storage drive 107 is often a hard disk drive configured for the storage and retrieval of data, computer programsor other information. The floppy disk drives 109 may include a combination of several disc drives of various formats that can read and/or write to removable machine readable medium. The machine readable medium may be any of the various availablestorage formats, including, for example, CD-R, CD-RW, DVD, DVD-R, floppy disk, or the like. The computer system 100 may either include the storage drives 107 and floppy disk drives 109 as part of its architecture (e.g., within the same cabinet orenclosure), as connected peripherals, or may access the storage drives 107 and floppy disk drives 109 over a network, or a combination of these. The storage drive 107 is often used to store the software, instructions and programs executed by thecomputer system 100. The computer system 100 may include communication interfaces 111 configured to be communicatively connected to the Internet, a local area network (LAN), a wide area network (WAN), or connect with other devices using protocols such as theUniversal Serial Bus (USB), the High Performance Serial Bus IEEE-1394 and/or the high speed serial port (RS-232). The components of computer system 100 may be interconnected by a bus 150 and/or may include expansion slots conforming to any of variousindustry standards such as PCI (Peripheral Component Interconnect), ISA (Industry Standard Architecture), or EISA (enhanced ISA). Typically, the computer system 100 includes one or more user input/output devices such as a keyboard and/or mouse 113, or other means of controlling the cursor (e.g., touchscreen, touchpad, joystick, trackball, etc.) represented by the userinput devices 115. A display 117 is also generally included as part of the computer system 100. The display may be any of several types of displays, including a liquid crystal display (LCD), a cathode ray tube (CRT) monitor, a thin film transistor(TFT) array, or other type of display suitable for displaying information for the user. The display 117 may include one or more light emitting diode (LED) indicator lights, or other such display devices. In addition, most computer systems 100 alsoinclude, or are connected to, one or more speakers 119 and microphones 121 for audio output and input. Speech recognition software may be used in conjunction with the microphones 121 to receive and interpret user speech commands. FIG. 2 shows an exemplary embodiment, and some of the functional aspects of various embodiments of the invention. Individual clients 240 connected to the server 90 through the network 80, request content 200 from the server 90. A set ofdistributed computing program instructions 210 are placed with the content 200 and delivered to the client computing device 240. The client 240 renders the content 200 and executes the program instructions 210. In some embodiments of distributed computing, the clients run the same or close to the same computing instructions, but on different datasets. In this embodiment, a server 90 controlling the distributed computing calculates a dataset for theclient 240 to process. The dataset generator 220 may create datasets that are communicated to each computing device 240 participating in the distributed computing. When the client computing device 240 completes the processing of the dataset, theresults may be communicated to the server and processed by the distributed computing results collator 230. FIG. 3 depicts a flowchart of an exemplary method a server may use in communicating with a client computer that may be used to implement various embodiments of the invention. In this embodiment the server 90 receives a request 300 from theclient. Many types of request types can be made aside from the requests of blocks 310, 350, 365 and 390. This exemplary flowchart in no way lists all the intended request types. The server determines what type of request the client computing device240 generated. If it is determined in 310 that the request is a content request the method proceeds from 310 along the ""YES"" path to 320. In 320 the server 90 may package the requested content 320, attach the distributed computing program instructions 330 tothe content, communicate the content and program instructions to the client computing device 240, and wait for the next request or process the next request in the queue 385. The content request 310 is a signal from the client that content is desired. The content request may be in the form of a HTTP protocol GET request through web server port 80. The content delivered to the client may be preexisting, for example a static web page with the program instructions statically attached, or the content maybe generated after the request, for example an active server page. In the embodiment of the distributed program computing instructions 330 taking the form of a script, the distributed program computing instructions 330 may be attached to the content byinserting the distributed program computing instructions 330 and the delimiters for the script into the appropriate section of the requested content 320. Back in 310, if it is determined that the request is not a content request then the method proceedsfrom 310 along the ""NO"" path to 350. If it is determined in 350 that the request is a dataset request the method proceeds from 350 along the ""YES"" path to 355. In 355 the server 90 may determine the next dataset for the client computing device 240 to process. This determinationmay be in part based on looking up the next database in a table, calculating based on the processing capabilities of the client computing device, calculating the dataset based on prior processing the client has completed, or many other factors not listedin this specification. When the next dataset is determined, the server 90 may send the dataset to the client 360, and wait for the next request or process the next request in the queue 385. Back in 350, if it is determined that the request is not adataset request then the method proceeds from 350 along the ""NO"" path to 365. If it is determined in 365 that the request is a communicate results request the method proceeds from 365 along the ""YES"" path to 370. In 370 the server 90 and client computing device 240 may communicate results. The server 90 may use somemethod of validating the results 375 such as but not limited to checking the results are within a reasonable range, or assigning the same dataset to multiple client computing devices 240 and verifying each client returns the same results. Multiplemethods of validation may be used in combination to validate the results. The server 90 may append the results to the solution 380, and wait for the next request or process the next request in the queue 385. Back in 365, if it is determined that therequest is not a communicate results request then the method proceeds from 365 along the ""NO"" path to 390. If, in 390, it is determined that the client request is an other request as denoted in 390, the server 90 may proceed along the ""YES"" branch to 395. In 395 the server 90 processes the ""other"" request. The method then proceeds to 385 to waitfor the next request or process the next request in the queue 385. Dataset requests 350 and requests to communicate results 365 may be communicated to the server 90 through the HTTP port, typically port 80, or may be communicated to the server through aport dedicated for the distributed computing communication. The term server in this example is used to denote any central computer of the distributed computing. This may be the same server as the web server 90 or may be another server separate from theweb server, or may be a single client computer with capabilities to respond to the requests for datasets and results communication. FIG. 4 depicts an exemplary flowchart a client may use in various embodiments of the current invention. The client computing device 240 may make a content request 400 to the server 90. The client computing device 240 may receive content 410from the server 90. This content may have distributed computing program instructions attached. The client computing device 240 may render the content 420. The term render is used here to denote presenting the content to the user. The content may befor example text, graphics, audio, video, a combination of the prior mentioned, or some other type of content or combination thereof. Exemplary formats of the content include: HyperText Markup Language (HTML), Scalable Vector Graphics (SVG), MovingPicture Experts Group Layer-3 Audio (MP3), Moving Picture Experts Group Layer-4 (MP4), Windows Media Audio (WMA), Windows Media Video (WMV), and Moving Picture Experts Group (MPEG). Rendering the content 420 from the server 90 and executing the program instructions 430 may or may not be temporally linked. For example, the content may be rendered before the program instructions are executed allowing the client to experiencethe content while the program instructions are executing. An alternative embodiment may be the program instructions are executed before the content is rendered, using the client's processing and storage as a method of payment for the content. Anotherembodiment may be that rendering the content 420 and executing the program 430 instructions are not temporally linked in that both independently execute and do not necessarily depend on each other. In another embodiment, rendering the content 420 andexecuting the program 430 instructions are synchronous. An example of the rendering and execution being synchronous may be streaming content. In response to the user playing (rendering) the streaming content, the program instructions calculate. Upondetecting the user has stopped playing the streaming content, the program instructions cease calculation and may send the results to the server. In another embodiment the program instructions may execute after a portion of the content has been rendered. An example of the program instructions executing after a portion of the content may be after the introduction of an MP3 song, after the opening credits of a video file, after rendering content for a fixed amount of time, or after rendering content for afixed number of times. Continuing with a sample embodiment described in FIG. 4, the client 240 executes the program instructions 430, the client may make a dataset request and receive a dataset 440, calculate the solution 450 of the dataset, and communicate results tothe server 460. The client 240 may end 480 the calculation steps or may continue the process looping to the dataset request/receive dataset 440 step. The calculation steps may continue for as long as the content is displayed, may end after a singlecalculation, may continue after the content ceases to be displayed, or may exit before a solution is complete. One exemplary embodiment where the calculation may not complete can occur if the calculation is temporally linked to the content beingdisplayed. In such situations, if the content ceases to be displayed before a solution is calculated; the calculation may stop when the content ceases to be displayed. The present invention anticipates multiple forms wherein the program instructions reside such as, but not limited to, Java script, VB script, Perl script Python script, CGI script Perl script, .NET script, or executable code. The executablecode may be machine instructions specific to the client system. The program instructions may include instructions to calculate the dataset solution, or the program instructions may include instructions to download more program instructions from theserver, the downloaded instructions including instructions to calculate the dataset solution. In one embodiment Hypertext Markup Language (HTML) may be used to create a user interface where content is selected and transferred to the client. The HTML listing in FIG. 5A is an example of an external java script that is delivered with thecontent. In this exemplary embodiment, the program instructions take the form, of an external script file named ""calculate.js"". The HTML listing in FIG. 5B is an example of java script embedded in the HTML. In this exemplary embodiment, the programinstructions take the form of a java script embedded in the HTML. In an alternative embodiment, SVG (scalable vector graphics) may be used to create a user interface where graphics are presented as clickable objects that allow the end user to select content. SVG is a W3C (World Wide Web Consortium standardbody) standard for image processing in a World Wide Web document. The SVG specification is based on XML, which also is a W3C standard. SVG is a text-based system and does not require special editors, although a browser plug-in may be needed to render apicture. SVG defines an XML grammar for rich 2D graphics which includes features such as transparency, arbitrary geometry, filter effects (shadows, lighting effects, etc.), scripting and animation. SVG can have, for example, embedded Java scrip code. This code can, as it is loaded by the viewer, do a certain amount of computation and return the result back to a server. Massively parallel problems that individually need little computation can be solved in this fashion. If the SVG file with theembedded computing program instructions is embedded in a popular website, every client connecting to that website may contribute to solving the problem. When a user loads the SVG image, the code within the image is executed, contacting the server forarguments for the calculation, computing a solution, and then sending the solution to a server. FIG. 5c lists an exemplary SVG listing including a script that demonstrates SVG scripting ability to loop and manipulate variables. In the embodiments described above, some of the steps may take place in a different order. For example, in FIG. 3, the requests to the server are listed in the order content request 310, dataset request 320, communicate results request 365. The requests may be coming from multiple clients and the order random. These activities could be rearranged in the order dataset request 320, content request 310, communicate results request 365, or any other like order. For example, one client couldbe communicating results 365 when another client makes a content request 310. Many of the steps in the embodiments may be completed with computer code. For example the action of the server attaching the distributed computing program instructions 330 to the content may be completed by computer code running on the server. The use of the word ""exemplary"" in this disclosure is intended to mean that the embodiment or element so described serves as an example, instance, or illustration, and is not necessarily to be construed as preferred or advantageous over otherembodiments or elements. The description of the various exemplary embodiments provided above is illustrative in nature and is not intended to limit the invention, its application, or uses. Thus, variations that do not depart from the gist of theinvention are intended to be within the scope of the embodiments of the present invention. Such variations are not to be regarded as a departure from the spirit and scope of the present invention."
17|http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=96&p=2&f=G&l=50&d=PTXT&S1=(python.CLTX.+or+python.DCTX.)&OS=ACLM/python&RS=ACLM/python|Method and an apparatus to conduct software release|Some embodiments of a method and an apparatus to conduct software release have been presented. In one embodiment, a user submits a request to conduct software release on a set of servers. Each of the servers has a distinct platform. In response to the request, a set of commands in a cross-platform language is sent to the servers via remote procedure calls (RPCs) in a transactional format.|"1. A computer-implemented method comprising: receiving a request to conduct a software release on a plurality of servers from a user, each of the plurality of servers havinga distinct platform, the software release to distribute a new or upgraded version of computer software; receiving a plan script from the user, the plan script comprising a plurality of instructions; translating the plurality of instructions in the planscript into a plurality of commands in a cross-platform language; and in response to the request, sending the plurality of commands in the cross-platform language to the plurality of servers via remote procedure calls (RPCs) in a transactional format toconduct the software release. 2. The method of claim 1, wherein the plan script comprises a set of one or more main transaction instructions for a transaction and a set of one or more failure transaction instructions for the transaction, and wherein the method furthercomprises: sending the set of one or more failure transaction instructions to one of the plurality of servers if the one of the plurality of servers fails in executing at least one of the set of one or more main transaction instructions. 3. The method of claim 1, further comprising: executing a client application on a release server to cause the release server to send the plurality of commands the plurality of servers. 4. The method of claim 1, wherein the cross-platform language is Python. 5. The method of claim 1, further comprising: generating a user interface, which is accessible over a network, to receive input from the user, said input comprising at least one of a command to execute a client application for controlling thesoftware release and the plan script. 6. An apparatus comprising: a user interface to receive a request to conduct a software release on a plurality of servers from a user, the software release to distribute a new or upgraded version of computer software, each of the plurality ofservers having a distinct platform and to receive a plan script from the user; an interpreter coupled to the user interface to translate a plurality of instructions in the plan script into a plurality of commands in a cross-platform language; and aprocessing device coupled to the user interface to send the plurality of commands in the cross-platform language to the plurality of servers via remote procedure calls (RPCs) in a transactional format in response to the request to conduct the softwarerelease. 7. The apparatus of claim 6, wherein the plan script comprises a set of one or more main transaction instructions for a transaction and a set of one or more failure transaction instructions for the transaction, and wherein the processing deviceis operable to send the set of one or more failure transaction instructions to one of the plurality of servers if the one of the plurality of servers fails in executing at least one of the set of one or more main transaction instructions. 8. The apparatus of claim 6, wherein the processing device is operable to execute a client application to send the plurality of commands to the plurality of servers. 9. The apparatus of claim 6, wherein the cross-platform language is Python. 10. The apparatus of claim 6, further comprising: a network interface to communicatively couple to a network to receive input from the user, said input comprising at least one of a command to execute a client application for controlling thesoftware release and the plan script. 11. The apparatus of claim 6, wherein the user interface comprises a graphical user interface displayable via a network access application. 12. A system comprising the apparatus of claim 6, further comprising: the plurality of servers. 13. A non-transitory machine-readable medium that provides instructions that, when executed by a processor, will cause the processor to perform operations comprising: receiving a request to conduct software release on a plurality of serversfrom a user, each of the plurality of servers having a distinct platform, the software release to distribute a new or upgraded version of computer software; receiving a plan script from the user, the plan script comprising a plurality of instructions; translating the plurality of instructions in the plan script into a plurality of commands in a cross-platform language; and in response to the request, sending the plurality of commands in the cross-platform language to the plurality of servers viaremote procedure calls (RPCs) in a transactional format to conduct the software release. 14. The non-transitory machine-readable medium of claim 13, wherein the operations further comprise: plan script comprises a set of one or more main transaction instructions for a transaction and a set of one or more failure transactioninstructions for the transaction, and wherein the operations further comprise: sending the set of one or more failure transaction instructions to one of the plurality of servers if the one of the plurality of servers fails in executing at least one ofthe set of one or more main transaction instructions. 15. The non-transitory machine-readable medium of claim 13, wherein the operations further comprise: executing a client application on a release server to cause the release server to send the plurality of commands the plurality of servers. 16. The non-transitory machine-readable medium of claim 13, wherein the cross-platform language is Python. 17. The non-transitory machine-readable medium of claim 13, wherein the operations further comprise: generating a user interface, which is accessible over a network, to receive input from the user, said input comprising at least one of acommand to execute a client application for controlling the software release and the plan script. Description TECHNICAL FIELD Embodiments of the present invention relate to release engineering, and more specifically to conducting software release.BACKGROUND Software release generally refers to the distribution of a new or an upgraded version of computer software, which may include a program or a suite of programs. Software release may occur in a wide variety of environments, such as, for example,in quality assurance (QA), manufacturing, etc. In a typically release, the new or upgraded software is deployed to many machines, which include local and/or remote machines (e.g., servers, workstations, personal computers, special-purpose machines, suchas cellular telephones, appliances, and set-top boxes, etc.). Furthermore, the machines may or may not have different platforms. A platform as used herein broadly refers to a combination of hardware and/or software to execute software applications. For example, a platform may include an operating system of the machine, programming environment of the machine, computer architecture of the machine, etc. Some examples of platforms include Linux.RTM., Microsoft.RTM. Windows.RTM., Solaris.RTM., MacOS.RTM. X, etc. For instance, software written in Java is likely to be deployed to machines having different platforms. Different platforms typically work with different application programming interfaces (APIs). Thus, a release engineer conventionally has to manually log onto the machines having different platforms to input one or more commands in order todeploy the new or upgraded software properly. Furthermore, when the software release has to be conducted in a transactional format, the release engineer has to wait for the execution result of a transaction on one or more machines such that, if there isan error or failure on one of the machines, the release engineer may recover the error or failure by sending the appropriate commands to the machine having the error. Thus, the release of software to machines having different platforms may be a tediousand labor-intensive task. DESCRIPTION OF THE DRAWINGS The present invention is illustrated by way of example, and not by way of limitation, in the figures of the accompanying drawings and in which: FIG. 1A illustrates one embodiment of a process to conduct software release. FIG. 1B illustrates one embodiment of a process to respond to a command in software release. FIG. 1C illustrates one exemplary client application. FIG. 1D illustrates one exemplary plan script. FIG. 2 illustrates a functional block diagram of one embodiment of a release apparatus. FIG. 3 illustrates one embodiment of a system in which embodiments of the present invention may be implemented. FIG. 4 illustrates a block diagram of an exemplary computer system.DETAILED DESCRIPTION Described herein are some embodiments of a method and an apparatus to conduct software release. In some embodiments, a user submits a request to conduct software release on a set of servers. Each of the servers has a distinct platform. Inresponse to the request, a release apparatus may send a set of commands in a cross-platform language to the servers via remote procedure calls (RPCs) in a transactional format. A transaction generally refers to a series of interaction between twoentities or objects, which may include exchange of information. To send the commands in a transactional format, the release apparatus may send a command based on a response received from a server. For example, if a response from a server indicates thata previous command has failed, then the release apparatus sends a command to recover from the failure. The RPC allows the commands to be remotely executed by the servers. Note that the RPC may be referred to as remote method invocation in someembodiments. In the following description, numerous details are set forth. It will be apparent, however, to one skilled in the art, that the present invention may be practiced without these specific details. In some instances, well-known structures anddevices are shown in block diagram form, rather than in detail, in order to avoid obscuring the present invention. Some portions of the detailed descriptions below are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used bythose skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here, and generally, conceived to be a self-consistent sequence of steps leading to a desired result. Thesteps are those requiring physical manipulations of physical quantities. Usually, though not necessarily, these quantities take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared, and otherwisemanipulated. It has proven convenient at times, principally for reasons of common usage, to refer to these signals as bits, values, elements, symbols, characters, terms, numbers, or the like. It should be borne in mind, however, that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise asapparent from the following discussion, it is appreciated that throughout the description, discussions utilizing terms such as ""processing"" or ""computing"" or ""calculating"" or ""determining"" or ""displaying"" or the like, refer to the action and processes ofa computer system, or similar electronic computing device, that manipulates and transforms data represented as physical (electronic) quantities within the computer system's registers and memories into other data similarly represented as physicalquantities within the computer system memories or registers or other such information storage, transmission or display devices. The present invention also relates to apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes, or it may comprise a general-purpose computer selectively activated or reconfigured bya computer program stored in the computer. Such a computer program may be stored in a machine-readable storage medium, such as, but is not limited to, any type of disk including floppy disks, optical disks, CD-ROMs, and magnetic-optical disks, read-onlymemories (ROMs), random access memories (RAMs), EPROMs, EEPROMs, magnetic or optical cards, or any type of media suitable for storing electronic instructions, and each coupled to a computer system bus. The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein, or it may prove convenientto construct more specialized apparatus to perform the required method steps. The required structure for a variety of these systems will appear from the description below. In addition, the present invention is not described with reference to anyparticular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the invention as described herein. FIG. 1A illustrates one embodiment of a process to conduct software release from a release apparatus. The process may be performed by processing logic that may comprise hardware (e.g., circuitry, dedicated logic, programmable logic, microcode,etc.), software (such as instructions run on a processing device), firmware, or a combination thereof. For example, the processing device 220 of the release apparatus 200 shown in FIG. 2 may perform at least part of the process. Processing logic generates a user interface to receive user input (processing block 110). In some embodiments, the user interface may be presented to a user via a display device (e.g., a monitor) coupled to the release apparatus. Alternatively, the user interface may be presented via a network access application (e.g., a web browser) on a client device remotely coupled to the release apparatus via a network (e.g., an intranet, the Internet, etc.). In some embodiments, the userinput includes a request to conduct software release to multiple servers communicatively coupled to the release apparatus. Note that the servers may have different platforms, such as Linux, Windows, UNIX, Mac, etc. Processing logic then checks to determine if the user further provides a client application or a plan script (processing block 112). If the user provides a client application, processing logic may execute the client application to conductsoftware release (processing block 114). The client application may specify a particular server acting as a release apparatus and instruct the server to send commands via RPCs to other servers. In some embodiments, the client application is written ina cross-platform language. A cross-platform language is a programming language supported by multiple platforms, such as Python. An exemplary client application 1000 is shown in FIG. 1C. Referring to FIG. 1C, the client application 1000 connects to a server at ""http://127.0.0.1:8000."" Then the client application 1000 instructs the servers to execute the commands 1010. If there is an error in executing any of the commands 1010on a server, the client application 1000 instructs the server to execute the error commands 1020. Referring back to FIG. 1A, if the user provides a plan script instead of the client application, then processing logic uses an interpreter to translate instructions in the plan script into commands in a cross-platform language, such as Python(processing block 116). The plan script allows for simple batching of remote commands, and thus, the plan script eliminates the hassle of manually inputting individual commands for each of the servers. Furthermore, the plan script may be usedrepeatedly, thus, making the process repeatable on different servers and/or at different times. For instance, the same plan script may be executed multiple times on different servers simply by changing the server variables in the plan script. In someembodiments, the plan script may be written in a predetermined format while the interpreter is written in the cross-platform language as well. As such, the user may not even need to know any existing programming language as long as the user can composethe plan script in the predetermined format, which may or may not be proprietary. The interpreter may translate the plan script from the predetermined format into the cross-platform language. In some embodiments, a plan script may include instructions for one or more transactions to interact with software executable on the servers (e.g., to install new software, to upgrade existing software, to query a database, to manipulate alogical object, etc.). In some embodiments, there are one or more main transaction instructions for each transaction. Furthermore, a transaction may further include one or more failure transaction instructions. One sample plan script 1050 is shown inFIG. 1D. The plan script 1050 includes instructions for two transactions. The instructions for the first transaction are from line six to line thirteen, and the instructions for the second transaction are from line fifteen to line seventeen. For thefirst transaction, there are main transaction instructions on lines six through nine and failure transaction instructions on lines ten through thirteen. Processing logic uses the interpreter to translate these instructions in the plan script 1050 intocommands in a cross-platform language. After the plan script has been translated, processing logic sends a command corresponding to a main transaction instruction to the servers via RPC, such as Extensible Markup Language-RPC (XML-RPC) (processing block 118). The servers may executethe command. Processing logic receives the result of the execution from the servers (processing block 120). Then processing logic determines if the execution has succeeded or failed (processing block 122). If the execution has succeeded, processinglogic further checks if the current transaction has been completed (processing block 124). If there are no more commands to be executed for the current transaction, then the current transaction is completed, and processing logic transitions toprocessing block 134. Otherwise, processing logic goes to the next main transaction instruction of the current transaction in the plan script (processing block 126). From processing block 126, processing logic transitions back to processing block 118to repeat the above operations for the next main transaction instruction. As discussed above, if there are no more commands to be executed for the current transaction, then the current transaction is completed, and processing logic transitions to processing block 134. Processing logic checks to determine if there areany more transactions in the plan script (processing block 134). If not, then the process ends. If there is at least one more transaction, then processing logic moves onto the next transaction (processing block 136). From processing block 136,processing logic transitions back to processing block 118 to repeat the above operations for the next transaction. In some embodiments, the instructions of a transaction include one or more failure transaction instructions. If processing logic determines that the execution of a command corresponding to a main transaction instruction has failed in processingblock 122, then processing logic goes to the failure transaction instructions for the current transaction (processing block 130). Processing logic sends commands corresponding to the failure transaction instructions to the servers via RPCs (processingblock 132). After sending the commands corresponding to all the failure transaction instructions of the current transaction, processing logic goes into processing block 134 to determine if there is at least one more transaction and continues with theprocess as discussed above. FIG. 1B illustrates one embodiment of a process to respond to a command in software release. The process may be performed by processing logic that may comprise hardware (e.g., circuitry, dedicated logic, programmable logic, microcode, etc.),software (such as instructions run on a processing device), firmware, or a combination thereof. For example, the servers 320A-320D shown in FIG. 3 may perform at least part of the process. Processing logic receives a command from a release apparatus during a software release (processing block 150). The command may be sent from a release apparatus via RPC. As discussed above, the release apparatus may send the command in responseto executing a client application. Alternatively, the command may be generated from an instruction in a plan script processed by the release apparatus. Processing logic executes the command (processing block 152). After executing the command,processing logic sends result of the execution to the release apparatus (processing block 154). FIG. 2 illustrates a functional block diagram of one embodiment of a release apparatus. The release apparatus 200 includes a user interface module 210, a processing device 220, an interpreter 230, a network interface 240, and a storage device250, which are operatively coupled to each other. The user interface module 210 generates a user interface (e.g., a graphical user interface, a command line interface, etc.) to receive user input. For example, the user may input a request to conductsoftware release. In addition, the user may input a client application or a plan script. The user interface may be presented via a display device operatively coupled to the release appatarus 200. Alternatively, the user interface may be sent to aremote machine via the network interface 240 to be presented via a network access application (e.g., a special-purpose network access application for releasing software, a general-purpose network access application, such as a web browser, etc.) runningon the remote machine. In some embodiments, where the user provides a client application, the processing device 220 may execute the client application to conduct the software release. For example, the client application may cause the processing device 220 to sendcommands to multiple servers having different platforms via RPCs. Because the servers have different platforms, the commands may be written in a cross-platform language, such as Python. An exemplary embodiment of a client application is shown in FIG.1C. Alternatively, the user may input a plan script, which is translated by the interpreter 230. Specifically, the interpreter 230 may translate instructions in the plan script into commands in a cross-platform language so that the commands can besent to the servers with different platforms via RPCs. An exemplary embodiment of a plan script is shown in FIG. 1D. The network interface 240 communicatively couples the release apparatus 200 to the servers via a network. Through the network interface 240, the commands in the cross-platform language are sent via RPCs to the servers. The release apparatus 200 may be implemented on a variety of machines (e.g., servers, workstations, personal computers, etc.) and may sometimes be referred to as a ""server"" or a ""client."" In some embodiments, the release apparatus 200 isimplemented on an XML-RPC server in a standalone mode or an apache cgi-bin mode. The release apparatus 200 may read a configuration file 252 from the storage device 250 for the release apparatus' user and server type configuration. The configurationfile 252 may include one or more user-password pairs for authentication. To run the release apparatus 200 in standalone mode, the server needs to have a package manager (e.g., Red Hat Package Manager (RPM) available from Red Hat, Inc. of Raleigh, N.C.)installed. Alternatively, the release apparatus 200 may be run in the apache cgi-bin mode as an apache cgi-bin script, where it is not necessary to have another open port to implement the XML-RPC server. FIG. 3 illustrates one embodiment of a system in which embodiments of the present invention may be implemented. The system 300 includes a workstation 310, a network 370, and a number of servers 320A-320D. The servers 320A-320D arecommunicatively coupled to the workstation 310 via the network 370. Furthermore, the network 370 may include different types of network, such as local area network (LAN), wide area network (WAN), etc. Note that the servers 320A-320D may have differentplatforms, such as Linux, Microsoft Windows, Mac OS X, etc. The workstation 310 implements a release apparatus, such as the release apparatus 200 shown in FIG. 2. In general, the workstation 310 may receive a user request to conduct software release to the servers 320A-320D. In response to the request, the workstation 310 may send commands in a cross-platform language via RPCs to the servers 320A-320D inorder to deploy the software to the servers 320A-320D. The commands may be based on a client application or a plan script of instructions as discussed above. To further illustrate the concept, some exemplary operations are discussed in details below. Referring to FIG. 3, the workstation 310 sends a ""Stop httpd"" command to the server 320A to stop a web server daemon (1). Then the workstation 310 sends another command to the server 320C to verify database status (2). Next, the workstation310 sends another command to the server 320B to restart Tomcat (3). Then the workstation 310 sends a command to the server 320A again to start the web server daemon (4). The workstation 310 then sends commands to the server 320D to copy data over (5),and then to restart a proxy (6). Note that the above commands (1)-(6) may be sent for a single transaction, but the servers 320A-320D may have different platforms. So, without the release apparatus implemented on the workstation 310 to automaticallygenerate the commands in a cross-platform language and send the commands to the servers 320A-320D, the user has to manually log onto each of the servers 320A-320D and submit the commands in accordance to the practice and/or requirement of each of theplatforms running on the servers 320A-320D in order to conduct the software release. Moreover, the above process may be readily repeated at another time and/or on another set of servers using the release apparatus implemented on the workstation 310. FIG. 4 illustrates a diagrammatic representation of a machine in the exemplary form of a computer system 400 within which a set of instructions, for causing the machine to perform any one or more of the methodologies discussed herein, may beexecuted. In alternative embodiments, the machine may be connected (e.g., networked) to other machines in a LAN, an intranet, an extranet, and/or the Internet. The machine may operate in the capacity of a server or a client machine in client-servernetwork environment, or as a peer machine in a peer-to-peer (or distributed) network environment. The machine may be a personal computer (PC), a tablet PC, a set-top box (STB), a Personal Digital Assistant (PDA), a cellular telephone, a web appliance, aserver, a network router, a switch or bridge, or any machine capable of executing a set of instructions (sequential or otherwise) that specify actions to be taken by that machine. Further, while only a single machine is illustrated, the term ""machine""shall also be taken to include any collection of machines that individually or jointly execute a set (or multiple sets) of instructions to perform any one or more of the methodologies discussed herein. The exemplary computer system 400 includes a processing device 402, a main memory 404 (e.g., read-only memory (ROM), flash memory, dynamic random access memory (DRAM) such as synchronous DRAM (SDRAM) or Rambus DRAM (RDRAM), etc.), a staticmemory 406 (e.g., flash memory, static random access memory (SRAM), etc.), and a data storage device 418, which communicate with each other via a bus 430. Processing device 402 represents one or more general-purpose processing devices such as a microprocessor, a central processing unit, or the like. More particularly, the processing device may be complex instruction set computing (CISC)microprocessor, reduced instruction set computing (RISC) microprocessor, very long instruction word (VLIW) microprocessor, or processor implementing other instruction sets, or processors implementing a combination of instruction sets. Processing device402 may also be one or more special-purpose processing devices such as an application specific integrated circuit (ASIC), a field programmable gate array (FPGA), a digital signal processor (DSP), network processor, or the like. The processing device 402is configured to execute the processing logic 426 for performing the operations and steps discussed herein. The computer system 400 may further include a network interface device 408. The computer system 400 also may include a video display unit 410 (e.g., a liquid crystal display (LCD) or a cathode ray tube (CRT)), an alphanumeric input device 412(e.g., a keyboard), a cursor control device 414 (e.g., a mouse), and a signal generation device 416 (e.g., a speaker). The data storage device 418 may include a machine-accessible storage medium 430 (also known as a machine-readable storage medium) on which is stored one or more sets of instructions (e.g., software 422) embodying any one or more of themethodologies or functions described herein. The software 422 may also reside, completely or at least partially, within the main memory 404 and/or within the processing device 402 during execution thereof by the computer system 400, the main memory 404and the processing device 402 also constituting machine-accessible storage media. The software 422 may further be transmitted or received over a network 420 via the network interface device 408. While the machine-accessible storage medium 430 is shown in an exemplary embodiment to be a single medium, the term ""machine-accessible storage medium"" should be taken to include a single medium or multiple media (e.g., a centralized ordistributed database, and/or associated caches and servers) that store the one or more sets of instructions. The term ""machine-accessible storage medium"" shall also be taken to include any medium that is capable of storing, encoding or carrying a set ofinstructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present invention. The term ""machine-accessible storage medium"" shall accordingly be taken to include, but not be limited to,solid-state memories, optical and magnetic media, etc. Thus, some embodiments of a method and an apparatus to conduct software release have been described. It is to be understood that the above description is intended to be illustrative, and not restrictive. Many other embodiments will be apparentto those of skill in the art upon reading and understanding the above description. The scope of the invention should, therefore, be determined with reference to the appended claims, along with the full scope of equivalents to which such claims areentitled."
18|http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=84&p=2&f=G&l=50&d=PTXT&S1=(python.CLTX.+or+python.DCTX.)&OS=ACLM/python&RS=ACLM/python|Scripting bridge|A scripting bridge allows a developer to automatically build glue classes to access a scriptable application with standard method calls written in a language such as Objective-C. The Objective-C code sends properly formed Apple events automatically (or events according to some other event protocol), so that the developer is not required to have any knowledge of the scripting language of the target application. Classes can be created dynamically at run-time, including dynamic creation of methods within those classes. Lazy evaluation is employed to avoid unnecessary inter-process communication traffic. The present invention provides a straightforward model for controlling scriptable applications that can result in code that is significantly faster and more efficient than prior art methods.|"1. At a computer system, the computer system including a scripting bridge for translating between scriptable applications and other types of applications, acomputer-implemented method for controlling a target scriptable application, comprising: the scripting bridge retrieving a scripting interface for the target scriptable application from a dictionary associated with the target scriptable application; thescripting bridge generating at least one class based on the scripting interface, the at least one class facilitating access to scripting commands for the target scriptable application; and providing the generated at least one class to a code environmentfor application code to facilitate issuing scripting commands to the target scriptable application from directly within the application code, the application code being one of the other types of applications. 2. The method of claim 1, further comprising: the scripting bridge receiving a method call from the application code, the method call indicating a class previously generated by the scripting bridge; and responsive to receiving the method call:translating the method call into a call for use at the target scriptable application in accordance with the scripting interface; and issuing the call for use at the target scriptable application to the target scriptable application. 3. The method of claim 2, wherein issuing the call to the target scriptable application comprises issuing a scripted operation to the target scriptable application. 4. The method of claim 2, wherein issuing the call to the target scriptable application comprises issuing an Apple event to the target scriptable application. 5. The method as recited in claim 2, wherein receiving a method call from the application code comprises receiving a method call from the application code, the method call specifying an operation to be performed at the target scriptableapplication. 6. The method as recited in claim 2, wherein issuing the call for use at the target scriptable application comprises issuing an event to the target scriptable application, the event issued in accordance with an event protocol compatible withthe target scriptable application. 7. The method as recited in claim 2, wherein generating at least one class based on the scripting interface comprises mapping class and command definitions contained in the scripting interface to class and method definitions in Objective-C. 8. The method as recited in claim 7, wherein translating the method call into a call for use at the target scriptable application comprises using a call from the runtime system of the application code to synthesize an actual implementation fora scripted operation based on the mappings. 9. The method of claim 1, wherein the application code comprises at least one of: an Objective C application, a Ruby application, and a Python application. 10. The method of claim 1, wherein generating at least one class is performed at run-time. 11. The method of claim 1, wherein generating at least one class is performed at build-time. 12. The method as recited in claim 11, further comprising generating at least one header file, the at least one header file including declarations for the at least one class; and providing the at least one header file to the application code. 13. The method of claim 1, wherein issuing the call to the target scriptable application is performed responsive to an indication that actual data is needed from the target application. 14. The method as recited in claim 1, wherein the application code comprises at least one of: compiled code and interpreted code. 15. The method as recited in claim 1, wherein generating at least one class based on the scripting interface comprises generating glue code for invoking scripts to control the target scriptable application. 16. The method as recited in claim 1, wherein generating at least one class based on the scripting interface comprises generating a singleton method. 17. A computer program product for use at a computer system, the computer system including a scripting bridge for translating between scriptable applications and other types of applications, the computer program product for implementing amethod for controlling a target scriptable application, comprising: a non-transitory computer-readable storage medium; and computer program code, encoded on the medium, that when executed by a processor causes the scripting bridge to perform the method,including the steps of: retrieving a scripting interface for the target scriptable application from a dictionary associated with the target scriptable application; generating at least one class based on the scripting interface, the at least one classfacilitating access to scripting commands for the target scriptable application; and providing the generated at least one class to a code environment for application code to facilitate issuing scripting commands to the target scriptable application fromdirectly within the application code, the application code being one of the other types of applications. 18. The computer program product of claim 17, further comprising computer program code that when executed causes the scripting bridge to perform the steps of: receiving a method call from the application code, the method call indicating a classpreviously generated by the scripting bridge; and responsive to receiving the method call: translating the method call into a call for use at the target scriptable application in accordance with the scripting interface; and issuing the call for use atthe target scriptable application to the target scriptable application. 19. The computer program product of claim 18, wherein the computer program code that when executed causes the scripting bridge to issue the call to the target scriptable application comprises computer program code that when executed causes thescripting bridge to issue a scripted operation to the target scriptable application. 20. The computer program product of claim 18, wherein the computer program code that when executed causes the scripting bridge to issue the call to the target scriptable application comprises computer program code that when executed causes thescripting bridge to issue an Apple event to the target scriptable application. 21. The computer program product as recited in claim 18, wherein the computer program code that when executed causes the scripting bridge to receive a method call from the application code comprises computer program code that when executedcauses the scripting bridge to receiving a method call from the application code, the method call specifying an operation to be performed at the target scriptable application. 22. The computer program product as recited in claim 18, wherein the computer program code that when executed causes the scripting bridge to issue the call for use at the target scriptable application comprises computer program code that whenexecuted causes the scripting bridge to issue an event to the target scriptable application, the event issued in accordance with an event protocol compatible with the target scriptable application. 23. The computer program product as recited in claim 18, wherein the computer program code that when executed causes the scripting bridge to generate at least one class based on the scripting interface comprises computer program code that whenexecuted causes the scripting bridge to map class and command definitions contained in the scripting interface to class and method definitions in Objective-C. 24. The computer program product as recited in claim 23, wherein the computer program code that when executed causes the scripting bridge to translate the method call into a call for use at the target scriptable application comprises computerprogram code that when executed causes the scripting bridge to use a call from the runtime system of the application code to synthesize an actual implementation for a scripted operation based on the mappings. 25. The computer program product of claim 17, wherein the application code comprises one of: an Objective C application, a Ruby application, or a Python application. 26. The computer program product of claim 17, wherein the computer program code that when executed causes the scripting bridge to generate at least one class is executed at run-time. 27. The computer program product of claim 17, wherein the computer program code that when executed causes the scripting bridge to generate at least one class is executed at build-time. 28. The computer program product as recited in claim 27, further comprising computer program code that when executed causes the scripting bridge to perform the steps of: generating at least one header file, the at least one header fileincluding declarations for the at least one class; and providing the at least one header file to the application code. 29. The computer program product of claim 17, wherein the computer program code that when executed causes the scripting bridge to issue the call to the target scriptable application is executed responsive to an indication that actual data isneeded from the target scriptable application. 30. The computer program product as recited in claim 17, wherein the application code comprises at least one of: compiled code and interpreted code. 31. The computer program product as recited in claim 17, wherein the computer program code that when executed causes the scripting bridge to generate at least one class based on the scripting interface comprises computer program code that whenexecuted causes the scripting bridge to generate glue code for invoking scripts to control the target scriptable application. 32. The computer program product as recited in claim 17, wherein the computer program code that when executed causes the scripting bridge to generate at least one class based on the scripting interface comprises computer program code that whenexecuted causes the scripting bridge to generate a singleton method. 33. A system for controlling a target scriptable application, comprising: at least one processor; system memory communicatively coupled to the at least one processor; a dictionary retrieval module for operation in connection with the at leastone processor, the dictionary retrieval module configured to retrieve a scripting interface from a dictionary associated with the target scriptable application; a class generation module for operation in connection with the at least one processor, theclass generation module configured to: generate at least one class based on the scripting interface, the at least one class facilitating access to scripting commands for the target scriptable application; and provide the generated at least one class toa code environment for application code to facilitate issuing scripting to the target scriptable application from directly within the application code, the application code and the target scriptable application being different types of applications. 34. The system as recited in claim 33, wherein the class generation module is further configured to: generate at least one header file, the at least one header file including declarations for the at least one class; and provide the at leastone header file to the application code. 35. The system as recited in claim 33, wherein the class generation module is configured to generate at least one class based on the scripting interface by generating glue code for invoking scripts to control the target scriptable application. 36. The system as recited in claim 33, wherein the class generation module is configured to generate at least one class based on the scripting interface by generating a singleton method. 37. The system as recited in claim 33, wherein the class generation module is configured to generate at least one class based on the scripting interface by mapping class and command definitions contained in the scripting interface to class andmethod definitions in Objective-C. 38. The system as recited in claim 33, wherein the class generation module is configured to generate at least one class based on the scripting interface by generating at least one class at run-time. 39. The system as recited in claim 33, wherein the class generation module is configured to generate at least one class based on the scripting interface by generating at least one class at build-time. 40. The system as recited in claim 33, wherein the application code comprises at least one of: compiled code and interpreted code. Description FIELD OF THE INVENTION The present invention relates to code translation, and more particularly to methods and systems for accessing a scriptable application with standard method calls.DESCRIPTION OF THE RELATED ART Scriptable applications provide an easy way for software developers to customize the operation of software applications. A scriptable application is an application whose operation can be automated using a script. For example, many applicationswritten for the Mac OS.RTM. operating system are capable of responding to script-based commands written in AppleScript.RTM.. AppleScript.RTM. talks to applications using the well-known Apple Event Interprocess Messaging Protocol. Apple events arecommonly used by an application to send and receive information from other applications. In some cases, developers wish to control the operation of scriptable applications from an application that is written in Objective-C or some other compiled or interpreted language. Some application programming environments provide tools forexecuting scripts to control scriptable applications. For example, the Cocoa application programming environment provides an NSAppleScript class that provides a mechanism for running an AppleScript.RTM. script from within a Cocoa application. However,in order to use NSAppleScript, a developer must write the AppleScript.RTM. script and then invoke the NSAppleScript class to execute the script. This technique has several disadvantages: 1) it can be burdensome; 2) it requires the developer to befamiliar with AppleScript.RTM. and the target application's Apple events model; and 3) it results in slow, inefficient code. Alternatively, a developer can use NSAppleEventDescriptor to manually send and receive Apple events from within the Objective-C code. This class allows developers to construct Apple events or extract information from them. Again, such atechnique can be burdensome and inefficient. What is needed, therefore, is a technique for allowing software developers to control script-based applications from within a compiled object-oriented programming environment such as Objective-C, and/or from within other compiled or interpretedlanguages. What is further needed is a technique that does not overly burden the developer with a requirement to write script-specific code manage individual events. What is further needed is a technique that results in efficient code and avoids orminimizes the disadvantages of prior art techniques.SUMMARY OF THE INVENTION The present invention, referred to herein as a ""scripting bridge"", allows a developer to automatically build glue classes to access a scriptable application with standard method calls written in a language such as Objective-C. The Objective-Ccode sends properly formed Apple events automatically (or events according to some other event protocol), so that the developer is not required to have any knowledge of the scripting language of the target application. For example, using the techniquesof the present invention, a developer could get the name of the current iTunes.RTM. track with the following line of code: NSString*currentTrackName=[[iTunes currentTrack]name]; In one embodiment, the present invention uses native Cocoa data types, such as NSString and NSArray, so as to reduce the amount of code required and to improve speed. The present invention provides a straightforward model for controlling scriptable applications that can result in code that is significantly faster and more efficient than prior art methods. Furthermore, the scripting bridge of the presentinvention allows a developer to control scriptable applications without having detailed knowledge of the target application's scripting language. The present invention allows the developer to use standard memory management within the Cocoa application programming environment, without having to manually allocate and free space for Apple events or other script-based resources. The presentinvention also requires less code than using NSAppleEventDescriptor or direct calls. The present invention also is able to check for syntax errors at compile time by comparing elements of an automatically generated header against the originaldefinition, and flagging any errors. The present invention can be used, for example, as a framework for facilitating direct control of one Cocoa application from another. The invention further allows other applications to control scriptable applications. For example, code writtenin Ruby (via RubyCocoa) or Python (via PyObjC) can control scriptable applications using the present invention, giving those languages the same advantages enjoyed by AppleScript.RTM.. In this manner, the present invention provides a mechanism for controlling scriptable applications in a seamless manner that can integrate with existing Objective-C code, and/or with compiled or interpreted code written in other languages.BRIEF DESCRIPTION OF THE DRAWINGS The accompanying drawings illustrate several embodiments of the invention and, together with the description, serve to explain the principles of the invention. One skilled in the art will recognize that the particular embodiments illustrated inthe drawings are merely exemplary, and are not intended to limit the scope of the present invention. FIG. 1 is a flowchart depicting a method for implementing the present invention according to one embodiment. FIG. 2 is a block diagram depicting an architecture for implementing the present invention according to one embodiment, wherein glue classes are generated dynamically at run time. FIG. 3 is a block diagram depicting an alternative architecture for implementing the present invention according to one embodiment, wherein glue classes are generated statically at build time. FIG. 4 is an example of a dictionary for the iTunes.RTM. application.DETAILED DESCRIPTION OF THE EMBODIMENTS The present invention allows a developer to automatically build glue classes to access a scriptable application with standard method calls written in a language such as Objective-C. The Objective-C code sends properly formed Apple eventsautomatically (or events according to some other event protocol), so that the developer is not required to have any knowledge of the scripting language of the target application. In one embodiment, the present invention uses a ""scripting bridge"", which is a system framework that can be included with an operating system such as Mac OS.RTM. X. In one embodiment, the following classes are defined: SBApplication: a targetapplication that the developer wishes to communicate with, for example iTunes.RTM.; SBObject: an object within the target application--for example, an iTunes.RTM. track; SBElementArray: a collection of SBObject instances--for example, a collection ofall tracks in an iTunes.RTM. playlist. One skilled in the art will recognize that the particular framework, structure, classes, and arrangement thereof are merely exemplary, and that many variations are possible without departing from the essential characteristics of the presentinvention. Using the techniques of the present invention, the developer can avoid dealing with most of these classes directly, instead working with subclasses in the generated glue classes. For example, for an Objective-C application that is intended tocontrol the iTunes.RTM. application, the developer might use classes such as iTunesApplication (which inherits from SBApplication) and iTunesTrack (which inherits from SBObject). In one embodiment, these application-specific subclasses are not includedin the scripting bridge framework itself, but are created at run-time. Referring now to FIG. 1, there is shown a flowchart depicting a method for implementing the present invention according to one embodiment. Referring also to FIG. 2, there is shown a block diagram depicting an architecture for implementing thepresent invention according to one embodiment. Application code 201 is the application being written by the developer, for example in Objective-C or another compiled or interpreted language. Target application 203 is the scriptable application that thedeveloper wishes to control. In one embodiment, scripting bridge 202 is a software module that implements the functionality of the present invention. Scripting bridge 202 generates glue classes for invoking scripts to control target application 203. In one embodiment, such glue classes are generated by obtaining 101 scripting interface 214, or sdef (scripting definition) from dictionary 204of target application 203. Dictionary 204 specifies the terms that are understood by target application 203. Referring now briefly to FIG. 4, there is shown an example of dictionary 204 for the iTunes.RTM. application. Category list 402 providesseveral categories of terms. Term list 403 indicates dictionary terms that are available within the selected category. Definition 401 provides explanatory text for a selected item in list 403. Once scripting bridge 202 has generated 102 its glue classes, it provides 103 the generated glue classes 212 to application code 201. These dynamically generated glue classes 212 (collectively referred to as glue code) are used to facilitateaccess to scripting commands from directly within application code 201. Thus, based on dictionary 204, scripting bridge 202 creates and provides dynamically generated glue classes 212 that are included in the code environment (such as Objective-C) inwhich the developer is working. Once the generated glue classes 212 have been provided 103, application code 201 can specify an operation to be performed by target application 203 by issuing 104 a method call 211 in Objective-C (or whatever language is being used forapplication code 201). Based on the method call, scripting bridge 202 issues 105 an Apple event 213 to target application 203, which interprets and executes the specified function as it would any scripted operation. The generated classes 212 include Objective-C classes that can be used to control the target scriptable application. In one embodiment, the classes include the full set of code for controlling the target application. In another embodiment, thecode is optimized so that only that code that is needed is generated and included. In one embodiment, as described above the glue classes are generated dynamically and included at run time; this can result in a smaller, more efficient result. Run-time generation of the glue classes also facilitates the use of the presentinvention while coding in a third language such as Python or Ruby. In such a situation, another bridge translates code from Python or Ruby into an Objective-C class, and the scripting bridge then provides the translation from Objective-C to thescriptable application. Furthermore, run-time generation avoids the need to include extra code for the scripting bridge within the application being coded. Rather, the developer need only invoke an Objective-C method that is already present in order toinvoke the scripting bridge and thereby exercise control over the target application. Alternatively, the glue classes are generated in advance, for example at build time. This removes the need to generate glue classes at run time. Referring now to FIG. 3, there is shown an alternative architecture for build-time generation ofglue classes. The architecture of FIG. 3 operates substantially as described above, with the addition of scripting definition processor (sdp) 301. sdp 301 is an optional component that can create statically generated glue classes 303 at build time, sothat there is no need for classes to be generated at run time. In one embodiment, the sdp-generated files are attached to application code 201, since they effectively are part of the application code. In addition, sdp 301 can generate one or more header files 302 at build time. These header files 302, or "".h"" files, include declarations for statically generated glue classes 303; header files 302 can be included in application code 201 so asto properly declare the generated classes before they appear in the code. Header files 302 are optional because in most implementations the Objective-C compiler can assume declarations on the fly if they are not present. In such an embodiment, it maybe useful to provide a header file for inclusion in code files so that relevant methods are properly declared before they appear in the code. In one embodiment, header file is useful for checking for syntax errors at compile time. The generated header file for the target application specifies the API (application programming interface) for that application. The compiler can then usethat header to check any uses of the API against the original definition, and flag any errors. Referring again to FIG. 4, where an example of dictionary 204 for the iTunes.RTM. application is shown, the following is an example of a header file 302 that scripting definition processor 301 might generate based on the iTunes.RTM. dictionary204: TABLE-US-00001 @interface iTunesApplication : SBApplication { } ... - (void) fastForward; // skip forward in a playing track - (void) nextTrack; // advance to the next track in the current playlist - (void) pause; // pause playback ... @end In one embodiment, this header file 302 would be generated in response to the developer invoking sdef (scripting definition, also referred to as scripting interface) and sdp (scripting definition processor) tools in a command such as: TABLE-US-00002 sdef pathToApplication | sdp -fh --basename application Name This command line uses sdef to get the scripting definition from the application. If the application does not contain an actual sdef, but does contain scripting information in another format (such as aete or Cocoa script suite), the tooltranslates that information into the sdef format. The command pipes the output of the sdef tool to sdp (scripting definition processor) to generate the corresponding header file. An example of the command line for an iTunes.RTM. application is: TABLE-US-00003 sdef /Applications/iTunes.app | sdp -fm --basename iTunes This command produces header file iTunes.h in the current directory; the header contains declarations for the iTunes.RTM. classes. The developer can then include this header file in the project being written. The developer links the projectwith a framework specifically associated with scripting bridge 202. Generating the header does not cause any implementations for target application classes to be generated. Rather, scripting bridge 202 generates these instances of the classes on the fly, i.e., at run time. To start communicating with the target application (iTunes.RTM. in this example), the developer tells scripting bridge 202 to create the application class: TABLE-US-00004 Class iTunesApplicationClass = [SBApplication class- ForApplicationWithBundleIdentifier:@""com.apple.iTunes""]; This locates the target application 203 given its bundle identifier, reads its scripting dictionary 204, and creates Objective-C classes for all the classes defined there. Class and command definitions in the sdef are mapped to class and methoddefinitions in Objective-C. Given those definitions, scripting bridge 202 uses calls defined by the Objective-C runtime system to synthesize actual implementations. Then the developer creates an instance: TABLE-US-00005 iTunesApplication *iTunes = [[iTunesApplicationClass alloc] init]; This locates target application 203 using the same method used to create the class, in this case, by bundle identifier. Then, the developer can communicate with target application 203 using methods on the resulting object. Although the above description is set forth in the context of iTunes.RTM. as the target application 203, one skilled in the art will recognize that similar techniques can be used for any application that has a dictionary 204. In one embodiment, when sdp 301 generates header file 302, it automatically adds a comment to each method declaration, taken from the corresponding term in the target application dictionary 204. For example, in a header file 302 generated for aFinder application 203, the following declaration might appear for the FinderApplication class: -(void)empty; // Empty the trash In one embodiment, application-specific classes return data in a form that is useful to the developer. For example, the Finder's-startupDisk method returns a FinderDisk object, and iTunes.RTM.'-currentTrack method returns an iTunesTrack object. When the developer requests that an object provide its name using the -name method, the result is returned as an instance of NSString. Similarly, the developer can get and set properties of an application in the same way he or she would perform suchoperations for instance variables inside application code 201, for example using methods such as -ignoresPrivileges and -setIgnoresPrivileges. The present invention provides this consistency and ease of operation so as to improve the process ofincorporating glue classes into existing projects. In one embodiment, the scripting bridge of the present invention uses a technique called lazy evaluation in order to further increase efficiency. Because sending Apple events can be expensive, the scripting bridge 202 of the present inventionis configured so that it avoids sending Apple events to target application 203 until absolutely necessary to perform the desired function. In one embodiment, lazy evaluation is implemented by the use of references. When an object is requested from target application 203, scripting bridge 202 receives a reference to the object. Scripting bridge 202 does not evaluate the referenceuntil application code 201 indicates that some concrete data from the requested object is needed. For example, scripting bridge 202 does not send an Apple event when application code 201 requests the first disk of the Finder, but it does send an event when application code 201 requests the name of the first disk of the Finder. The followingcode provides an illustrative example: TABLE-US-00006 // Get the shared FinderApplication instance FinderApplication *finder = [FinderApplicationClass alloc] init]; // Get a reference which represents every disk of the Finder (doesn't send an Apple event) SBElementArray *disks =[finder disks]; // Get a reference to the first disk of the Finder (doesn't send an Apple event) FinderDisk *firstDisk = [disks objectAtIndex:0]; // Evaluate the firstDisk reference by sending it an Apple event requesting its name NSString *name =[firstDisk name]; NSLog(name); // Log the name of the first disk The developer can override this behavior and force immediate evaluation of an object by using the SBObject-get method. Lazy evaluation has the ability to dramatically reduce the number of Apple events that need to be sent, and thereby allow the application to run significantly faster. In one embodiment, an optimized array handling method is provided inSBElementArray: arrayByApplyingSelector. This method sends a single Apple event to handle the array, so as to further improve efficiency when performing functions on arrays. In one embodiment, if target application 203 is not open when scripting bridge 202 tries to send it an Apple event 213, scripting bridge 202 automatically launches target application 203. Since this may result in undesired behavior, a check maybe made to determine whether target application 203 is running before scripting bridge 202 tries to communicate with it. In one embodiment, scripting bridge 202 uses the references described in Appendix A. Creating Singleton Methods In one embodiment, dynamic method generation is used to create singleton methods that run without any branch logic, so as to improve speed and efficiency. Singleton objects, or first-invocation-initializes, are a coding pattern wherein anobject type has exactly one shared instance. Conventionally, singleton objects are generated by creating a class with a method that creates a new instance of the class if one does not exist. If an instance already exists, the method returns a referenceto that object. Accordingly, conventional techniques for singleton methods involve the use of conditional logic and a global variable, as follows: TABLE-US-00007 + sharedInstance { static s = nil; if (s == nil) { s = createSingleton( ); } return s; } In this example, if ""s"" does not yet exist, it is allocated and stored in a global variable; the global variable is then returned. This conditional logic makes singleton object generation somewhat inefficient according to prior art techniques. Use of a global variable can also add inefficiency. Real world, modern, implementations often have a significantly more complex initialization pattern and also require the use of some kind of exclusion protocol, such as locks, to support threaded runtime environments. Thus, the followingstructure might be used: TABLE-US-00008 + sharedInstance { static s = nil; ... lock ... ... set up exception handler ... if (s == nil) { s = createSingleton( ); } ... finally ... ... unlock ... ... end finally return s; } Alternatively, some complex initialization infrastructure might be invoked prior to normal program operation. Such operations are often unreliable. In one embodiment, the present invention provides a solution by implementing such a method with full locking, exception handling, and any other correctness verifying measures and with one additional step wherein the method that retrieves thesingleton is replaced with a new implementation that carries the singleton as a part of the implementation, as follows: TABLE-US-00009 + sharedInstance { static id s; ... lock ... if (s) return s; ... set up exception handler ... id s = createSingleton( ); ... replace +sharedInstance implementation with optimal, non- locking, version that simply returns `s`directly ... ... finally ... ... unlock ... ... end finally return s; During initialization, any other callers will block on the lock operation until initialization is done. Once the lock is unlocked, any blocked callers will short circuit out on the if(s) statement (unlocking in the . . . finally . . . block),but all future callers will execute the faster replacement implementation. The replaced code is simply: TABLE-US-00010 + sharedInstance { return s; } An example of code for implementing the above is: TABLE-US-00011 + (id) getSingleton { local s = makeThing( ); IMP method_implementation = makeImplementationReturningConstantObject(s); class_addMethod([self class], @selector(getSingleton), method_implementation); return s; } The first time through, the method allocates s and creates a new method implementation to return that object. It then replaces itself with that new method. This new method works without any conditional logic at all. This saves time, and alsoavoids the use of the global variable access. It also allows the creation of the singleton to be fully thread-safe and completely protected. A further advantage is that the retrieval of the singleton after first execution does not require any locks,exception handling, or concurrency constructs. The present invention has been described in particular detail with respect to one possible embodiment. Those of skill in the art will appreciate that the invention may be practiced in other embodiments. First, the particular naming of thecomponents, capitalization of terms, the attributes, data structures, or any other programming or structural aspect is not mandatory or significant, and the mechanisms that implement the invention or its features may have different names, formats, orprotocols. Further, the system may be implemented via a combination of hardware and software, as described, or entirely in hardware elements, or entirely in software elements. Also, the particular division of functionality between the various systemcomponents described herein is merely exemplary, and not mandatory; functions performed by a single system component may instead be performed by multiple components, and functions performed by multiple components may instead be performed by a singlecomponent. Reference herein to ""one embodiment"", ""an embodiment"", or to ""one or more embodiments"" means that a particular feature, structure, or characteristic described in connection with the embodiments is included in at least one embodiment of theinvention. Further, it is noted that instances of the phrase ""in one embodiment"" herein are not necessarily all referring to the same embodiment. Some portions of the above are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the dataprocessing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here, and generally, conceived to be a self-consistent sequence of steps (instructions) leading to a de-sired result. The steps arethose requiring physical manipulations of physical quantities. Usually, though not necessarily, these quantities take the form of electrical, magnetic or optical signals capable of being stored, transferred, combined, compared and otherwise manipulated. It is convenient at times, principally for reasons of common usage, to refer to these signals as bits, values, elements, symbols, characters, terms, numbers, or the like. Furthermore, it is also convenient at times, to refer to certain arrangements ofsteps requiring physical manipulations of physical quantities as modules or code devices, without loss of generality. It should be borne in mind, however, that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise asapparent from the following discussion, it is appreciated that throughout the description, discussions utilizing terms such as ""processing"" or ""computing"" or ""calculating"" or ""displaying"" or ""determining"" or the like, refer to the action and processes ofa computer system, or similar electronic computing module and/or device, that manipulates and transforms data represented as physical (electronic) quantities within the computer system memories or registers or other such information storage, transmissionor display devices. Certain aspects of the present invention include process steps and instructions described herein in the form of an algorithm. It should be noted that the process steps and instructions of the present invention can be embodied in software,firmware or hardware, and when embodied in software, can be downloaded to reside on and be operated from different platforms used by a variety of operating systems. The present invention also relates to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes, or it may comprise a general-purpose computer selectively activated or reconfiguredby a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium, such as, but is not limited to, any type of disk including floppy disks, optical disks, CD-ROMs, magnetic-optical disks, read-onlymemories (ROMs), random access memories (RAMs), EPROMs, EEPROMs, magnetic or optical cards, application specific integrated circuits (ASICs), or any type of media suitable for storing electronic instructions, and each coupled to a computer system bus. Further, the computers referred to herein may include a single processor or may be architectures employing multiple processor designs for increased computing capability. The algorithms and displays presented herein are not inherently related to any particular computer, virtualized system, or other apparatus. Various general-purpose systems may also be used with programs in accordance with the teachings herein,or it may prove convenient to construct more specialized apparatus to perform the required method steps. The required structure for a variety of these systems will be apparent from the description above. In addition, the present invention is notdescribed with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the present invention as described herein, and any references above to specificlanguages are provided for disclosure of enablement and best mode of the present invention. While the invention has been described with respect to a limited number of embodiments, those skilled in the art, having benefit of the above description, will appreciate that other embodiments may be devised which do not depart from the scopeof the present invention as described herein. In addition, it should be noted that the language used in the specification has been principally selected for readability and instructional purposes, and may not have been selected to delineate orcircumscribe the inventive subject matter. Accordingly, the disclosure of the present invention is intended to be illustrative, but not limiting, of the scope of the invention, which is set forth in the claims."
19|http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=91&p=2&f=G&l=50&d=PTXT&S1=(python.CLTX.+or+python.DCTX.)&OS=ACLM/python&RS=ACLM/python|User co-routine interface for customizing SIP and SDP protocols|A method of using co-routines to implement a function-like interface between a BASIC program and the points in the system where SIP and SDP data (for example) are to be modified. This co-routine interface is intuitive from the end-user's perspective, and both real-time efficient and flexible from the system designer's perspective, and is applied to provide user-customized SIP and SDP modifications in an easy-to-use way that gives the end-user great flexibility while protecting the system from the undesirable side-effects that could result from a tightly coupled co-routine interface.|
20|http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=63&p=2&f=G&l=50&d=PTXT&S1=(python.CLTX.+or+python.DCTX.)&OS=ACLM/python&RS=ACLM/python|Static extensibility models with dynamic languages and scripts|Various technologies and techniques are disclosed for generating add-in bridges that allow hosts to be extended using a dynamic language. The system programmatically determines static requirements that an add-in is required to implement in order to integrate with a particular host. The system programmatically generates the add-in bridge to conform to the requirements of the particular host and to operate like a compiled add-in while actually calling dynamic language script files that are executed by a scripting engine. The add-in bridge is generated by generating a component for the add-in that contains at least one class to conform to the host requirements. A constructor is then generated for the class. For each method the add-in is required to implement, a respective method is generated in the class that provides a stub implementation but that calls dynamic-language script files to perform a desired functionality.|1. A computer storage memory having computer-executable instructions for causing a computer to perform steps comprising: receive input from a user to generate an add-inbridge to dynamically extend functionality of a particular host application that has one or more requirements to be met by a compiled add-in, the particular host application not directly supporting dynamic languages; programmatically determine the oneor more requirements that an add-in is required to implement in order to integrate with the particular host application by examining an object model of the particular host application to find an abstract class that represents the one or morerequirements, the one or more requirements being a static set of requirements that are part of a static extensibility model; and programmatically generate the add-in bridge dynamically to conform to the one or more requirements of the particular hostapplication and to operate like a compiled add-in while actually calling one or more script files that are executed by at least one scripting engine to implement a desired functionality, the one or more script files being written in a dynamic language,wherein the generation of the add-in bridge further comprises: generate a component for the add-in bridge that contains at least one class to conform to the static set of requirements of the host application; generate a constructor for the class,wherein the constructor reads a configuration to obtain an actual type to instantiate in order to create a particular script engine from a plurality of script engines; and for each method the add-in bridge is required to implement, generate a respectivemethod in the class that provides a stub implementation of the respective method but calls the one or more script files that are executed by the scripting engine to perform an actual implementation of a desired functionality. 2. The computer storage memory of claim 1, wherein the component is generated as an executable file. 3. The computer storage memory of claim 1, wherein the component is generated as an in-memory module. 4. The computer storage memory of claim 1, wherein the constructor is operable to perform work required to start up the particular script engine and load the one or more script files. 5. The computer storage memory of claim 1, wherein the constructor is operable to obtain an interface used to control the script engine. 6. The computer storage memory of claim 1, wherein the generating the component stage is operable to perform an appropriate registration of the component. 7. The computer storage memory of claim 1, wherein the configuration is read from a configuration file or by examining the one or more script files to be executed. 8. The computer storage memory of claim 1, wherein the configuration is read by examining machine state at runtime. 9. A method for programmatically generating an add-in bridge that extends a host functionality using a dynamic script comprising the steps of: receiving input from a user to generate an add-in bridge to dynamically extend functionality of aparticular host application that has one or more requirements to be met by a compiled add-in, the particular host application not directly supporting dynamic languages; programmatically determining the one or more requirements that an add-in is requiredto implement in order to integrate with the particular host application by examining an object model of the particular host application to find an abstract class that represents the one or more requirements, the one or more requirements being a staticset of requirements that are part of a static extensibility model; and programmatically generating the add-in bridge dynamically to conform to the one or more requirements of the particular host application and to operate like a compiled add-in whileactually calling one or more script files that are executed by at least one scripting engine to implement a desired functionality, the one or more script files being written in a dynamic language, wherein the generation of the add-in bridge furthercomprises: generating a component for the add-in bridge that contains at least one class to conform to the static set of requirements of the host application; generating a constructor for the class, wherein the constructor reads a configuration toobtain an actual type to instantiate in order to create a particular script engine from a plurality of script engines; and for each method the add-in bridge is required to implement, generating a respective method in the class that provides a stubimplementation of the respective method but calls the one or more script files that are executed by the scripting engine to perform an actual implementation of a desired functionality. 10. The method of claim 9, wherein the component is an executable file. 11. The method of claim 9, wherein the component is an in-memory module. 12. The method of claim 9, wherein the constructor will perform work required to start up the particular script engine and load the one or more script files. 13. The method of claim 12, wherein the constructor obtains an interface used to control the particular script engine. 14. The method of claim 9, wherein the generating the respective method step comprises the steps of: generating code for loading one or more input parameters into the particular script engine; generating code for notifying the particularscript engine to call the particular method in the one or more script files and passing the loaded input parameters; and generating code for passing a return value from the particular script engine back to a calling routine. 15. The method of claim 9, wherein the dynamic language is selected from the group consisting of JavaScript, VBScript, PHP, Python, and Perl. 16. A computer system comprising: a processing unit coupled to a memory, the memory storing computer-executable instructions which cause the processing unit to: receive input from a user to generate an add-in bridge to dynamically extendfunctionality of a particular host application that has one or more requirements to be met by a compiled add-in, the particular host application not directly supporting dynamic languages; programmatically determine the one or more requirements that anadd-in is required to implement in order to integrate with the particular host application by examining an object model of the particular host application to find an abstract class that represents the one or more requirements, the one or morerequirements being a static set of requirements that are part of a static extensibility model; and programmatically generate the add-in bridge dynamically to conform to the one or more requirements of the particular host application and to operate likea compiled add-in while actually calling one or more script files that are executed by at least one scripting engine to implement a desired functionality, the one or more script files being written in a dynamic language, wherein the generation of theadd-in bridge further comprises: generate a component for the add-in bridge that contains at least one class to conform to the static set of requirements of the host application; generate a constructor for the class, wherein the constructor reads aconfiguration to obtain an actual type to instantiate in order to create a particular script engine from a plurality of script engines; and for each method the add-in bridge is required to implement, generate a respective method in the class thatprovides a stub implementation of the respective method but calls the one or more script files that are executed by the scripting engine to perform an actual implementation of a desired functionality. 17. The system of claim 16, wherein the dynamic language is selected from the group consisting of JavaScript, VBScript, PHP, Python, and Perl. Description BACKGROUND In modern software development, applications are often developed in such a fashion as to allow additional features and functionality to be added to the completed application. Applications that are developed in this fashion are said to beextensible or follow an extensibility model. One common method that is used to extend an application is to create functionality in a component called an add-in. A second common method that is used to extend an application is through the use of ascripting engine and scripts. An application that provides for extensibility is referred to as a host because that application provides the environment in which the extensions operate. An add-in is a set of computer instructions compiled into at least one binary file. The add-in relies on the pre-defined knowledge of the host. Extending an application using a script does not require pre-defined knowledge of the host, butdoes require that the host implement an environment in which the script is to be executed. The reason the host must be aware of the script engine is because scripts, in general, are not compiled. Further, for a host to allow extensibility via scripts,the script engine must be defined before the application is completed so that it can be included as part of the available options. The host must also be aware of when to initiate the script engine and how and when to find the scripts to execute on it. This has the result of locking programmers into only those scripting languages that are supported for that application, if any are even supported at all.SUMMARY Various technologies and techniques are disclosed for generating add-in bridges that allow hosts to be extended using a dynamic language. Input is received from a user to generate an add-in bridge. The system programmatically determines one ormore static requirements that an add-in is required to implement in order to integrate with a particular host. The system programmatically generates the add-in bridge to conform to the one or more requirements of the particular host and to operate likea compiled add-in while actually calling one or more script files that are executed by at least one scripting engine to implement a desired functionality. The one or more script files are written in a dynamic language. The add-in bridge is programmatically generated by first generating a component for the add-in that contains at least one class to conform to the requirements of the host. A constructor is then generated for the class. For each method theadd-in is required to implement, a respective method is generated in the class that provides a stub implementation for the respective method but that calls one or more dynamic-language script files that are executed by at least one scripting engine toperform an actual implementation of a desired functionality. In one implementation, hosts that do not support dynamic languages can be extended using dynamic languages with the add-in bridge. This Summary was provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subjectmatter, nor is it intended to be used as an aid in determining the scope of the claimed subject matter. BRIEF DESCRIPTION OF THE DRAWINGS FIG. 1 is a diagrammatic view of a computer system of one implementation. FIG. 2 is a diagrammatic view of an add-in bridge generator application of one implementation operating on the computer system of FIG. 1. FIG. 3 is a high-level process flow diagram for one implementation of the system of FIG. 1. FIG. 4 is a process flow diagram for one implementation of the system of FIG. 1 illustrating the stages involved in generating the constructor for the class of the add-in component. FIG. 5 is a process flow diagram for one implementation of the system of FIG. 1 illustrating the stages involved in generating a constructor for the class of an add-in component that is for a specific host and configurable to use differentengines or script files. FIG. 6 is a process flow diagram for one implementation of the system of FIG. 1 illustrating the stages involved in generating each method for the add-in bridge that serves as a stub implementation that calls the script engine to do the work. FIG. 7 is a process flow diagram for one implementation of the system of FIG. 1 illustrating the stages involved in allowing a host that does not support dynamic languages to be extended by dynamic script files. FIG. 8 is a logical diagram for one implementation of the system of FIG. 1 that illustrates an add-in bridge that interacts with a scripting engine for extending functionality of a host.DETAILED DESCRIPTION For the purposes of promoting an understanding of the principles of the invention, reference will now be made to the embodiments illustrated in the drawings and specific language will be used to describe the same. It will nevertheless beunderstood that no limitation of the scope is thereby intended. Any alterations and further modifications in the described embodiments, and any further applications of the principles as described herein are contemplated as would normally occur to oneskilled in the art. The system may be described in the general context as an application that enables applications to be extended using add-ins, but the system also serves other purposes in addition to these. In one implementation, one or more of the techniquesdescribed herein can be implemented as features within a software development program such as MICROSOFT.RTM. VISUAL STUDIO.RTM. or from any other type of program or service that allows for the creation of add-in components. In one implementation, asystem is provided that allows a host that has a static set of requirements that must be implemented by add-ins to be extended using script files. The system enables this extended add-in functionality by generating an add-in bridge that contains a stubfor the requirements of the host, but calls the script engine and script files to do the actual work. The bridge can be generated dynamically at runtime, or statically by the add-in/script developer. This allows developers to write add-ins in one ormore dynamic script languages of choice to extend a host with functionality that otherwise has a static set of requirements that are typically implemented in a compiled add-in. As shown in FIG. 1, an exemplary computer system to use for implementing one or more parts of the system includes a computing device, such as computing device 100. In its most basic configuration, computing device 100 typically includes atleast one processing unit 102 and memory 104. Depending on the exact configuration and type of computing device, memory 104 may be volatile (such as RAM), non-volatile (such as ROM, flash memory, etc.) or some combination of the two. This most basicconfiguration is illustrated in FIG. 1 by dashed line 106. Additionally, device 100 may also have additional features/functionality. For example, device 100 may also include additional storage (removable and/or non-removable) including, but not limited to, magnetic or optical disks or tape. Suchadditional storage is illustrated in FIG. 1 by removable storage 108 and non-removable storage 110. Computer storage media includes volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage ofinformation such as computer readable instructions, data structures, program modules or other data. Memory 104, removable storage 108 and non-removable storage 110 are all examples of computer storage media. Computer storage media includes, but is notlimited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium whichcan be used to store the desired information and which can accessed by device 100. Any such computer storage media may be part of device 100. Computing device 100 includes one or more communication connections 114 that allow computing device 100 to communicate with other computers/applications 115. Device 100 may also have input device(s) 112 such as keyboard, mouse, pen, voice inputdevice, touch input device, etc. Output device(s) 111 such as a display, speakers, printer, etc. may also be included. These devices are well known in the art and need not be discussed at length here. In one implementation, computing device 100includes add-in bridge generator application 200. Add-in bridge generator application 200 will be described in further detail in FIG. 2. Turning now to FIG. 2 with continued reference to FIG. 1, an add-in bridge generator application 200 operating on computing device 100 is illustrated. Add-in bridge generator application 200 is one of the application programs that reside oncomputing device 100. However, it will be understood that add-in bridge generator application 200 can alternatively or additionally be embodied as computer-executable instructions on one or more computers and/or in different variations than shown onFIG. 1. Alternatively or additionally, one or more parts of add-in bridge generator application 200 can be part of system memory 104, on other computers and/or applications 115, or other such variations as would occur to one in the computer softwareart. Add-in bridge generator application 200 includes program logic 204, which is responsible for carrying out some or all of the techniques described herein. Program logic 204 includes logic for receiving input from a user to generate an add-inbridge 206; logic for programmatically determining one or more requirements that an add-in is required to implement in order to integrate with a particular host, the one or more requirements being a static set of requirements that are part of a staticextensibility model 208; logic for programmatically generating the add-in bridge to conform to the one or more requirements of the particular host and to operate like a compiled add-in while actually calling script file(s) that are executed by at leastone scripting engine to implement a desired functionality, the script file(s) being written in a dynamic language 210; logic for enabling the generation of the add-in bridge to be created by generating a component (assembly, executable file, component,in-memory module, etc.) for the add-in that contains a class to conform to the host requirements, generating a constructor (e.g. that obtains an interface to control script engine, starts script engine, loads script files, etc.), and for each method theadd-in must implement, generating a respective method in the class that implements the respective method but calls the script files that are executed by the scripting engine 212; and other logic for operating the application 220. In one implementation,program logic 204 is operable to be called programmatically from another program, such as using a single call to a procedure in program logic 204. Turning now to FIGS. 3-6 with continued reference to FIGS. 1-2, the stages for implementing one or more implementations of add-in bridge generator application 200 are described in further detail. FIG. 3 is a high level process flow diagram foradd-in bridge generator application 200. In one form, the process of FIG. 3 is at least partially implemented in the operating logic of computing device 100. The process begins at start point 240 with examining a static extensibility object model of ahost to find an abstract class that represents the one or more static requirements that the add-in is required to implement (stage 242). A component is generated (e.g. in an assembly, in-memory module, etc.) for the add-in that contains at least oneclass to conform to the static requirements of the host (stage 244). A constructor is generated for the class (stage 246). For each method the add-in is required to implement, a respective method is generated in the class that provides a stubimplementation for the respective method but calls one or more dynamic-language script files (e.g. JAVASCRIPT.RTM., VbScript, PHP, Python, Perl, etc.) that are executed by at least one scripting engine to perform an actual implementation of a desiredfunctionality (stage 248). The process ends at end point 250. FIG. 4 illustrates one implementation of the stages involved in generating the constructor for the class of the add-in component. In one form, the process of FIG. 4 is at least partially implemented in the operating logic of computing device100. The process begins at start point 270 with generating a constructor for the class for the add-in component as part of the creation of the add-in bridge (stage 272). The constructor is generated with the ability to obtain an interface used tocontrol the script engine (stage 274). The constructor is generated with the ability to obtain an actual type to instantiate in order to create the scripting engine (stage 276). The constructor is generated with the ability to perform the work to startup the script engine (stage 278). The constructor is generated with the ability to initialize the appropriate script file or files inside of the script engine (stage 280). The process ends at end point 282. FIG. 5 illustrates one implementation of the stages involved in generating a constructor for the class of an add-in component that is for a specific host and configurable to use different engines or script files. In one form, the process ofFIG. 5 is at least partially implemented in the operating logic of computing device 100. The process begins at start point 290 with generating a constructor for the class for the add-in component as part of the creation of the add-in bridge (stage 292). The constructor is generated with the ability to obtain an interface used to control the script engine (stage 294). The constructor is generated with the ability to read some configuration in order to obtain an actual type to instantiate in order tocreate the script engine (stage 296). As a few non-limiting examples, this configuration may take the form of a configuration file, runtime configuration by examining machine state, examining the script file to be executed, etc. (stage 296). Theconstructor is generated with the ability to perform the work to start up the script engine (298). The constructor is generated with the ability to read some configuration in order to obtain the script engine file(s) that should be used whenimplementing the add-in (stage 300). As a few non-limiting examples, the configuration may take the form of a configuration file, runtime configuration by examining machine state, etc. (stage 300). The process ends at end point 302. FIG. 6 illustrates one implementation of the stages involved in generating each method for the add-in bridge that serves as a stub implementation that calls the script engine to do the work. In one form, the process of FIG. 6 is at leastpartially implemented in the operating logic of computing device 100. The process begins at start point 310 with determining that there are more methods to generate in the add-in bridge to implement the required functionality of the host (decision point312). Code is generated for loading one or more input parameters into the script engine (stage 314). Code is generated for notifying the script engine to call the particular method in the script file(s) and pass the loaded input parameters (stage 316). Code is generated for passing a return value from the script engine back to a calling routine (stage 318). The stages are repeated for each respective method to be created. The process then ends at end point 320. FIG. 7 illustrates one implementation of the stages involved in allowing a host that does not support dynamic languages to be extended by dynamic script files. In one form, the process of FIG. 7 is at least partially implemented in theoperating logic of computing device 100. The process begins at start point 350 with programmatically determining the static requirement(s) that an add-in is required to implement in order to integrate with a particular host, the host not directlysupporting dynamic languages (stage 352). An add-in bridge is programmatically generated to conform to the requirements of the host and to operate like a compiled add-in that the host supports while actually calling script file(s) that are written in adynamic language and are executed by at least one script engine to implement a desired functionality (stage 354). By providing the add-in bridge, the host that does not directly support dynamic languages can actually be extended by a dynamic language(stage 356). The process ends at end point 358. FIG. 8 is a logical diagram for one implementation of the system of FIG. 1 that illustrates an add-in bridge 402 that interacts with a scripting engine 406 for extending functionality of a host 400. The add-in bridge 402 contains a stubimplementation of the host requirements 404. The stub implementation of the host requirements 404 call the dynamic language scripts 408 that are executed by the script engine 406. In one implementation, host 400 supports one or more dynamic languages. In another implementation, host 400 does not support any dynamic languages. Although the subject matter has been described in language specific to structural features and/or methodological acts, it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specificfeatures or acts described above. Rather, the specific features and acts described above are disclosed as example forms of implementing the claims. All equivalents, changes, and modifications that come within the spirit of the implementations asdescribed herein and/or by the following claims are desired to be protected. For example, a person of ordinary skill in the computer software art will recognize that the client and/or server arrangements, user interface screen content, and/or data layouts as described in the examples discussed herein could be organizeddifferently on one or more computers to include fewer or additional options or features than as portrayed in the examples.
21|http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=64&p=2&f=G&l=50&d=PTXT&S1=(python.CLTX.+or+python.DCTX.)&OS=ACLM/python&RS=ACLM/python|Client-side and server-side unified validation|A system and method for validating code on a client-side and on a server-side in a Web environment utilizes a single validation code to validate JavaScript code on a client-side and JavaScript code on a server-side of a computer network system. The single validation code can help to correct errors in the client code and ensure the integrity of data stored on the server.|
22|http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=89&p=2&f=G&l=50&d=PTXT&S1=(python.CLTX.+or+python.DCTX.)&OS=ACLM/python&RS=ACLM/python|System and method for developing, deploying, managing and monitoring a web application in a single environment|"A system and method for developing, deploying, managing and monitoring a web application in a single environment is disclosed herein. The single environment is preferably an integrated development environment (""IDE""). The system and method preferably allows for deployment to a cloud provider, and preferably allows for use of Web resources from multiple cloud providers. One preferred IDE is the APTANA.RTM. STUDIO IDE."|
23|http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=73&p=2&f=G&l=50&d=PTXT&S1=(python.CLTX.+or+python.DCTX.)&OS=ACLM/python&RS=ACLM/python|Method for testing connectivity of software applications hosted on networked computers|A method for verifying the connectivity of software applications hosted on networked computers. The connectivity of hosted function applications to be loaded into networked computers is verified and validated using quasi-hosted function applications that simulate the communications functions (i.e., connectivity) of those hosted function applications. The quasi-hosted function applications are run on the same hardware that the real hosted function applications will be run on. Furthermore, the connectivity of a real hosted function application loaded into one computer can be verified and validated by simulating communications of that real hosted function application with a multiplicity of quasi-hosted function applications running on the networked computers.|
24|http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=72&p=2&f=G&l=50&d=PTXT&S1=(python.CLTX.+or+python.DCTX.)&OS=ACLM/python&RS=ACLM/python|System and method for automatic hardware and software sequencing of computer-aided design (CAD) functionality testing|The present invention relates to a system and a method for creating hardware and/or software test sequences and in particular, to such a system and method in which modular building blocks are used to create, sequence and schedule a large scale testing sequence using a matrix like platform.|"1. A computer implemented method for defining and implementing a testing sequence for a UUT (unit under test) using directly controllable modular building blocks on agraphical user interface defining a test sequencing platform wherein said sequencing platform alleviates the need to manually connect said modular blocks, the method comprising: a. abstracting hardware test requirements for a UUT; b. defining aplurality of modular building blocks to correspond to said hardware test requirements, wherein each of said modular building blocks defines an elementary graphical unit utilized to configure a step within said hardware test requirement; c. building saidtest sequence by the user by placing said plurality of modular building blocks on said sequencing platform, said platform defining a graphical interface displayed to the user wherein said building blocks may be manipulated by the user, said platformcomprising a plurality of cells defining a matrix platform provided for placing said building blocks and for forming a relative stacking order of said building blocks on said platform wherein said stacking order corresponds to said hardware test sequencerequirements and wherein said platform automatically links said building blocks according to said stacking order determining the flow and execution of said test sequence according to said hardware test requirements; wherein said stacking order may beedited by a user within said platform such that said platform automatically re-links and reconfigures the flow and execution of said test sequence; and d. executing said test sequence according to the relative location of said plurality of modularbuilding blocks on said matrix platform. 2. The method of claim 1 wherein said plurality of said modular building blocks are chosen from a library of predefined modular blocks. 3. The method of claim 1 wherein said building blocks are chosen from the group consisting of: a. logic test sequences building blocks comprising test sequences chosen from the group consisting of: parallel process, start, case block, loopblock, while, wait for event, delay, terminate, set event, end, analysis, criteria, paraloop, if then, conditional, group, and lock & unlock; or b. test & measurements equipment building blocks comprising test sequences chosen from the group consistingof: oscilloscope, spectrum analyzer, Geiger counter, voltmeter, decibel meter, odometer, tachometer, pressure meter, flow meter, DC power, AC power, analog I/O, attenuators, audio analyzers, camera, chamber, communication, counter, data transmission,digital I/O, digital wave, electronic load, function generator, multimeter, network analyzer, power meter, power supply, pulse pattern generator, scope, signal generator, sound, spectrum, switch, mobile, traffic generator, or any combination thereof. 4. The library of claim 2 comprising categorized, or grouped, or favorite or often used building blocks. 5. The method of claim 1 for testing process automation or resource management using said directly controllable modular building blocks. 6. The method of claim 5 wherein said resource management comprises synchronization and coordination between different test sequences and wherein said resource management comprises defining resource attributes required to execute a testsequence on a given UUT forming a common denominator attributes specific to said resource. 7. The method of claim 6 wherein said resource management test sequences are chosen from the group consisting of test equipment, hardware. 8. The matrix of claim 1 wherein the size of said matrix is user defined. 9. The sequencing platform of claim 1 wherein said modular building blocks are placed over and controllably associate with said cells. 10. The sequencing platform of claim 1 wherein said building blocks provide a platform for creating fluid test sequences chosen from the group consisting of splitting, branching, delayed process, parallel process, between process and within aprocess. 11. The method of claim 1 wherein said modular building blocks correspond to at least one process undertaken during said test sequence. 12. The modular building block of claim 3 wherein said Test and Measurement (T&M;) modular building blocks are configured to automatically comprise the relevant analytical procedure according to a product and/or process under test. 13. The modular building blocks of claim 3 wherein said building blocks may be customized according to at least one user defined parameters chosen from the group consisting of: relevant equipment type, equipment family, vendor, vendor driver,specific functionality required and hardware interface. 14. The method of claim 1 wherein test sequences, modular building blocks, or building block sequences may be exported to a third party system through a computer readable media; and wherein said export is facilitated by running a generatedcode that may be run on an appropriate programming language or script interface chosen from the group consisting of C, C++, object oriented language, markup language, TCL and XML. 15. The method of 3 wherein said conditional building blocks are implemented with at least two building blocks wherein a first modular building block defines an event condition and a second modular building block to wait for the event conditionto exist. 16. A computer aided design (CAD) system having a processor for evaluating and testing products and processes under evaluation with modular building blocks comprising: a. a functional testing module for abstracting an evaluation and testsequences for evaluating products and/or processes; and b. a test execution module for executing and performing said evaluation and test sequences abstracted with said function testing module; and c. a requirements module for defining requirements forsaid evaluation and test sequences associated with said products and processes; and d. a standards module for standardizing data exchange, communication and storage within said CAD system; and e. a product and process description module providingproduct and process description for abstracting said evaluation and test sequence with said function testing module; and f. an encapsulation module providing modular building blocks for abstracting said evaluation and test sequences for said productsand/or processes with said test execution module and in accordance with said product and process description module and further based on requirements defined in said requirements module. 17. The system of claim 16 wherein said CAD system further comprises: g. a business intelligence module for analyzing said testing and evaluation of said products and processes with respect to an organization; and h. a data evaluation modulefor providing said business intelligence module with data for said analysis; and i. an enterprise processes module comprising user and/or enterprise based protocols providing for initiating the execution of sequences created by said functional testingmodule and provided to at least one or more management tools. 18. The system of claim 16 wherein said standards module comprising at least one and more preferably a plurality of standard engines to provide a user with standardized data exchange and storage for said CAD system, chosen from the groupconsisting of standard reporting and documentation engine, standard communication engine and standard data engine; and wherein said standardized communication engine is provided with a plurality of communication formats chosen from the group consistingof user defined standards, company standards, regional standards, local standards, international standards, BVQI, ISO. 19. The system of claim 16 further comprising analysis module providing decision support associated with implementing and extrapolating solutions with respect to the results of said product and processes evaluation and test. 20. The method of claim 1 further comprising abstracting software test requirements and defining said modular building blocks to correspond to said software test requirements. 21. The method of claim 20 wherein said building blocks comprising said software test requirements are chosen from the group consisting of: a. software test sequences building blocks comprising test sequences chosen from the group consistingof: exe, .net dll, Win32 dll, activex, webservices, python, Java script, vb script, perl, tcl and batch; or b. communication protocols building blocks chosen from the group consisting of: serial, TCPIP, UDP, Telnet, GPIB, USB, FTP, parallel, Web GUI,Web services, FTP, BUS, TFTP5MAIL, CLI, SNMP, SSH, HTTP, Application GUI; or c. administrative utilities comprising test sequences chosen from the group consisting of: File Engine, MatShell, and Transformation; or d. third party API; or e. reportingtools. 22. A computer implemented method for defining and implementing a testing sequence for a UUT (unit under test) using directly controllable modular building blocks on a graphical user interface defining a test sequencing platform wherein saidsequencing platform alleviates the need to manually connect said modular blocks, the method comprising: a. abstracting software test requirements for a UUT; b. defining a plurality of modular building blocks to correspond to said software testrequirements, wherein each of said modular building blocks defines an elementary graphical unit utilized to configure a step within said software test requirement; c. building said test sequence by the user by placing said plurality of modular buildingblocks on said sequencing platform, said platform defining a graphical interface displayed to the user wherein said building blocks may be manipulated by the user, said platform comprising a plurality of cells defining a matrix platform provided forplacing said building blocks and for forming a relative stacking order of said building blocks on said platform wherein said stacking order corresponds to said software test sequence requirements and wherein said platform automatically links saidbuilding blocks according to said stacking order determining the flow and execution of said test sequence according to said software test requirements; wherein said stacking order may be edited by a user within said platform such that said platformautomatically re-links and reconfigures the flow and execution of said test sequence; and d. executing said test sequence according to the relative location of said plurality of modular building blocks on said matrix platform. 23. The method of claim 22 further comprising abstracting hardware test requirements and defining said modular building blocks to correspond to said hardware test requirements. 24. The method of claim 23 wherein said building blocks comprising said hardware test requirements are chosen from the group consisting of: a. software test sequences building blocks comprising test sequences chosen from the group consistingof: exe, .net dll, Win32 dll, activex, webservices, python, Java script, vb script, perl, tcl and batch; or b. communication protocols building blocks chosen from the group consisting of: serial, TCPIP, UDP, Telnet, GPIB, USB, FTP, parallel, Web GUI,Web services, FTP, BUS, TFTP5MAIL, CLI, SNMP, SSH, HTTP, Application GUI; or c. administrative utilities comprising test sequences chosen from the group consisting of: File Engine, MatShell, and Transformation; or d. third party API; or e. reportingtools. Description FIELD OF THE INVENTION The present invention relates to a system and a method for managing and editing functional test creation and execution by using an automated standardized systems and methods as part of an overall quality management solution. In particular, tosuch a system and method in which modular building blocks are used to create, sequence, coordinate and schedule automated procedures, for example hardware and or software test sequences, using a matrix like testing platform.BACKGROUND OF THE INVENTION In recent years the manufacturing industry has moved towards automated procedural evaluation and testing of both the manufactured products and the processes utilized to manufacture them. This move is also driven by the goal to create a userfriendly tool that would provide automated evaluation tools for the various departments involved in the manufacturing and planning process, such as research and development (R&D;), validation, verification, and support departments to allow processevaluation in addition to the automated hardware and software product testing. Therefore the shift in focus has expanded the use of automated testing and evaluation tools by making them available to the other departments associated with themanufacturing industry. Automated testing consists of creating sequences of reusable interactions with test and measurement equipment and then running them on a product to test its various features. Generally, the process of creating test sequences can be complex andoften requires programming skills. Currently, test engineers use a number of interaction styles to build test sequences which rely on menus for selecting the relevant functions and testing elements and primarily on command language programming to definethe test protocol or sequence. Various applications use direct manipulation and have introduced a graphical approach to data flow for the purpose of undertaking test and measurements related to manufactured products. For example, a user may create processes or diagrams byplacing different shapes representing objects of interest and connects them using connectors, as in a flow chart. The connectors are usually represented by lines that can be drawn by the user or automatically created by the system. However, such linesconnected test representations are limiting as a user cannot readily manipulate, move or amend connecting lines without reworking the complete process. This limitation is particularly evident in that when attempting to manipulate the graphical processas the connectors moves with its associated shape, not allowing quick and seamless amendments of a small portion within the flow chart. Accordingly, such interaction demands that a user invest time, resources and thought into recreating the flow chartmerely to change a single member of the flow chart, while managing both shapes and their respective connectors. Furthermore, currently available graphical tools are only useful to define operations of systems by connection of inputs and outputs (connector line), however, they become cumbersome when used to sequence and coordinate between procedures;therefore all currently available sequencers are not truly graphical. The solutions offered today include programming (graphical or textual) tools for writing the drivers and creating the interfaces for operating and creating the test steps, that leads to, complex operations that may be required immediatelyrequire developer skills to be implemented correctly. Furthermore, unraveling the interrelated links between various connections within a flow chart is a difficult and often burdensome process when attempting to understand the testing protocol usingstate of the art workflow charts. In fact if the same testing development assailment will be done by 2 different engineers, even with the same set of tools, the output will be different in means of UI, data collection, result data format, test flow format and it's documentation,test efficiency and coverage, Furthermore, solutions offered to date provide a tree like flow configuration where each step is a unidirectional black box. The tree format is limited to a one path vertical display, preventing a natural flow chart display. Use of the current tools to create the flow chart is inconvenient to the user since the main issue in creating components is defining logic, inputs and outputs. This is the main reason for connection lines between the different objects, whetherif only for input and output or for triggering events. The test flow is actually a sequence where the main interest is to set the correct order of the steps and to define the different flows, logics and branches of steps.SUMMARY OF THE INVENTION Thus, there is an unmet need for a system and method providing test engineers with the ability to create, schedule and sequence hardware and software test sequences in a visual and graphical sequencing platform. Such a graphical tools savestest engineers much time, investment, planning, processing, creating and modifying testing protocols for a UUT. Specifically, an optional embodiment of the present invention provides users with tools to readily, manipulate, amend, configure and define testing sequencing that is not currently possible with the state of the art flowcharts or flow treediagrams. There exists a need for such a graphical system and method that employs modular building blocks to readily control, visualize, define individual sequence steps and flow within the hardware and/or software testing sequence. Therefore, ratherthan defining a test sequence flow by connecting a plurality of blocks with lines as is currently practiced and accepted in the art, the present invention provides for a system and method wherein the relative location of the modular building blocksaccording to the present invention preferably defines the flow order of the test sequence. A test sequence is abstracted by a test engineer that undertakes a number of steps to create product testing. For example, a unit under test (UTT) is initially studied by a test engineer to understand the device and its functions, preferably togain understanding into what type of testing is required. The initial understanding of the device allows the test engineer to clearly and quickly abstract an appropriate test sequence. Later, the variety of requirements, obtained from the variousindividuals involved in the product development life cycle, are considered by the engineer to ensure that all required aspects are tested, for example including all of hardware and software aspects of the product, product specification and qualityassurance. Based on the multitude of data a test engineer abstracts the required test solution most preferably using a variety of tools. The test sequence is developed relative to the product requirements, for example including but not limited tointerfaces and drivers for test and measurement equipment (T&M;). Software components and graphical panels for defining and handling the different tools are defined. Later, data aggregation and analysis tools are place in order to collect the datameasure the required parameters. Finally, the test sequence is finalized, compiled, tested and executed with a UUT. The present invention overcomes the deficiencies of the background art by providing a system and method for the creation of test sequences using a novel human computer interface concept. An optional embodiment of the present invention providesa system, method and platform for direct manipulation of modular building blocks that correspond to hardware and/or software testing sequences. Preferably, the system and method of the present invention provides a user of varying skill level, fromnovice to expert, with the ability to easily and seamlessly abstracting and compose a test sequence for a unit under test (UUT). The term ""Unit Under Test (UUT)"" refers to a hardware and/or software product that is undergoing testing. The term UUT may be used interchangeably with the term device under test or DUT, also in reference to a product that is undergoinghardware and or software testing procedures. The term ""test"" within the context of the present application refers to any process, step or instance for evaluating, ensuring, checking, monitoring, observing, regulating, controlling, or alerting that is related to a process, procedure,process flow, decision, functional procedure or the like for the purpose of evaluating the processes in terms of at least one or more steps, a group steps, a set of steps or a product. The term ""test sequence"" within the context of the present application refers to a sequence of commands or instructions that are used to test the hardware and software aspects of a product or a UUT or DUT. The term ""test sequence branch"" may refer to a portion of a test sequence. The term ""sub-sequence"" may refer to a portion of a short test sequence within a sequence branch or test sequence that is optionally an independent sequence or may be incorporated in a building block. The terms building block, or test sequence building block, within the context of this invention refers to the elementary graphical units that may be combined to create a test sequence or test sequence branch, where each building block comprisesa step within the test sequence. The terms sequencing platform, or test developing platform, within the context of the present invention refers to the display area, canvass or stage on which building blocks are compiled to create, build and amend a test sequence. The terms test platform or testing platform within the context of the present invention refers to the collective system and method according to an optional embodiment of the present invention preferably comprising software and hardware toolsused to create and execute hardware and/or software testing sequences. An optional embodiment of the present invention provides a system and method for computer aided design (CAD) of functional test and processes. An optional embodiment for a procedural CAD system and method preferably provides a user datacentered about the functional test and process evaluation. Preferably the functional evaluation CAD according to the present invention comprises a functional testing module, test execution module, requirements module, standards module, productdescription, process description, standards module, encapsulation module, data module and a business intelligence module. Most preferably, the evaluation CAD according to the present invention comprises fluid communication between modules to facilitatedata flow from one module to another. Optionally and preferably, the standards module further comprises standard reporting, documentation, communication, data, between at least two or more modules wherein the data exchanged is standardized according toa standard for example including but not limited to user defined standards, company standards, regional standards, local standards, international standards, BVQI, ISO or the like. Preferably, the functional evaluation CAD system and method provides a user with a modular method for evaluating and testing products and processes. Most preferably evaluation and testing with a functional evaluation CAD system and methodaccording to the present invention provides user and organizations with an evaluation of organizational processes and or products. Optionally, product and processes evaluation may be built, stored, reused, amended, customized, shared and comparedbetween at least one or more users. Optionally, the CAD functional evaluation system and method according to an optional embodiment of the present invention may be optionally realized on a computer over a network connection for example including but notlimited to an internet or intranet connection, host, client server or the like network configuration. Most preferably, the evaluation CAD according to the present invention provides a user with a plurality of types of business intelligence data that may be valuable to an organization to evaluate its own efficiency and capabilities, for example. Optionally, a preferred embodiment of the present invention provides a user with data to early, quickly and seamlessly abstract a test sequence or an evaluation sequence by integrating standardized requirements with modular encapsulated buildingblocks. The method and system according to a further optional embodiment of the present invention most preferably provides a test engineering tool comprising a plurality modular building blocks comprising hardware and software test definitions and stepwise instructions allowing a test engineer to abstract and undertake a test sequence according to the product requirements for a UUT by controllably defining and combining a plurality modular building blocks according to the present invention. Mostpreferably, the platform according to the present invention provides a cost and time saving tools that saves a test engineer much time and effort in creating the test sequence therein allowing the test engineer to invest most of his or her time intowriting and defining the actual test sequences. Preferably, the system and method according to the present invention provides a tool comprising a large library of readymade components, preferably providing support for all the functionality required in creating a test sequence. Optionally,the readymade tools provides a user with an application level user interface allowing configuration and setup in a quick and intuitive manner for the test sequence of interest. Optionally and preferably, the readymade tool may be readily and efficientlyutilized by non-expert level users. Preferably, the system and method of the present invention provides for creating fluid test sequences comprising splitting, branching, delayed and parallel processes between process and within a single process. Most preferably a fluid test sequence is created by placing modular building blocks relative to one another within a user interface comprising a test development platform or sequencing platform. Preferably, each new modular building block isplaced relative to its predecessor, above or below for successive blocks (in series), left or right for branched blocks (in parallel). Therein, the relative location of the building blocks preferably defines the flow order within the test sequence. An optional embodiment of the present invention provides a user with a plurality of elemental building blocks with which the user may define, customize, or abstract a plurality of testing protocols in keeping with the manufacturing requirementsof the UUT. The elemental modular building blocks preferably correspond to at least one process undertaken during a test sequence. Most preferably, the elemental modular building blocks may be categorized according to the type of action or procedurecomprised therein, for example including but not limited to logic test sequences, software test sequences; communication protocols, test & measurements equipment, administrative protocols, utilities, third party API, reporting tools, protocols or thelike groups. Optionally logic test sequences comprise logical test sequences for example include but are not limited to parallel, parallel process, start, case block, loop block, while, wait for event, delay, terminate, set event, end, analysis, conditionalcriteria, paraloop. or the like in any combination thereof. Optionally communication building blocks comprise communication test sequences for example including but are not limited to serial, TCPIP, UDP, Telnet, GPIB, USB, FTP, parallel, Web GUI, Web services, FTP, BUS, TFTP, MAIL, CLI, SNMP, SSH, HTTP,Application GUI, or the like in a any combination thereof. Optionally software building blocks comprise software specific test sequences for example including but are not limited to exe, .net dll (dot net dll), win32 dll, activex, webservices, python, java script, vb script, perl, tcl and batch, or thelike in any combination thereof. Optionally administrative utilities blocks comprise test sequences for example including but are not limited to File Engine, MatShell, and Transformation or the like. Optionally file engine building blocks provides for at least one or morefunctions for example including but not limited to data file management, loading information, import and exporting information, moving files, deleting and the like functionality. Optionally MatShell building blocks provide for mathematical andstatistical analysis for data analysis for example including but not limited to varying levels of mathematical and statistical functioning, basic and advanced mathematical and statistical functions. Optionally transformation building blocks provide fortextual analysis for example including but not limited to parsing textual data, OCR optionally providing for further use optionally with built in parsing functions. Optionally a plurality of groups may be formed to include the type of procedure undertaken for example including but not limited to protocols relating to tests and measurement (T&M;), analytical, logical, third party software, software,communication, or the like. Optionally, a user may define new groups of testing protocols. Optionally, the grouping may be readily identifiable using clear visual or audible cues for example including but not limited to color coding, icons, audiblecues or the like. Optionally the elemental modular building blocks according to the present invention for Test and Measurement (T&M;) protocols comprise blocks that represent different types of testing equipment for example including but not limited to anoscilloscope, spectrum analyzer, Geiger counter, voltmeter, decibel meter, odometer, tachometer, pressure meter, flow meter, DC power, AC power, analog I/O, attenuators, audio analyzers, camera, chamber, communication, counter, data transmission, digitalI/O, digital wave, electronic load, function generator, multimeter, network analyzer, power meter, power supply, pulse pattern generator, scope, signal generator, sound, spectrum, switch, mobile, traffic generator or the like as is known and accepted inthe art. Optionally when selecting the elemental modular T&M; building block a relevant T&M; panel is made available to the user wherein the user can define the relevant test requirements and the relative manipulations required by the UUT. For example, auser preferably determines and defines parameters including but not limited to the relevant equipment type, equipment family, vendor, appropriate vendor driver, specific functionality required, hardware interface and the like. Optionally the user is provided with analysis building blocks providing a user with an interface relating to the analysis required by the UUT. Optionally and preferably, analytic building blocks are associated with T&M; building blocks toanalyze the results obtained with the T&M; building blocks. Optionally, a T&M; may be configured to automatically comprise the relevant analytical procedure. Optionally, a user is provided with logic building blocks. Optionally and preferably, the logic building blocks comprise a plurality of logical functional blocks for example including but not limited to start and end, case, parallel, loops,while, terminate, if then, conditional, set event, group, paraloop, wait for event, lock & unlock, or the like. For example, a parallel logical building block may be used to incorporate a parallel process within a test sequence. A case building blockmay be optionally utilized to add conditional setting with the test sequence, for example, if the power supply is greater than X perform Y, otherwise perform Z. Optionally, logical building blocks may be used to control a testing sequence flow for example by utilizing conditional building blocks for example including but not limited to a case, parallel and set event and wait-for-event blocks, or thelike conditional building blocks. Optionally, the system and method of the present invention provides a user with parallel building blocks: These building blocks form parallel processing within a sequence. Optionally, the system and method of the present invention provides a user with loop building blocks. Optionally, loop building block pairs comprise a start and an end loop building block that preferably define a sub-sequence that is to beexecuted within the loop sequence when the loop conditions occur. Optionally, the system and method of the present invention provides a user with a ""while"" building block. Optionally, while building blocks comprise a while start and end building blocks that preferably define a sub-sequence that is to beexecuted within the while sequence when the loop conditions occur. Optionally, the system and method of the present invention provides a user with temporal and flow control within a test sequence by setting conditional events and waiting for thecondition to exist. Optionally and preferably such conditional events may be implemented with at least two building blocks. Optionally a first block is utilized for setting or defining the event condition and a second block to wait for the event orcondition to exist. Optionally, the first and second building blocks may be located anywhere on a test sequence, optionally, on separate test sequence branches, within the same branch, within a sub-sequence. Optionally, when located on separatesequence branches the branches are effectively linked by the condition. Optionally, the system and method of the present invention provides a user with a terminate building block that terminates the test sequence. Optionally, the system and method of the present invention provides a user with group building block that may comprise at least one or more preferably a plurality of building blocks incorporating a plurality of sequences for example includingbut not limited to defining a function, a sub sequence or the like. Optionally, the system and method of the present invention provides a user with a software interfacing building block preferably able to execute software protocols, communications or otherwise iterating with an external or third party softwaremodule. Optionally, the system and method of the present invention provides a user with a generic application program interface (API) building block, for example including but not limited to a generic API, customizable API, predefined API specific toapplication types or the like. For example, a client specific software module may be accessed and incorporated into a test sequence according to the system and method of the present invention, optionally by using an generic API building block and thencustomized to the user's application needs. Optionally, a generic API building block may be customized according to the user's specification and be saved for future use. An optional embodiment of the present invention provides for exporting test sequences, building block sequences to a generated code that may optionally be run on an appropriate programming language or script interface, for example including butnot limited to C, C++, object oriented language, markup language, XML, TCL or the like as is known and accepted in the art. For example, a test sequence may be converted to a C++ form and exported, edited, amended, copied or other programming platformthat compile and execute C++ language protocols. Optionally, a building block may be created to undertake any functional test by optionally defining at least one or more of the testing parameters for example including but not limited to inputs, outputs, setting, configuration options, andanalysis options or the like parameters. An optional embodiment of the present invention provides a user with a graphical tool that allows a user to visually manage testing resources while supporting process automation planning. Optionally, the building blocks according to the presentinvention may be manipulated based on resource testing. Optionally the building blocks according to the present invention provide both a testing sequence and time scaled testing sequence optionally in the form of a resource time plot for exampleincluding but not limited to a time scaled plot, a Gantt chart or the like. Optionally, a time and resource optimized testing sequence according to an optional embodiment of the present invention provides a user with the ability to further control the testing sequence its timing and resources availability. Optionallyand preferably, such time and resource control is provided automatically to optimize at least one parameter for example including test performance, test time, or test resource usage. Optionally automated temporal and resource optimization is performedby a computer. Optionally, temporal and resource control may be controlled by the user. Optionally temporal and resource control may be controlled in a semiautomatic manner both by a user and computer. An optional embodiment of the present invention provides a method for implementing a testing sequence using directly controllable modular building blocks comprising abstracting software and hardware test requirements; and defining a plurality ofmodular building blocks corresponding to the software and hardware test requirements; and building the test sequence by stacking the plurality of modular building blocks on a matrix platform forming a relative stacking order. Optionally and preferablythe relative location of the plurality of modular builder blocks on the matrix platform determines the test sequence. An optional embodiment according to the present invention may be provided for testing a plurality of products and process for example including but not limited to testing resource management, process automation as it applies to an organization,product or process. Optionally resource management comprises defining resource attributes required to execute a test sequence on a given UUT forming a common denominator attributes specific to the resource. Optionally resource testing may be performedfor example including but note limited to is test equipment, hardware, software, software module and API. Unless otherwise defined the various embodiment of the present invention may be provided to an end user in a plurality of formats, platforms, and may be outputted to at least one of a computer readable memory, a computer display device, aprintout, a computer on a network or a user. Unless otherwise defined, all technical and scientific terms used herein have the same meaning as commonly understood by one of ordinary skill in the art to which this invention belongs. The materials, methods, and examples provided herein areillustrative only and not intended to be limiting. Implementation of the method and system of the present invention involves performing or completing certain selected tasks or steps manually, automatically, or a combination thereof. Moreover, accordingto actual instrumentation and equipment of optional embodiments of the method and system of the present invention, several selected steps could be implemented by hardware or by software on any operating system of any firmware or a combination thereof. For example, as hardware, selected steps of the invention could be implemented as a chip or a circuit. As software, selected steps of the invention could be implemented as a plurality of software instructions being executed by a computer using anysuitable operating system. In any case, selected steps of the method and system of the invention could be described as being performed by a data processor, such as a computing platform for executing a plurality of instructions. Although the present invention is described with regard to a ""computer"" on a ""computer network"", it should be noted that optionally any device featuring a data processor and/or the ability to execute one or more instructions may be described asa computer, including but not limited to a PC (personal computer), a server, a minicomputer, a cellular telephone, a smart phone, a PDA (personal data assistant), a pager. Any two or more of such devices in communication with each other, and/or anycomputer in communication with any other computer, may optionally comprise a ""computer network"". BRIEF DESCRIPTION OF THE DRAWINGS The invention is herein described, by way of example only, with reference to the accompanying drawings. With specific reference now to the drawings in detail, it is stressed that the particulars shown are by way of example and for purposes ofillustrative discussion of the preferred embodiments of the present invention only, and are presented in order to provide what is believed to be the most useful and readily understood description of the principles and conceptual aspects of the invention. In this regard, no attempt is made to show structural details of the invention in more detail than is necessary for a fundamental understanding of the invention, the description taken with the drawings making apparent to those skilled in the art how theseveral forms of the invention may be embodied in practice. In the drawings: FIG. 1A-B are schematic block diagrams of exemplary system according to the present invention; FIG. 2 is an exemplary method according to the present invention for defining a building block; FIG. 3 is an exemplary method according to the present invention for creating a test sequence using building block defined of FIG. 2; FIGS. 4A-B are exemplary diagrams of the user interface according to the present invention; FIGS. 5A-B are exemplary diagrams of the modular building blocks according to the present invention. FIGS. 6A-C are exemplary diagrams of user interface to configure and define the functions of a modular building blocks according to the present invention; FIGS. 7A-C are exemplary diagrams of a user interface to configure and define the functions of a modular building blocks according to the present invention.DESCRIPTION OF THE PREFERRED EMBODIMENTS The present invention provides a system, method and platform for creation of test sequences using a novel human computer interface concept. A preferred embodiment of the present invention provides a system, method and platform for directmanipulation of modular building blocks that correspond to hardware and/or software testing sequences. Optionally, the system and method of the present invention provides a user of varying skill level, from novice to expert, with the ability to easilyand seamlessly abstracting and compose a test sequence for a unit under test (UUT). The principles and operation of the present invention may be better understood with reference to the drawings and the accompanying description. FIG. 1A shows a system 200 according to a preferred embodiment of the present invention for computer aided design (CAD) for functional evaluation of products and processes. Preferably, system 200 comprises functional testing module 220, testexecution module 222, requirements module 206, standards module 250, product and process description module 202, encapsulation module 210, evaluation data module 230, business intelligence module 240. Most preferably, the evaluation CAD according to thepresent invention comprises fluid communication between modules to facilitate data flow from one module to another. Optionally and preferably, standards module 250 comprising at least one and more preferably a plurality of standard engines to provide auser with standardized data exchange and storage between modules. For example, standard module 250 optionally comprises standard reporting and documentation engine 256, standard communication engine 254 and standard data engine 252. Preferably,standardized communication formats for example include but are not limited to user defined standards, company standards, regional standards, local standards, international standards, BVQI, ISO or the like. Preferably, the functional evaluation CAD system 200 provides a user with a modular mechanism for evaluating and testing products and processes. Optionally and preferably, products and process description module 202 is used with standardsmodule 250 to abstract standardized evaluation and test requirements 206 for the evaluation of products and or processes of interest. Optionally, requirements module 206 may be defined directly by a user from a plurality of sources, for exampleincluding but not limited to research and development team, quality assurance, manufacturing, marketing, third party requirements, or the like. Most preferably, requirements module 206 comprises all requirements relating to a product or process that isto be evaluated. Most preferably, the process for evaluating requirements 206 is defined functional testing module 220. Most preferably, functional testing module 220, according to a preferred embodiment of the present invention as described in greater detailin FIG. 1B, utilizes modular building blocks to create and build a test sequence used to evaluate the product or process defined in requirements module 206. Preferably, a test sequence is abstracted with functional testing module 220 with modularbuilding blocks according to the present invention comprised within encapsulation module 210. Preferably, encapsulation module 210 provides a user with a plurality of building blocks library for example including but not limited to test and measurements(T&M;) building blocks within T&M; module 211, analytical building blocks within analysis module 212, sockets module 214, communication module 216 and processes logic module 218, for example. Optionally and preferably encapsulation module 210 provides auser with readily available modular building blocks and references that may be used to create a testing or evaluation sequence for the product or process under evaluation. Optionally, system 200 may automatically abstract an evaluation process or testsequence within functional testing module 220 based on requirements 206 with the tools and building blocks made available by encapsulation module 210. Preferably, a test sequence abstracted with functional testing module 220 is executed within execution module 222. Optionally and preferably execution of the test sequence is preformed in accordance with a user or enterprise based protocols andprocesses as defined in enterprise processes 208. Optionally and preferably, module 208 provides a process management tools able to initiate execution of sequences created testing module 220. Optionally, activation and execution of test sequencescreated in module 220 is facilitated by module 208 provided to a plurality of management tools optionally including but not limited to internal management tools or third party management tools. Preferably, enterprise processes are standardized with activation standards defined by standard communication engine 254. Optionally, communication standards engine 254 is used to ensure that scheduling from enterprise processes module 208 isstandardized according to standards defined in standards module 250 to allow seamless execution of the test sequence and future data flow. Preferably, execution module 222 comprises report and analysis of the results of the evaluation process. Preferably, evaluation results following test execution 222 are compared with the executed test sequence defined in functional testing module 220 and optionally stored in a standardized manner with module 256 in evaluation data module 230 forfuture reference. Optionally and preferably, evaluation data module 230 comprises a plurality of repositories (not shown) that are preferably used to obtain data from the test sequence and test results. Optionally, the data in evaluation data module230 is parsed to and deposited in at least one or more repositories comprising test library repository 232, failure data repository 234, resource data repository 236 and quality analysis repository 238. Most preferably data from evaluation data module230 is used to provide business intelligence module 240 with data that may be used to improve and generally evaluate the business and test process overall, providing a user with significant insight into the testing and evaluation of products andprocesses within an organization. Most preferably, data comprised within at least one or more repositories 230-238 is made available and may be queried by intelligence module 240, optionally and preferably the extracted data may then be used to report,analyze and further reflect data or to obtain additional useful information. Optionally, data may be further analyzed and obtained from analysis module 226. Module 226 preferably and optionally provides a user with the option of inserting additional descriptions and statistics relating to results and tests optionallyproviding a plurality of decision making supportive tools. For example, after debugging a test or process procedure, identifying the problem, module 226 allows the user to incorporate the problem and solution to system 200 therefore allowing futurerecommendation when similar instances occur. Optionally, module 226 comprises suggestions of one or more actions to perform in relation to the occurrence, for example, how to prioritize procedures or sequences, determine frequency of occurrence,determine related costs, length of test and the like, steps required to resolve occurrence or the like ramifications of a particular occurrence. Optionally data in test library repository 232 is saved in accordance with standards module 250, providing a user with future reference to historical test sequences. Most preferably, access to the test repository 232 provides a user withability to abstract new tests sequences with test sequence module 220 utilizing encapsulation module 210 to quickly create test sequences relative to requirements 206 optionally using a plurality of methods for example including but not limited to trialand error, reuse, tracking, version control or the like. Optionally, this would allow a user to abstract a test sequence optionally early in the evaluation and requirements process based on existing test sequences. FIG. 1B shows a system 100 according to a preferred embodiment of the present invention. System 100 comprises device requirements 102, test platform 110, unit under test 120 and testing equipment 130 Preferably, device requirements 102comprises all testing requirements that may be incorporated into the testing sequence for example including hardware performance, software performance, hardware function, software function, hardware specification, user specification or the likeparameters comprising the testing requirements for the UUT. Optionally, device requirements comprise a plurality of requirements for example including but not limited to hardware requirements 106 and software requirements 104. Optionally and preferablyfurther requirements for example including but not limited to user interactions, user hardware interactions, user software interactions, user device interactions are optionally further incorporated. Preferably the device requirements 102 are linked tothe testing platform 110 of the present invention. Optionally, device requirements are made readily available to a user, for example using a link, a hyperlink, attachments, shortcuts or the like tools for providing quick access to the requirementmaterial. Optionally, device requirements may be available in a plurality of media for example including but not limited to reference material, documents, reports, images, video, third party material, external, standards or the like. Optionally, testing platform 110 provides a user with the ability to readily, create, edit, manipulate, customize or otherwise control a testing sequence in keeping with the device requirements 102. Testing platform 110 preferably comprises atest module 112, report module 114 and analysis module 116. Optionally, test module 112 provides the user with a sequencing platform according to the present invention to create hardware and/or software testing sequences for a device in keeping with aplurality of device requirements 102. Preferably, test module 112 provides a user with a sequencing platform to manipulate and utilize the elementary modular building blocks according to the present invention to build an appropriate test sequence. Preferably, test module 112 provides a user with tools to relate data of the abstracted test sequence. For example a user is provided with data relating to the testing sequence for example including but not limited to parameters, variables, UUTperformance, error report, test equipment performance or the like. Preferably, test module 112 is provided with a plurality of tools to control the performance, timing of an abstracted test sequence as well as to control the building blocks themselves. Optionally, a user is provided tools for running a testingsequence, for example including but not limited to run the test sequence, perform a pre-run, stop, step by step, variable watch, or the like as is known and accepted in the art. Optionally, a user is provided with tools to control the modular buildingblocks according to the present invention. Preferably, modular building block tools are used to define and configure a building block as well as to control its activity during, before and after the test sequence is abstracted. Optionally, modularbuilding block tools for example includes but is not limited to configure, family type, variables. Optionally, modular building block tool options within the testing platform are provided for example including but not limited to auto open, stickiness,resource release, clear, zoom, view enhancer or the like as is known and accepted in the art. Optionally, report module 114 provides a user with reports relating to the test sequence and test results that is being run. Optionally, a report from the report module 114 provides a user with information relating to the performance of the UUTduring the test procedure. Optionally, report module 114 communicates with analysis module 116 to analyze the test results obtained from at least one or more UUT 120 and at least one or more testing equipment 130. Optionally, report module 114 provides a user with areport that optionally correlates the test results to the expected resulted based on the device requirements 102. Optionally, test platform 110 interacts with a plurality of UUT 120 and at least one or more testing equipment 130 to undertaken the testing process, according to the test sequence abstracted with the test module 112 wherein its results arereported using report module 114 and analyzed with analysis module 116. Test equipment 130 optionally comprises at least one or more different pieces of test equipment required to test the performance of a unit under test 120. Test equipment 130 for example includes but is not limited to an oscilloscope, voltmeter,odometer, Telnet, traffic generators or the like testing equipment, or any type of testing equipment system. Optionally, system 100 comprises communication with its component. Optionally and preferably, test platform 110 comprises communication between UUT 120 and a plurality of test equipment 130. Optionally, communication is mediated using acommunication configuration over a network connection, optionally including but not limited to an internet, intranet, client server, host, any type of computer network or the like communication configuration as is known and accepted in the art. Optionally, communication between UUT 120 and test platform 110 may be a direct physical connection not realized over a network connection. Optionally, a direct physical connection is mediated by optional communication ports for example including butnot limited to USB, GPIB, PCI, PXI, parallel, serial, TCPIP, UDP, Telnet, Web GUI, Web services, FTP, BUS, TFTP, MAIL, CLI, SNMP, SSH, HTTP, Application GUI or the like as is known and accepted in the art. Optionally, communication between test platform 110 and test equipment 130 is mediated by a plurality of optional communication ports for example including but not limited to USB, GPIB, PCI, PXI, Serial, parallel, TCPIP, UDP, Telnet, Web GUI,Web services, BUS, TFTP, CLI, SNMP, SSH, HTTP, Application GUI or the like as is known and accepted in the art. Optionally, test platform 110 according to a preferred embodiment of the present invention, may be realized on a computer or on network computer, or the like in any configuration known and accepted in the art. Optionally, test platform 110 maybe linked to one or more other computers using a network connection for example including but not limited to the internet or intranet. Optionally, test platform 110 may be realized over a network connection and linked to a proprietary social network asis known and accepted in the art. Optionally, a proprietary social network may provide a user with the option of sharing, obtaining, or otherwise interacting to exchange test sequences, ideas, upload, download, create new test sequences according to thepresent invention FIG. 2 depicts an optional method for abstracting a modular building block according to the present invention. In stage 302 a building block category or type is chosen. Optionally, the building block category is chosen from a group of optionalcategories for example including but not limited to T&M;, logical or analytical, third party API, software, scripts or the like. In stage 304 the test type category specific interface is accessed. Most preferably in stage 306 a user utilizes theinterface to create the testing procedure required according to the feature being tested. Optionally, once all configuration settings have been defined for the block behavior according to the test requirements, testing requirements are defined in stage306 preferably comprising defining the tool type, family, engine, properties, attributes as will be further depicted in FIGS. 6 and 7. The building block is preferably saved to a building block library, in stage 308 and is made available for future use. Optionally, the building blocks are made available to a plurality of users over a network connection. For example, if a T&M; block is being created to measure a UUT's power source voltage during a particular activity. A T&M; building block is created by choosing T&M; block, stage 302, preferably accessing the T&M; interface in stage 304 anddefining the voltage requirements, stage 306, as depicted by the device manufacturing specification. Preferably during stage 304 a voltmeter user interface (GUI) is presented to a user allowing the user to set and define the testing parameters, stage306. Optionally and preferably, frequently used and common testing parameters may be provided to a user in a predefined building block. Optionally, a user may customize previously abstracted building blocks to current device requirements. Optionally, once abstracted a test sequence may be shared among a plurality of users over a network connection. Optionally a user may link to different inputs and settings to sequence variables and/or parameters allowing dynamic changes to the variablesand parameters according to sequence logic and state. FIG. 3 depicts an optional method according to the present invention for abstracting a test sequence while utilizing predefined building blocks according to an optional method of the present invention as depicted in FIG. 2. In stage 312 thebeginning of a test sequence is defined by placing predefined logical start building block, indicating the starting point of the test sequence. In stage 314, the test sequence is built by stacking a plurality of modular building blocks within theplatform according to a preferred embodiment of the present invention. Optionally, the test sequences comprises a plurality of building blocks comprising a variety of group building blocks that are stacked in a particular order to create the testsequence according to the manufacturing requirements of the present invention. Optionally, once the test sequence has fully been abstracted in stage 314, an end building block is deployed on the platform according to the present invention in stage 316. In stage 318 the test sequence is preferably saved. FIGS. 4A-B show an optional graphical user interface (GUI) of system and method of the present invention for a test and measurements engineering platform utilizing modular building blocks to abstract the test sequences. FIG. 4A depict the userinterface 400 comprising a test sequencing platform 402, building block resource menu 410, test control panel 406, resource control panel 408, testing protocol 420 and test execution monitor menu 440. Optionally user interface 400 provides a user with the ability to create at least one or more test sequence 420 according to the method and system of the present invention as describe in greater details in FIG. 3B. Test sequence 420 ispreferably created on sequencing platform 402. Sequencing platform 402 optionally and preferably comprises a matrix like structure most preferably formed from a plurality of individual cells 404. Optionally and preferably, sequencing platform 402comprises a matrix of 100 by 100 of cells 404. Optionally, the matrix size of sequencing platform 402 is controllable according to user defined parameters. Most preferably, cells 404 provide the location wherein elemental modular building blocksaccording to the present invention may be placed. Preferably, sequencing platform 402 is able to accommodate at least one and more, and preferably a plurality of, test sequences 420. Optionally, the view of sequencing platform 402 is controllable;preferably providing a user controlled view, for example including but not limited to scrolling up and down, a close up or zoom in view a particular section of the sequencing platform 402 or a global or zoom out view of sequencing platform 402. Optionally, sequencing platform 402 may provide a user with a simultaneous view of a plurality of test sequences, for example including a picture in picture view. Optionally, a small view is provided for the overall depiction of the full test sequencewhile a greater view is provided for a particular test sequence within the overall test sequence. Optionally, the view may be toggled between the large and small views. Optionally, the view of sequencing platform 402 is user controlled with respect tothe zoom, wherein preferably the higher the zoom the more information is made visible to a user. Test sequence 420 is preferably created using the system and method of the present invention, as described earlier in FIGS. 2 and 3. As depicted in stage 312 most preferably a test sequence 420 is initiated with a start building block 422 andend with a terminating building block 424 as described in stage 316 of FIG. 3B. Optionally, between start block 422 and end block 424 a plurality of modular building blocks may be placed on sequencing platform 402 allowing the abstraction of a completetest sequence 420 preferably comprising a plurality of building blocks designed to test a UUT (not shown) by interact with a UUT as shown and described in FIG. 1. Most preferably, test sequence 420 is created by placing modular building blocks relative to one another within sequencing platform 402 preferably providing a top down information flow. Preferably, each new modular building block is placedrelative to its predecessor, above or below for successive blocks (in series), left or right for branched blocks (in parallel). Therein, the relative location of the building blocks preferably defines the flow order of information between the twoblocks. Preferably, the flow order between two building blocks is defined by an exit point of the superior block (not shown, please see FIGS. 5A-B), preferably providing a directional flow between modular blocks. Optionally and preferably, flow controlwithin a test sequence 420 may be provided by utilizing at least one or more flow controlling building blocks chosen from resource menu 410. Preferably, test flow control may be provided with at least one or more building blocks, for example includingbut not limited to parallel, case, event and wait for event case or the like building blocks. Optionally and preferably, flow control building blocks are logical building blocks. Most preferably, test sequence 420 comprises a plurality of various modular building blocks, preferably chosen from block resource menu 410 and placed onto sequencing platform 402. Most preferably a first building block, for example modularbuilding block 411, is chosen from menu 410 and is dragged and dropped onto sequencing platform 402, therein placing a first modular brick on a corresponding platform cell 404. A second modular building block 411 is then preferably chosen from menu 410and dragged and dropped onto sequencing platform 402 preferably above or below the first building block therein creating a link between the first and second building blocks (described in more detail in FIG. 5A). Optionally, a building block's propertiesare fully controlled within sequencing platform 402; for example (and without limitation) a block may be defined, created, moved, deleted, resized, enabled, disabled, copied, cut, pasted, grouped, be defined according to the number of inputs or outputs,or the like controllable features, or a combination thereof. Optionally control of building blocks within sequencing platform 402 is controlled utilizing quick keys, shortcuts, hot keys, mouse buttons, easily accessible one click menus, for example byright clicking on a mouse to access a properties menu, or the like as is known and accepted in the art. Test control panel 406 preferably comprises a plurality of control tools for controlling sequencing platform 402 and test sequence 420 by optionally providing a tool bar comprising view controls, debug controls, and operation behavior or thelike. Test control panel 406 for example comprises view controls, debug controls, and operation behavior. For example, the tools available on test control panel 406 optionally include but are not limited to play, step by step, start from here, stop,stickiness, auto open, enhanced data, hardware release, and status clear or the like. Preferably test execution monitoring menu 440 provides a user with the ability to manage, monitoring, and tracking the execution status and results of the test sequence being executed. Optionally monitoring menu 440 comprises sub menus that maybe controllably placed in and about user interface 400. Optionally monitoring menu 440 comprises sub menus for example including but not limited to process explorer, variable explorer, resource explorer, tool library, error window, variable watcherswindow, UUT explorer, test explorer, process explorer, regression explorer test and measurements explorer or the like. FIG. 4B provides an additional depiction of the system and method of FIG. 4A according to a preferred embodiment of the present invention and utilizes the same labeling as in FIG. 4A for the same or similarly functioning part. Specifically,FIG. 4B depicts test sequence 420 comprising parallel programming building block 430 providing a plurality of parallel test sequences 432. Optionally, each individual parallel sequence 432 may be lead to further branching testing sequences createdwithin sequencing platform 402, for example by using conditional testing sequences as depicted in FIG. 4A. For example, as will be described in further details in FIG. 4D, conditional test block 426 may optionally be resized to provide an additional branches or output to undertake a conditional test sequence 428. Optionally, block resource menu 410 provides a user with quick access to a plurality of modular building blocks that are organized by block type grouping preferably within submenus. Optionally and preferably, 410 comprises a plurality ofsubmenus for example including but not limited to logical menu 412, software menu 415, test and measurements menu 418, at least one or more favorite menu 414, a tools menu 419, messaging menu 417, a communication menu 416, or the like. Optionally andpreferably each submenu is visually identifiable preferably using a color coding scheme, an icon or the like visual or audible cue. Optionally, a user may define a personalized menu similar to the favorites menu 414 to include at least one or morepreferably a plurality of individual modular building blocks. Most preferably, each submenu comprises at least one or more elemental modular building block 411 preferably corresponding to the type of test sequence performed. For example, acommunications testing building block is preferably found under communication submenu 416. Optionally, a modular building block may optionally be found in at least one or more location. For example, a messaging test block may be found both under atleast one or more favorites submenu 414 as well as its original messaging menu 416. Preferably, individual submenus comprise at least one or more modular building blocks 411 that are preferably readily recognizable based on the test or type of action it carries out, for example by including an icon, color code or the like foreasy identification. Preferably, building block's 411 properties are fully accessible and controllable within menu 410 or its respective submenu. For example, a building block 411 may be copied, defined, created, moved, deleted, resized, definecharacteristic the number of inputs or outputs or the like controllable features optionally utilizing a mouse click, touch screen click, or shortcut keys, or the like. Optionally control of building blocks 411 within platform 410 is controlled utilizingquick keys, shortcuts, hot keys, mouse buttons, touch screen clicks, easily accessible one click menus, for example by right clicking on a mouse to access a properties menu, or the like as is known and accepted in the art. Optionally, a modular buildingblock 411 chosen from menu 410 comprises initial definitions relating to building block 411. Optionally and preferably a modular building block 411 chosen from menu 410 comprises a complete building block, further comprising all of its definitions andfunctional requirements for testing sequence 420. Optionally and preferably, building block 411 is defined after being placed within a sequencing platform 402, activating a block configuration menu (not shown, see FIG. 6) providing a user with the optional control to define and configure thebuilding block. Optionally and preferably, once building block 411 properties are configured and defined within sequencing platform 402; block 411 may be saved by dragging and dropping it to the appropriate menu 410 or its submenus 412 to 419. Optionally and preferably, menu 410, and its submenus (412 to 419) comprises user defined properties that are preferably fully accessible and controllable. For example, the view of submenu 412 may be maximized and/or minimized, to show all orsome of the building blocks associated therein. Optionally, menu items may be copied, defined, created, moved, deleted, resized or the like controllable features optionally utilizing quick keys, shortcuts, hot keys, mouse buttons, easily accessible oneclick menus, for example right click on a mouse to access properties menu, or the like as is known and accepted in the art. Optionally, a plurality of menus 410 are preferably made available to a user through resource control panel 408. Resource control panel optionally, provide a user with access to other menus for example provided over a network connection. Optionally, control panel 408 provides a user access to further network based resources for example including but not limited to test sequences, menus, or building blocks that may be made available on a remote computer accessed over a network connection. FIG. 5A provides a close up view of optional modular elemental building blocks utilized in the test sequence 420 of FIGS. 4A-B. Elemental building block 502 may be sequenced to block 504 by stacking them placing them one on top of the otherwhile preferably aligning an exit point 500 that most preferably sequence block 502 to 504 providing a seamless data link between the test sequences comprised within block 502 and 504. Most preferably, blocks 502 and 504 are aligned automatically whenplaced within sequencing platform 402 within cells 404. FIG. 5B provides an additional close up view of an optional conditional modular elemental building block 506. Optionally, a building block such as 502 or 504 of FIG. 5A may be stretched to allow for the addition of further conditional testsequence branches such as test sequence 428 of FIG. 4A. Conditional building block 506 may optionally be stretched to span a plurality of platform cells 404 provide for a plurality of conditional points wherein additional test sequences may be added,such as that depicted in FIG. 4A through block 426 and test sequence 428. FIGS. 6 and 7 are further depictions of FIG. 2 wherein a modular building block according to the present invention is preferably defined and configured. FIG. 6A-C shows screen shots of successive screens of a user interface 600 providing a user with a tool to configure a modular building block according to the present invention. Optionally, a building block may be defined and configured whileon the sequencing platform 402 of FIGS. 4A and 4B. Optionally a user may control if user interface 600 is activated automatically at the time a building block is placed within the matrix sequencing platform 402. Optionally, user interface may beactivated and accessed manually by using a selection of iconic tools for example including but not limited to a double click, touch screen activation, mouse click, link, shortcut or the like tools of selection and user interface activation. FIG. 6Adepicts an optional user interface wherein the testing requirements for a Power supply are configured using configuration menu 602. Optionally and preferably, user interface 610 is used to configure the building blocks activity. For example interface610 provide a configuration interface comprising defining the type of test equipment to be used, define attributes for the relevant test equipment, depict a driver for the chosen test equipment, defined the equipment settings. Optionally, equipmentrequirements or the like reference material may be associated and linked to the building block. FIG. 6B depicts a further stage in using user interface 600 for configuring the power supply of FIG. 6A. Optionally and preferably interface 620 is provided to a user allowing a graphical platform to define the instrumentation settings requiredfor a given test sequence. FIG. 6C depicts a further stage in configuring and defining the modular building block according to the present invention. User interface 630 provides a user with a graphical tool able to defined and configure the testing equipment preferablycomprising an analysis menu 606. Preferably, analysis menu 606 provides a user with the ability to select data channels received from the equipment and/or software modules while defining further analysis to be performed on the data. Preferably,analysis menu 606, provides a user with the ability to control and manipulate the data in order to obtain the data required for the test procedure, preferably by defining transformation, functions or other manipulations specific to the block beingdefined. Optionally, data analysis may give rise to new data that may be utilized or otherwise manipulated in other building blocks or testing sequences, events or procedures. Preferably and optionally, data analysis performed within menu 606 providesfor defining at least one or more manipulations and/or transformations of data, leading to pass fail criteria. Optionally and preferably pass fail criteria are in accordance with product (UUT) specifications and or requirements. Optionally, a block maybe utilized to define a function or algorithms in keeping with the hardware and software requirements of the test sequence. For example, parameters defining the hardware and/or software requirements are controlled optionally defining, input and outputs,algorithms, sources, and transformations, or the like. FIG. 7A-C depicts further screen shots of the system and method according to the present invention. FIG. 7A provides a further depiction of the configuration stages described in FIG. 2. User interface 620 comprises a plurality of menus forexample including but not limited to logic name (702), attribute selection (704), family type (706), driver (708), instrumental setting (710) and data links (712), or the like. For example, attributes menu 704 define attributes of the testing equipmentfor example including but not limited to attribute names and corresponding values. For example, a driver for the specific equipment is defined through driver menu 708. FIG. 7B provides a closer depiction of attribute menu 704 wherein attributes arepreferably chosen form an attribute library 714 used to compile and define an attribute table 716. Optionally, attribute user interface 724 provides a user with the option of defining a common denominator and linking tool that may optionally andpreferably link and coordinate use and access to different equipment optionally at remote locations. Optionally, equipment connected remotely may be connected through a network connection for example including but not limited to an internet or intranetconnection according to network configuration as is known and accepted in the art. Optionally, defining a common denominator using interface 724 provides a user with the ability to utilize a plurality of testing equipment and or software modules available to different UUTs executing the same testing sequence. Optionally, auser defines at least one or more equipment attributes, parameters, capabilities, hardware interface, hardware connection, location, logic, testing requirements or the like that must be present to allow for the testing sequence to be executed with theequipment and UUT. Optionally and preferably the system and method of the present invention provides for the automatic identification of functionally equivalent or similarly defined test equipment relative to a UUT and the test sequence, therein savingavailable testing resources. FIG. 7C provide a closer depiction of instrumental setting menu 710 wherein a user preferably defined the instrument setting required for a building block, 411 within sequence 420 of FIG. 4A of 4B. Most preferably, general settings options 720for example comprising general data for example including but not limited to device address, model and connection interface is configured and set by a user. Preferably, instrumentation parameters table setting 722 are preferably compiled by a user. Optionally, parameter limitations for example may include but are not limited to allowable minimum and maximum values. Instrumentation functionality is controllably set with function menu 724, to defined functions, parameters related to the specificinstrumentation being defined for the specific building block. While the invention has been described with respect to a limited number of embodiments, it will be appreciated that many variations, modifications and other applications of the invention may be made."
25|http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=69&p=2&f=G&l=50&d=PTXT&S1=(python.CLTX.+or+python.DCTX.)&OS=ACLM/python&RS=ACLM/python|Methods and systems to avoid unproductive dispatches|Methods and systems are disclosed to dispatch service resources in a communication network. An example method disclosed herein receives a notice of error for a user service, identifies equipment associated with the user service, analyzes the equipment to generate a dispatch instruction, and automatically executes the dispatch instruction in response to the equipment analysis.|"1. A method to dispatch service resources comprising: receiving a notice of error for a user service; identifying, using a processor, a non-premises network element (NE)associated with the user service based on a user service identifier, the non-premises NE not being physically located within a customer premises; querying a network database to identify an equipment control command associated with the identifiednon-premises NE; sending the equipment control command to the identified non-premises NE and receiving a response therefrom; and automatically invoking a dispatch instruction based on the non-premises NE response, wherein the dispatch instructioncomprises a service type. 2. A method as defined in claim 1 wherein receiving a notice of error comprises receiving a telephone number associated with the user service. 3. A method as defined in claim 1 wherein identifying equipment associated with the user service comprises querying a database to correlate the user service identifier with the non-premises NE associated with the user service. 4. A method as defined in claim 3 wherein the user service identifier comprises at least one of a telephone number, an account number, or an address. 5. A method as defined in claim 1 wherein sending the equipment control commands comprises executing scripts to send equipment commands and receive equipment responses. 6. A method as defined in claim 5 further comprising querying a database for received non-premises NE responses and, if found, selecting a corresponding dispatch instruction. 7. A method as defined in claim 1 wherein automatically executing the dispatch instruction in response to the non-premises NE response comprises forwarding the dispatch instruction to a service fleet dispatch system. 8. A method as defined in claim 1 wherein the service type comprises an authorization level or a technician level. 9. A method as defined in claim 8 wherein the authorization level is at least one of zero authorization or full authorization. 10. A method as defined in claim 8 wherein the technician level is at least one of a standard technician, an advanced technician, or a network engineer. 11. A method as defined in claim 10 wherein the standard technician includes a zero authorization level. 12. A method as defined in claim 10 wherein the advanced technician includes a full authorization level. 13. A method as defined in claim 1 wherein automatically executing the dispatch instruction comprises dispatching resources based on at least one of a geographic proximity, the service type, or a third party contractor type. 14. A resource dispatch system comprising: a correlation engine to receive a service identifier of a network user experiencing a communication service error, and to query a network database to identify an equipment control command associatedwith a non-premises network element (NE) associated with the service identifier; and a dispatch engine to automatically analyze the non-premises NE via the equipment control command and determine a dispatch instruction, wherein the dispatch instructioncomprises a service type. 15. A resource dispatch system as defined in claim 14 wherein the service identifier comprises at least one of a telephone number, an account number, or an address. 16. A resource dispatch system as defined in claim 14 further comprising a dispatch instruction database to store a plurality of dispatch instructions. 17. A resource dispatch system as defined in claim 16 wherein the dispatch instruction database further comprises a plurality of script routines for the non-premises NE. 18. A resource dispatch system as defined in claim 14 further including at least one script program to analyze the non-premises NE. 19. A resource dispatch system as defined in claim 18 wherein the at least one script program comprises at least one of iHTML script, Cold Fusion, Python, or Perl. 20. A resource dispatch system as defined in claim 14 further comprising a user interface to receive the service identifier of the network user and initiate scripts to automatically analyze the non-premises NE. 21. A resource dispatch system as defined in claim 14 further comprising a service fleet dispatch system, wherein the dispatch engine is to automatically forward the dispatch instruction to the service fleet dispatch system in response todetermining the dispatch instruction. 22. A resource dispatch system as defined in claim 14 further including a plurality of network users. 23. A resource dispatch system as defined in claim 14 further including a plurality of network elements. 24. A resource dispatch system as defined in claim 14 wherein the service type is at least one of zero authorization level or full authorization level. 25. A resource dispatch system as defined in claim 14 wherein the service type is at least one of a standard technician, an advanced technician, or a network engineer. 26. An article of manufacture storing machine readable instructions that, when executed, cause a machine to: receive a service identifier associated with a communication service; identify a non-premises network element (NE) associated with theservice identifier; query a network database to identify an equipment control command associated with the identified non-premises NE; send the equipment control command to the identified non-premises NE and receive a response therefrom; and invoke adispatch instruction based on the non-premises NE response, wherein the dispatch instruction comprises a service type. 27. An article of manufacture as defined in claim 26 wherein the service identifier comprises at least one of a telephone number, an account number, or an address. 28. An article of manufacture as defined in claim 26 wherein the machine readable instructions, when executed, cause the machine to query the database to determine a non-premises NE associated with the communication service. 29. An article of manufacture as defined in claim 26 wherein the machine readable instructions comprise a script program to send commands and receive responses from the non-premises NE. 30. An article of manufacture as defined in claim 27 wherein the machine readable instructions, when executed, cause the machine to send at least one of ASCII format commands, SCPI commands, or TL1 commands. 31. An article of manufacture as defined in claim 26 wherein the service type comprises at least one of an authorization level or a technician level. 32. An article of manufacture as defined in claim 31 wherein the authorization level comprises at least one of no authorization or full authorization. 33. An article of manufacture as defined in claim 31 wherein the technician level comprises at least one of a standard technician, an advanced technician, or a network engineer. 34. An article of manufacture as defined in claim 26 wherein the machine readable instructions, when executed, cause the machine to dispatch resources based on at least one of a geographic proximity, a service type, an authorization level, or athird party contractor type. Description FIELD OF THE DISCLOSURE This disclosure relates generally to telecommunication networks and, more particularly, to methods and systems to avoid unproductive dispatches.BACKGROUND Communication networks for businesses or personal residences typically require a service infrastructure to maintain, update and repair the networks. A communication service provider generally employs a fleet of service personnel or repair crewshaving a wide variety of skills that address various facets of a large communication network. Communication networks may include telephony, cable television, satellite television, and internet services. Such skills may include low level customer homeinstallation and wire and/or cable troubleshooting tasks, mid level system related troubleshooting, and higher level network element troubleshooting and configuration. A typical network provides traditional telephony services, digital telephony services, high-speed data transmission, real-time video, high fidelity audio, cable/satellite television services, internet services, and various combinations of theseservices. In the event of network service interruptions or problems, the service provider typically dispatches one or more service personnel or repair crews to investigate and solve the problems. The repair crew typically has a vehicle with portabletest equipment and may visit all areas of the network, including central offices, local exchanges, entrance bridges, cables and equipment beneath streets, telephone poles, and end-user/customer businesses and homes. Although such repair crews having varying degrees of specialized training regularly dispatch to trouble areas, sending an over-qualified crew to address simple network issues results in significant money losses. Similarly, dispatching a repaircrew that is under-qualified for a particular issue or problem results in significant money losses when a second repair crew must be dispatched after the first crew determines that the issue is outside their capabilities. BRIEF DESCRIPTION OF THEDRAWINGS FIG. 1 is a schematic diagram illustrating an example dispatch system constructed in accordance with the teachings of the disclosure. FIG. 2 is a diagram illustrating an example communication network which may employ the example dispatch system of FIG. 1. FIG. 3 is an example view of a portion of a dispatch instruction database of the example dispatch system shown in FIG. 1. FIG. 4 is an example view of another portion of a dispatch instruction database of the example dispatch system shown in FIG. 1. FIGS. 5 and 6 are a flow chart representative of example machine readable instructions that may be executed to implement the example dispatch system shown in FIG. 1. FIG. 7 is a schematic illustration of an example computer which may execute the program of FIGS. 5 and 6 to implement the example dispatch system of FIG. 1.DETAILED DESCRIPTION Methods and systems to avoid unproductive dispatches are disclosed. An example method includes receiving a notice of error for a user service, identifying equipment associated with the user service, analyzing the equipment to generate adispatch instruction. The method may include automatically executing the dispatch instruction in response to the equipment analysis, wherein the dispatch instruction includes a service type. An example resource dispatch system includes a correlationengine to receive service identifiers of a network user experiencing a communication service error. The correlation engine may be configured to correlate a network element with the service identifiers. The example resource dispatch system may furtherinclude a dispatch engine to automatically analyze the network element and determine a dispatch instruction. The dispatch instruction may include a service type. An example dispatch system 100 is shown in FIG. 1. As mentioned above, repair crews are typically dispatched to various parts of a communication network 110 if a customer within that network 110 reports a service problem. The communicationnetwork 110 may convey traditional telephony communications, digital telephony communications, high-speed data transmission, video transmissions, audio transmissions, broadcast television, cable/satellite television, internet communications, or anycombination thereof. Both business and residential customers may utilize the services provided via the network 110. The network 110 also includes various transmission mediums to provide network services such as copper wire, optic fiber, and/or wirelessmediums. The network 110 also includes a wide variety of network elements (NE's) that assist in the provisioning of communication services. NE's are typically processor controlled hardware devices and provide switching and transport network functionssuch as advanced intelligent networks (AIN's), signal control points (SCP's), signal switching points (SSP's), databases, digital pair gain (DPG) devices, routers, etc. NE's are further addressable and manageable by technicians or network engineers viathe internet or via an intranet managed by the communication services provider. The NE's and various transmission mediums enable the various services offered by a communication company to reach customers. For example, each network for a particular service utilizes a system for controlling that network in a manner that istransparent to an end-user/customer. When the user picks up a telephone in a residence or business, a signal is sent to a central office (CO) switch or a local exchange to alert the CO switch or local exchange that a user wishes to make a call. Aresponse is sent back to the user in the form of a dial tone to indicate that the required network resources are available. One known control system for implementing such a telephone network is Signaling System Number 7 (SS7). SS7 includes a set ofprotocols, each of which serves a specific function in controlling a network. However, SS7 is not limited to use in telephone networks and typically provides useful services in other computer-based communication networks. The NE's that make-up particular communication networks provide various specialized services and also include communication ports for control or configuration purposes. For example, an NE may include a local area network (LAN) port, a GeneralPurpose Interface Bus (GPIB), an RS-232 port, and/or a wireless access node that is uniquely addressable. The unique address of each NE, such as an IP-address, is stored in a database along with customer identification numbers to identify which NE's areresponsible for providing services to particular customers. A service technician or network engineer accesses the NE via the communication port to determine whether it is operational, to receive error codes, and/or to verify configuration settings. Typically, the NE includes a library of communication commands for specific instrument control, such as commands formatted in the American Standard Code for Information Interchange (ASCII), Standard Commands for Programmable Instrumentation (SCPI), ortransaction language 1 (TL1). TL1 is a standard man-machine language adopted by many NE manufacturers and is extensible to accommodate unique vendor specific commands. An example sub-network of the communication network 110 is shown in FIG. 2 and includes a central office 205 and a local exchange 210. The central office 205 can include a telephone company building where subscribers' lines are coupled toswitching equipment to connect other subscribers to each other, locally and long distance. The central office 205 may also include one end of a switching station or public exchange. The local exchange 210 may be referred-to as an end office wheresubscribers' lines are terminated, typically to homes, offices, or apartments 215. Fiber optic cables, copper cables, wireless signals and/or satellite systems may provide one or more communication mediums 220 between the central office 205 and thelocal exchange 210. The example sub-network also includes an example NE called a digital pair gain (DPG) 225 located at the central office 205, and another DPG 230 at the local exchange 210. In general, a DPG may multiplex a relatively large number ofphone lines over a relatively lower number of communication mediums 220 to make more efficient use of an infrastructure. For example, a DPG may use one pair of wires to carry several simultaneous conversations. A DPG may also couple optical fiber linesto copper lines associated with various homes or businesses. Furthermore, a DPG may multiplex new digital subscriber line (DSL) services onto a subscriber's existing phone line. To determine which NE's assist a subscriber when using communication services, telephone numbers may be used as a customer identification number. When referenced against a database, the telephone numbers provide a network service technician ornetwork engineer with a list of NE's within the network that provide the subscriber with communication services. Referring to FIG. 1, the example dispatch system 100 may be available to a network engineer or customer service representative in a networkoperations center (NOC) or the central office 205, as shown in FIG. 2. The representative receives a customer identification number, such as a telephone number, and enters it to the dispatch system 100 via a user interface 120. The user interface 120provides the customer service representative with dispatch system input and output and output capabilities, including but not limited to, customer identification information, network status information, service dispatch information, and post networkanalysis recommendation information. The dispatch system 100 may be implemented using an executable program written in, for example, C, C++, C#, Basic, assembly, Cold Fusion, Python, Perl, or any combination thereof. Prior to allocating resources toany caller complaining of a service interruption or a communication problem, the service representative first references the caller against a customer database 130 to verify that the caller is a customer. For verified customers, the identification number (e.g., telephone number) is forwarded to a correlation engine 140 that queries a network database 150 to determine which NE's provide services to the customer associated with the identificationnumber. Examples of such databases include, but are not limited to, SWITCH/DLE, SORD and TIRKS. For example, a customer telephone number query to the network database 150 reveals a list of NE's (suspect NE's), geographic locations of the various NE's,and the IP addresses of the various NE's. The network engineer at the NOC, upon learning of the location of the NE's that are suspected to be causing the service interruption or problem, could immediately dispatch a service truck to investigate theproblem. However, rather than unnecessarily sending a repair crew or sending a crew lacking the skills to resolve the service problem to the location, a dispatch engine 160 first analyzes the NE's to gather additional information to implement a remotesolution if possible. In this example, the dispatch engine 160 uses the IP address of suspect NE's within the network 110 to query for status information. The query may be a manual or automated script telnet session that transfers TL1 commands to the suspect NE andreceives status information from the suspect NE. For example, an automated script may sequence through the list of suspect NE's for IP addresses, send each NE a TL1 command requesting network presence (e.g., ""Are you alive?""), and receive a response. Responses may include a timeout error, in which the suspect NE fails to return any information. Other responses may include a ""yes"" indicator to communicate that there are no known problems with the NE. Additionally, some responses may include specificerror codes that inform the dispatch engine, for example, that the NE is powered-up and running properly, but that a particular network card or slot is malfunctioning. NE's are manufactured by a variety of companies that typically conform to at least one industry standard communication protocol. However, each NE may not include the same library of commands to control the features of the NE. Additionally, thenetwork database 150 may include subroutines specific to each NE. As the high level script program sequences through each NE, a subroutine unique to each NE executes to perform troubleshooting and query operations. At the completion of each NEsubroutine, the high level script proceeds to the next NE, if any. For example, to simplify script programming of the user interface, a human-readable command of ""Determine_Device_Status"" indicates that each NE (of the several NE's related to theidentification number) should attempt to query the NE status register and return a result. This human-readable script command does not conform to any of the NE commands, but each NE includes a similar command to perform a query for a general statusindication. For example, one NE may require a generic status command of ""stat?"" to prompt a return of status information while another NE may require ""RtnDevStat"" as the input command to prompt a return of status information. Similarly, each NE may notinclude the same library of responses to query commands. To accommodate the disparity of NE commands and responses, a dispatch instruction database 155 stores a library of NE information to both send commands and interpret results. FIG. 3 is a partial view of the example dispatch instruction database 155 contents. A column of commands 305 (of which only two rows are illustrated) includes relatively non-cryptic and human-readable instructions to be used for the scriptingprogram. A ""Query_Power_Status"" command 310 and ""Query_Slot_Status"" 315 readily indicate that either a power or slot status query should result. Such human-readable commands allow a high level script programmer to easily assemble a series of commandsto execute desired NE functionality without requiring the programmer to know detailed low level intricacies of any particular NE. A column of commands specific to NE#1 (320) includes ""PwrStat"" 325 and ""CdSIStat"" 330, which correlate or correspond to theQuery_Power_Status 210 and Query_Slot_Status 315 script commands, respectively. Similarly, ""pwr?"" 335 and ""n/a"" 340 correlate or correspond to commands specific to NE #2 (345) for the respective script commands Query_Power_Status 310 andQuery_Slot_Status 315. As shown in the example of FIG. 3, while NE #1 (320) includes a specific command to determine the status of slots, NE #2 (345) does not include a similar command. Such a void (e.g., ""n/a"") typically indicates that the NE does notinclude that feature, i.e., NE #2 does not have any slots to query. Thus, a script command of Query_Slot_Status 315 directed to NE #2 results in a NOP (no operation) and the request is properly ignored. The example dispatch instruction database 155 also includes possible NE responses that, when received by the dispatch engine 160, provide recommendations (e.g., recommend actions), as shown in FIG. 4. A first column identifies a particular NE,a second column identifies various responses that the particular NE may return, and a third column identifies recommended actions based upon the response returned from the second column. In one example, NE #1 405 returns a message response ""OK"" 410,which corresponds to an ""n/a"" recommendation 415 in the third column. A recommended action of this type indicates no problem with NE #1 405 and, as will be discussed in further detail below, the dispatch engine 160 moves on to the next NE or command inthe troubleshooting process. In another example, a message response of ""CardSlotXmismtch"" 420 from NE #1 (405) corresponds to an ""Advanced Tech"" recommendation 425. A recommended action of this type indicates that an advanced technician, and not astandard technician, is authorized and needed to service the NE. Furthermore, because the response is specific to a particular card, the advanced technician has an opportunity to stock the service truck with replacement components compatible with NE #1prior to making the service call (i.e., physically traveling to the location of NE #1). As additional NE's are added to the communication network 110, a database administrator or script programmer may update the dispatch instruction database 155pursuant to NE commands/responses delineated in, for example, an NE operator manual. Depending on the results of TL1 commands sent to the NE's, the dispatch engine 160 returns a recommendation 170. For example, if the TL1 commands sent to all NE's return acknowledgements that everything is operational, then an alternate TL1script may be transmitted to each NE to gather configuration data. The configuration data returned by each NE is compared to expected configuration parameters stored in the dispatch instruction database 155. In the event that one or more of the suspectNE's contains an invalid configuration, the dispatch engine 160 returns a recommendation that a network engineer upload a new configuration profile to the NE. Alternatively, the dispatch engine 160 may determine a lack of parity of the NE configurationprofile and automatically upload the proper configuration profile from the network database 150. The dispatch engine recommendation 170 may also specify an authorization parameter. Authorization parameters may include full authorization to indicatethat a skilled technician or network engineer should be dispatched, or a low authorization to indicate that a standard technician should be dispatched. Another example of a dispatch engine recommendation 170 is to dispatch a standard repair crew (in lieu of an advanced repair crew) in the event that all suspect NE's are operational and the configuration profiles are current. Such a scenariomay occur when the service problem or interruption concerns a customer's in-home wiring. A standard repair crew may investigate various problems that span between the NE and the customer's home. Such problems typically include wiring problems onabove-ground telephone poles, below ground wires, wiring problems within a local exchange, and wiring problems within the customer's home. Additionally, a standard repair crew may have limited authorization to service certain types of NE's. Preventingthe servicing of equipment by a repair crew lacking proper training minimizes repair errors made by such standard repair crews. The limited authorization may allow the standard repair crew restricted access and/or interaction with the NE. For example,the standard repair crew may only be authorized to cycle power to the NE, or perform an NE replacement for a separate known-working NE of the same or similar type. The standard repair crew may have no access to some NE's, for example, the standardrepair crew may not possess keys to various equipment sheds in which the restricted NE's are located. On the other hand, properly identifying a service problem or interruption and then sending a standard repair crew (when appropriate) rather than arepair crew with more advanced training and authorization saves money and resources. The recommendations provided by the dispatch engine 160 may interface directly with an automated fleet service dispatch system 165. The automated fleet service dispatch system 165 may optimize service resource allocation based on, for example,service technician availability and/or geographic proximity to the problem area. The automated fleet service dispatch system 165 may also automatically interface with third party repair crews contracted by a network owner/manager to service thecommunication network. Alternatively, the recommendation may be reviewed manually by an operator at the NOC. The automated service dispatch system may also e-mail and/or page a network engineer if the recommendation requires such attention. Thenetwork engineer may have the highest (full) level of authorization to interact with the NE. Such full authorization may allow the network engineer both physical access to the NE and full communicative access to the NE (e.g., telnet, ftp, etc.). If thesuspect NE is powered-up, the network engineer may, for example, initiate a telnet session with the suspect NE to troubleshoot the suspect NE. A flowchart representative of example machine readable instructions for implementing the example dispatch system 100 of FIG. 1 is shown in FIGS. 5 and 6. In this example, the machine readable instructions comprise a program for execution by aprocessor such as the processor 710 shown in the example computer 700 discussed below in connection with FIG. 7, a controller, and/or any other suitable processing device. The program may be embodied in software stored on a tangible medium such as, forexample, a flash memory, a CD-ROM, a floppy disk, a hard drive, a digital versatile disk (DVD), or a memory associated with the processor 710, but persons of ordinary skill in the art will readily appreciate that the entire program and/or parts thereofcould alternatively be executed by a device other than the processor 710 and/or embodied in firmware or dedicated hardware in a well-known manner (e.g., it may be implemented by an application specific integrated circuit (ASIC), a programmable logicdevice (PLD), a field programmable logic device (FPLD), discrete logic, etc.). For example, any or all of the dispatch system 100, the user interface 120, the customer database 130, the correlation engine 140, the network database 150, the dispatchinstruction database 155, the dispatch engine 160, and the fleet service dispatch system 165 could be implemented by software, hardware, and/or firmware. Also, some or all of the machine readable instructions represented by the flowchart of FIGS. 5 and6 may be implemented manually, wholly or in part. Further, although the example program is described with reference to the flowchart illustrated in FIGS. 5 and 6, persons of ordinary skill in the art will readily appreciate that many other methods ofimplementing the example machine readable instructions may alternatively be used. For example, the order of the execution of the blocks may be changed, and/or some of the blocks described may be changed, substituted, eliminated, or combined. The example program of FIG. 5 begins at block 500 where the dispatch system 100 awaits notification of a network service problem or interruption such as a no-dial-tone (NDT) complaint entered into the user interface 120 by a customer servicerepresentative. If no problem notifications are received at block 500, the program loops at predetermined intervals until such a service notification is received. When a problem notification is received at block 500, the dispatch system 100 associatesor correlates a customer identifier, such as the customer/subscriber telephone number with information stored in a customer database 130 at block 505. Identifiers that fail to associate or correlate with a subscriber or customer are ignored and theprogram returns control to block 500 to await a notification of a network service problem or interruption. If the dispatch system 100 determines that the identifier is associated with or correlated to a subscriber/customer (block 505), then the dispatch system 100 forwards the identifier to the correlation engine 140 at block 510. The correlationengine 140 queries the network database 150 to generate a list of NE's that participate in providing the subscriber or customer associated with or correlated to the identifier with communication services. For example, the United States includesapproximately 196 local access transport areas (LATA) in which telecommunication companies offer local and/or long distance services. A LATA provides, among other things, a way to delineate an area within which telecommunication companies may offerservices. The network database 150 includes a list of subscribers' telephone numbers and may further identify the LATA to which a particular subscriber belongs. The resulting list of NE's includes, but is not limited to, the NE names, manufacturers,geographic locations of each NE, IP addresses and general NE descriptions. The program continues at block 600 of FIG. 6, at which the dispatch engine 160 receives the list of NE's and queries the dispatch instruction database 155 to determine compatible TL1 commands for each NE, as discussed above in connection withFIG. 3. If a first NE (of several in a communication network servicing the subscriber) is analyzed for potential problems, the first NE is provided a simple TL1 command at block 600 to determine whether it is active or operational (e.g., ""alive""). Ifno response from the first NE is received after a predetermined time-out period, control passes to block 610, at which it is recommended that a standard service technician be dispatched. Expiration of the predetermined time-out period typicallyindicates a routine or common system related problem involving a replacement of network equipment. For example, the time-out may be caused by a general power failure in a switching station, which requires general facility troubleshooting procedures. Inany case, the standard technician may be provided with a replacement NE before being dispatched to the problem area. Of course, persons of ordinary skill in the art will appreciate that time-out period expirations for other types of NE's may require anadvanced technician due to, for example, extraordinary and complicated configuration procedures. On the other hand, if the NE returns a response indicating it is ""alive"" (i.e., operational, active, etc.) for example, then control advances to block 615 where the dispatch engine 160 queries (via a TL1 command) the NE for additional statusinformation. The status information returned is evaluated at block 620 for a specific match with recommendation(s) present in the dispatch instruction database 155. As discussed above in connection with FIG. 4, if the NE response matches that of the NEResponse Code column, then the action corresponding to the Recommended Action column is taken at block 625. For example, if the NE returns the response ""OK"" 410, then the recommended action of ""n/a"" 415 indicates no problems with this particular NE andcontrol continues to block 630. If all NE's have been queried, control continues to block 635 to send a standard technician to address the service problem or interruption. Otherwise, if additional NE's have not yet been analyzed, control returns toblock 600 in view of the next NE in the list of NE's that provide the customer with communication services. Briefly returning to block 620, if the NE response is instead ""CardSlotXmismatch"" 420, then an advanced technician is recommended for dispatch atblock 625. If no specific recommendation is available in the dispatch instruction database 155, control at block 620 passes to block 640 at which additional TL1 commands are transmitted to the NE to verify that the specific function of the NE isoperational. For example, if the NE in question is a DPG, TL1 commands are issued to verify switch closure capabilities and switch configuration profile validity. If the TL1 commands fail to open/close switches as instructed, or the TL1 commands revealthat the configuration parameters of the DPG are invalid, control passes to block 655. At block 655, the dispatch engine 160 queries the dispatch instruction database 155 for appropriate configuration parameters and, when such parameters are available,control advances to block 660 to update the DPG with the appropriate configuration profile. The dispatch system 100 determines if additional NE's remain in the list of NE's possibly related to the service problem or interruption at block 665, in whichcase control returns to block 600, otherwise the analysis process ends. One of ordinary skill in the art will appreciate that even if the DPG, in this example, is responsible for the service problem or interruption, remaining NE's may also be checked tomake sure the service problem is not the result of more than one improperly functioning NE. If at block 655 the dispatch system 100 includes no configuration profiles for the DPG, the dispatch engine 160 recommends that an advanced technician be sent atblock 670. Returning to block 640, if the TL1 commands verify proper operation of the NE, then control passes to block 645 at which the dispatch system 100 determines if additional NE's remain in the list of NE's possibly related to the service problem orinterruption. If more NE's are in the list, control passes to block 600, otherwise control directs to block 650, in which the dispatch engine recommends that a standard technician be dispatched to the problem area. Regardless of the authorization level or skill level of the recommended technician or network engineer, the automated fleet service dispatch system 165 may accommodate dispatching of the resource to service the NE. For example, if a minimallyauthorized and/or standard technician is recommended by the dispatch engine 160, the automated fleet service dispatch system 165 may determine which technician to dispatch based on geographic proximity. Other parameters to determine which technician todispatch include, but are not limited to, a third party contractor in the vicinity of the suspect NE, real-time technician availability information, and technician skill levels and/or authorization levels. FIG. 7 is a block diagram of an example computer 700 capable of implementing the apparatus and methods disclosed herein. The computer 700 can be, for example, a server, a personal computer, an intelligent peripheral/service node (IP/SN), aservice control point (SCP), a signal transfer point (STP), or any other type of computing device. The system 700 of the instant example includes a processor 710 such as a general purpose programmable processor. The processor 710 includes a local memory 711, and executes coded instructions 713 present in the local memory 711 and/or inanother memory device. The processor 710 may execute, among other things, the example machine readable instructions illustrated in FIGS. 5 and 6. The processor 710 may be any type of processing unit, such as a microprocessor from the Intel.RTM. Centrino.RTM. family of microprocessors, the Intel.RTM. Pentium.RTM. family of microprocessors, the Intel.RTM. Itanium.RTM. family of microprocessors, and/or the Intel XScale.RTM. family of processors. Of course, other processors from otherfamilies are also appropriate. The processor 710 is in communication with a main memory including a volatile memory 712 and a non-volatile memory 714 via a bus 716. The volatile memory 712 may be implemented by Synchronous Dynamic Random Access Memory (SDRAM), Dynamic RandomAccess Memory (DRAM), RAMBUS Dynamic Random Access Memory (RDRAM) and/or any other type of random access memory device. The non-volatile memory 714 may be implemented by flash memory and/or any other desired type of memory device. Access to the mainmemory 712, 714 is typically controlled by a memory controller (not shown) in a conventional manner. The computer 700 also includes a conventional interface circuit 718. The interface circuit 718 may be implemented by any type of well known interface standard, such as an Ethernet interface, a universal serial bus (USB), and/or a thirdgeneration input/output (3GIO) interface. One or more input devices 720 are connected to the interface circuit 718. The input device(s) 720 permit a user to enter data and commands into the processor 710. The input device(s) can be implemented by, for example, a keyboard, a mouse, atouchscreen, a track-pad, a trackball, isopoint and/or a voice recognition system. One or more output devices 722 are also connected to the interface circuit 718. The output devices 722 can be implemented, for example, by display devices (e.g., a liquid crystal display, a cathode ray tube display (CRT), a printer and/orspeakers). The interface circuit 718, thus, typically includes a graphics driver card. The interface circuit 718 also includes a communication device such as a modem or network interface card to facilitate exchange of data with external computers via a network (e.g., an Ethernet connection, a digital subscriber line (DSL), atelephone line, coaxial cable, a cellular telephone system, etc.). The computer 700 also includes one or more mass storage devices 726 for storing software and data. Examples of such mass storage devices 726 include floppy disk drives, hard drive disks, compact disk drives and digital versatile disk (DVD)drives. The mass storage device 726 may, for example, implement the customer database 130, network database 150, and the dispatch instruction database 155. Although certain example methods, apparatus, and articles of manufacture have been described herein, the scope of coverage of this patent is not limited thereto. On the contrary, this patent covers all methods, apparatus and articles ofmanufacture fairly falling within the scope of the appended claims either literally or under the doctrine of equivalents."
26|http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=52&p=2&f=G&l=50&d=PTXT&S1=(python.CLTX.+or+python.DCTX.)&OS=ACLM/python&RS=ACLM/python|Composition studio to develop and maintain surveillance and compliance scenarios|A system for generating a plurality of surveillance and compliance scenarios includes a first user interface comprising a graphical modeling tool for writing fraud detection logic in a first language and a second user interface for creating one or more configurable threshold parameters, one or more general parameters, as well as one or more configurable subsets of filters to be applied to the detection logic. The system is configured to interpret the fraud detection logic in the first language and translate the fraud detection logic into a second language that is capable of performing the fraud detection on a subset of transactions data after application of the one or more configurable subsets of filters to the detection logic, as well as limiting a number of alerts that can be generated after application of the threshold and general parameters.|
27|http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=68&p=2&f=G&l=50&d=PTXT&S1=(python.CLTX.+or+python.DCTX.)&OS=ACLM/python&RS=ACLM/python|Integrating map-reduce into a distributed relational database|A computer readable storage medium includes executable instructions to define a map-reduce document that coordinates processing of data in a distributed database. The map-reduce document complies with a map-reduce specification that integrates map-reduce functions with queries in a query language. The operations specified by the map-reduce document are executed in the distributed database.|
28|http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=56&p=2&f=G&l=50&d=PTXT&S1=(python.CLTX.+or+python.DCTX.)&OS=ACLM/python&RS=ACLM/python|Method and system for remote device access in virtual environment|A method, system and computer program product for accessing remote devices is provided. The proposed method allows users to remotely access devices or tools controlled by a Virtual Environment (VE) implemented on a remote server. A user of a client machine or a mobile communications device can access a remote device controlled by a server or by local client of the server. The server can have a number of VEs implemented on it. Each of the VE can run a Guest OS that has guest device drivers installed on it. The VE receives the user request and passes on user commands to a device controlled by the guest device driver installed on the Guest OS of the VE.|"1. A method for remote device access, the method comprising: (a) establishing a mobile communication network connection between a mobile communications device and a server; (b) starting at least one Virtual Execution Environment (VEE) on the server, the VEE being controlled by a top level operating system; (c) installing at least one mobile communications device driver on the VEE for interfacing, over the networkconnection, and using a remote function call, to the mobile communications device through the mobile communications network; (d) activating a dispatcher module on the server, the dispatcher module being configured to receive remote access requests froma client machine and dispatches these requests to the VEEs and vice versa; (e) sending a command from the mobile communications device to the dispatcher module; (f) processing the command at the dispatcher module and passing it to a guest device driverof the VEE; and (g) receiving the command at the guest device driver and accessing the client machine over a remote function call protocol; wherein the interface from the mobile communication device to the dispatcher module is a managed languageApplication Programming Interface (API). 2. The method of claim 1, where a remote peripheral device of the client machine being accessed using the command is any of: a CD ROM; an external hard drive; a sound card; a video card; a USB flash drive; a memory card; a touchscreen; akeyboard; a virtual keyboard; and a USB smart card. 3. The method of claim 1, wherein a plurality of remote peripheral devices is connected to the server. 4. The method of claim 1, wherein a third-party guest tool is installed on the VEE. 5. The method of claim 4, wherein the dispatcher passes the control command to the third party guest tool. 6. The method of claim 1, wherein a plurality of the remote clients and a plurality of the local clients are connected to the server, and wherein the remote clients access the devices connected to the local clients. 7. The method of claim 6, wherein the clients are connected to the server via a protected intelligent channel. 8. The method of claim 1, wherein the VE is a Virtual Machine. 9. The method of claim 1, wherein the VE is a Parallels Container that virtualizes the top level operating system of the server. 10. The method of claim 1, wherein a user application of the mobile communications device is running in the VE on the server and a hardware interface of the mobile communications device is used to generate commands for the user application. 11. The method of claim 1, wherein a user application of the mobile communications device is running in a sandbox on the server and a hardware interface of the mobile communications device is used to generate commands for the user application. 12. The method of claim 1, wherein the control commands are sent from any of: a GUI interface; a SOAP interface; and a Python interface. 13. A system for remote device access, the system comprising: a processor; a memory coupled to the processor; and a computer code loaded into the memory and executed on the processor for implementing the steps of claim 1. 14. A system for remote device access, the system comprising: at least one mobile communications device connected to a server computer over a cellular network; at least one Virtual Machine (VM) activated on the server; a GOS running in theVM; at least one guest device driver installed on the GOS for interfacing, over the network connection, and using a managed language remote function interface protocol, to a peripheral remote device that is physically connected to the mobilecommunications device; the peripheral remote device connected to the server over the network; at least one dispatcher module implemented on the server, wherein the dispatcher module passes control commands sent from the mobile communications device onto the VM and manages a configuration of the VM; and wherein the control command is received at the guest device driver and the peripheral remote device is accessed over the remote function call protocol, wherein the control command is sent and receivedjointly with local data flow. 15. The system of claim 14, wherein the remote peripheral device is any of: a memory card; a touchscreen; a keyboard; a virtual keyboard; and a USB smart card. Description BACKGROUND OF THEINVENTION 1. Field of the Invention The present invention relates generally to Virtual Machine (VM) technology and, more particularly, to a method and system for accessing remote devices using a VM. 2. Background Art In the past decade, capabilities of computer systems have increased significantly. Computer systems process large volumes of data, which is changed or updated constantly. Even well-known and widely distributed applications are upgraded veryoften, so consumers have to download new software remotely. One conventional approach that allows users to have access to files and applications residing on a remote system is so-called ""dumb terminal"" that is connected to a large central computer or a computer cluster. The applications are onlyinstalled on the central computer, and users run the applications remotely. The user can control the application through a GUI of the local display, while no application executable code is loaded onto the user's computer. The ""dumb terminal"" approachhas two major shortcomings. One is security, since the user has to pass data to the central computer system. Another one is that a user is limited to applications installed on the central computer system. Another way for a user to remotely access software and data is to download the entire desired application from a provider, which generally involves loading files from a physical storage medium such as a CD ROM. This approach is inconvenient forusers who only need to use a particular feature of the application, or only need it for a short time. Another disadvantage of this approach is that the downloaded applications occupy large amounts of memory available on the user's system. Downloadingof applications also presents a problem of unauthorized copying. The problem of accessing and running, by a user, a potentially arbitrarily large number of applications (i.e., executable files) remotely is addressed in the U.S. Pat. No. 6,735,601. The system disclosed in this patent allows a user to retainlocal control of the execution of the applications installed or stored remotely. The proposed system is intended for situations when a user chooses not to load the application onto his computer. No scaling down or other modifications of the softwareapplications are required. The proposed system, however, does not allow users to access devices controlled by the remote server or by a local client of the remote server. The industry trend of virtualization and isolation of computer system resources makes the task of remote access, and in particularly remote device access, more complex. A Virtual Machine (VM) is a type of an isolated Virtual ExecutionEnvironment that runs on the same physical machine simultaneously. Each VM instance executes its own OS kernel. Support of Virtual Machines is implemented using a Virtual Machine Monitor and/or a Hypervisor. Virtualization allows running a number of VMs on the same physical machine or server. Each VM can have a Guest Operating System (GOS) implemented on it. A GOS can support a number of Guest tools and devices. A remote access to these tools anddevices by a user of a remote computer system is critical. None of the conventional remote access systems provide an efficient mechanism for remote access to devices in a Virtual Execution Environment. Accordingly, there is a need for a system and a method for accessing remote devices using a Virtual Execution Environment.SUMMARY OF THE INVENTION The present invention is directed to method, system and computer program product for accessing remote devices. The proposed method allows users to remotely access devices or tools controlled by a Virtual Execution Environment (VEE), such as aVM, implemented on a remote server. The process executed on remote server may be based on Parallels.TM. virtualization techniques, e.g. on Parallels Desktop, Parallels Workstation, Parallels Server and Parallels Virtuozzo Containers, although theinvention is not limited to any particular virtualization technology. These are examples of virtualized servers used for implementing the proposed method. According to the proposed method, a user of a client machine (i.e., a desktop or a laptop) can access a remote device controlled by a server or a local client of the server. The server can have a number of Virtual Machines (VMs) implemented onit. Each of the VMs can run a Guest OS that has Guest device drivers installed on it. In one embodiment, a special Dispatcher module called Parallels Server runs on the physical server. The Parallels Server receives remote access requests from a userof a client machine and dispatches these requests to the VMs that run on the physical server. The VM receives the user request and passes on user commands to a device controlled by the guest device driver. In an exemplary embodiment, a user canremotely access some third party Guest Tools controlled by a Guest API Library of a GOS. Therefore, a user of a client machine can, advantageously, access and control devices that are not physically connected to the client machine. A number of remote users can benefit from using the same device without having to install drivers forthese devices on the client machines. Additional features and advantages of the invention will be set forth in the description that follows, and in part will be apparent from the description, or may be learned by practice of the invention. The advantages of the invention will berealized and attained by the structure particularly pointed out in the written description and claims hereof as well as the appended drawings. It is to be understood that both the foregoing general description and the following detailed description are exemplary and explanatory and are intended to provide further explanation of the invention as claimed. BRIEF DESCRIPTION OF THEATTACHED FIGURES The accompanying drawings, which are included to provide a further understanding of the invention and are incorporated in and constitute a part of this specification, illustrate embodiments of the invention and together with the descriptionserve to explain the principles of the invention. In the drawings: FIG. 1 illustrates a system architecture, in accordance with an exemplary embodiment; FIG. 2 illustrates a structure of communication protocols, in accordance with the exemplary embodiment; FIG. 3 illustrates an example of remote access system, in accordance with the exemplary embodiment; FIG. 4 illustrates an exemplary computer system on which the client and the server, according to exemplary embodiment, can be implemented; and FIG. 5 illustrates an example of remote access system utilizing mobile devices, in accordance with the exemplary embodiment. FIG. 6 illustrates data flow as implemented in one embodiment of the invention.DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS Reference will now be made in detail to the embodiments of the present invention, examples of which are illustrated in the accompanying drawings. The present invention is directed to a method, system and computer program product for accessing remote devices using Virtual Environment. The proposed method allows users to remotely access devices or tools controlled by a VM implemented on aremote server. A VM is implemented on a server connected to a number of client computers. The client computers have external devices such as CD ROMs, DVD players, high definition video cards, USB flash cards, USB smart cards, sound/video cards, external harddrives, DMA (direct memory access) devices, VT-C, VT-d and VT-x processors, etc. Note that most servers do not have sound capability (since there is no point in having sound on a server), but a VM launched on the server can access a sound card on a localmachine, as well as other peripherals on the same or different machine. A special secure communication channel (e.g., IP SEC protocol) is established between the VM and the client computers. The VM accesses the remote devices attached to the remoteclients. Note that each client can have a combination of the above listed devices attached to it. According to an exemplary embodiment, the server-based VM can access any number of the remote devices of a single remote client or of a plurality ofclients. In effect, it is possible to assemble a virtual (distributed) computer with peripherals that are physically located on several different computers, and which are controlled through VM technology running on a server from a client-side throughserver-based secure communications protocol. Other devices can include video changers, video-on-demand players, CPUs, math coprocessors, vector processors, disk drives, etc. Data exchange between the VM and the client devices can be optimized. For example some data can be compressed or pre-processed on the client site. Also, the device-related commands that are not needed by the VM are not sent over thecommunication channel. Thus, an intelligent secure communication channel is established between the VM and the remote client devices (optionally using encryption to connect some or all of the hardware to the VM). According to the proposed system and method, a client-server infrastructure is provided. A user of a client machine (i.e., a desktop or a laptop) can access remote devices connected to a server or to local clients of the server. The server canhave one or multiple Virtual Machines (VMs) running on it. Each of the VMs can run a Guest OS that has guest device drivers installed on it. In one embodiment, a special application called Parallels Server, available from Parallels SoftwareInternational, Inc., runs on the physical server. The Parallels Server receives internal (i.e., private) access requests from a user of a client machine and dispatches these requests to the VMs that run on the physical server. The VM receives the user request and passes on user commands to adevice controlled by the guest device driver installed on the GOS of this VM. In one embodiment, a user can remotely access some third party guest tools controlled by a Guest API Library of a GOS. According to the preferred embodiment, a user of a client machine can remotely (i.e., via a VM) access and control devices that are not physically connected to the client machine. A number of remote users can benefit from using the same device. Note that no device drivers need to be installed on the clients. Furthermore, each driver has to be installed only once on one of the VM's GOS. The architecture of an exemplary client-server system is illustrated in FIG. 1. A client machine has a proprietary Parallels GUI console implemented on it. The GUI console provides the user with a capability of access to remote devices andtools. A user can control remote devices by sending the commands to these devices using the GUI console. The client machine provides Component Object Model (COM) API binding. It also manages a CLR (Common Language Runtime) binding (see http://en.wikipedia.org/wiki/Common_Language_Runtime), exposing interfaces to a scripting interfaces. A web-based console of the client machine provides Simple Object Access Protocol(SOAP) API binding. Note that SOAP API binding is implemented using XML and is OS-independent. The client machine also includes a physical/virtual device binding. All of the binding implemented on the client machine use a client ""C"" Host API Library. According to the preferred embodiment, all client machines are based on a Host API ""C"" Library interface. The Host API ""C"" Library interface is a lowestlevel cross-platform interface, which allows the client machine(s) to interact with the VMs running on the physical server. As one embodiment, the Host API ""C"" Library interface is described, although other interfaces and programming languages supportedby calling API functions may be used here (e.g., C++, Visual Basic, Pascal, assembly language, C#, etc.). The Host API ""C"" Library cross-platform interface can interact with the VMs on the server in two different ways. In one embodiment, the Host API ""C"" Library cross-platform interface uses third-party host tools implemented on the client machine. Communication with the server's VMs is provided over one or several virtual networks. One of these virtual networks can utilize the Internet. In this embodiment the VM's are accessed directly using Host/Guest PIPE API (seehttp://msdn2.microsoft.com/en-us/library/aa365137(VS.85).aspx). In one embodiment, this network API can be implemented as a duplex pipe for corresponding data transmission between the physical machine and the client machine. In the case of Named Pipe, any process of the physical machine or the clientmachine can read data from a pipe and write data to the pipe. However, the pipe may be opened only either for reading or for writing. Therefore, the process that initiated the pipe chooses either a read mode or a write mode, and the pipe will remainopen in this mode until it is closed. Each of the VMs has a GOS installed on it. Note that, although in this example only two VMs are shown, an arbitrary number of the VMs can be implemented on the physical server. Both of the VMs are configured according to their ownconfiguration parameters. In one embodiment, there is a Guest API ""C"" Library (i.e., guest client API Library) implemented on the GOS of VM 1. The Guest API ""C"" Library interface controls third-party guest tools. Thus, the user of the client machinecan pass commands for controlling the third-party guest tools through the Host API ""C"" interface via the Guest API ""C"" interface implemented on the GOS of the VM. In another embodiment, VM N has a guest device driver installed on the GOS of the VM N. Note that multiple guest device drivers can be installed on the GOS of the VM N. These guest device drivers can also be controlled by the user of the clientmachine remotely with the Host API ""C"" interface that sends the commands to the guest device drivers through the Virtual Networks using Host/Guest PIPEs API. Thus, the user of the client machine can access and control remote devices using the devicedrivers of the respective VMs running on the server. In another embodiment, the Host API ""C"" Library interface of the client machine communicates with the Parallels Server installed on the same physical server where the VMs are implemented. The Parallels Server is configured in such a way that itcan process and dispatch the private requests received from the Host API ""C"" interface of the client machine to the VMs. The remote procedure call, or more generally, a remote function call, can utilize a host interface associated with managed languages, such as C, C++, C-Sharp, Java, other languages in the C-Sharp model, etc. Typically, software written in amanaged language is compiled into byte code, and the byte code is then compiled into the object code. Such languages frequently have interfaces or APIs that permit other software, written in other languages, to use the APIs. The interface can be usedwith scripts, command lines, etc. The configuration of the virtual machine, or virtual server, or virtual environment (VE), such as a Parallels Virtuozzo Container or Sun Container, can include both dynamic and static parameters. Static parameters can include such things as thenumber of CPUs, devices, total amount of memory, etc. Dynamic parameters can include the priority of the virtual machine, CPU or resources allocated to that virtual machine, etc. A configuration of the virtual machine can also include the operatingsystem, virtual version of the operating system, a link to the location where the distributive of the virtual machine is stored, etc. In particular case, the VM or group of containers or VEs may be implemented as an environment for mobile applicationexecution (e.g., Java midlets, Android application or the like). Specific settings, e.g., drivers settings may correspond to the type of the mobile device. As an example, sandboxes may contain driver specific for the mobile device. Additionally, the RPC framework discussed above can be viewed in broader terms, and not just in the context of Microsoft RPC framework (for example, such as used in the COM/DCOM framework) or by Sun Microsystems. As yet another option, the virtual machine that runs on a server can interface to a mobile device, such as a smartphone or a tablet (iPod, Xoom, PlayBook, and similar types of devices). In this case, the peripheral devices may be attached tothe Smartphone or tablet, or the peripheral device at issue may be part of the Smartphone or tablet itself--such as a touch screen, keyboard/virtual keyboard, memory, and so on. This is illustrated in FIG. 5. Note that two virtual machines (or, moregenerally, VEs) illustrate that multiple such VEs can run on the server, with similar VMs or containers corresponding to the similar corporate phones. FIG. 6 illustrates how user of the mobile device uses the keyboard or touch screen, if any, or other input mechanism of the mobile device, to form a command for a client application. The command is transmitted over the mobile device-specificnetwork to a corresponding network interface of the server and then, over the device driver, is translated to the client application executed inside VM1 of FIG. 5 as if it were the mobile device itself. If the application requests data from the widearea network, it may receive data through server machine network interface (a LAN card or a wireless network or the like). Results of the client application execution are transmitted to the mobile device in reverse order, e.g., to a video output elementof the mobile device, and are presented to the user in the form of static or dynamic picture, sound, vibration alarm or the like. Video interface and display are shown in FIG. 6. As yet another option, such a mobile device can be used to access data ina secure manner. The data would be stored on the virtual machine, which is located on the server. The user has access to the data through his smartphone/tablet, however, if the Smartphone were stolen or lost, all that needs to be done is to disconnectthat device from the virtual machine. Since no data is actually stored on the smartphone itself (unlike many conventional schemes, where data is actually stored on the smartphone, such as the Blackberry, using encryption), here, the data would not becompromised, since the only thing that the smartphone provides is the physical interface to access the data. From the virtual machine's perspective, the smartphone itself is no different than any other device, or the user interface (touch screen, etc.)is viewed as just another peripheral device. As an example, starting of the client's application (client machine) is performed by actions of the client on the mobile device, e.g., by clicking on a link in the menu. Then, a request is sent to the remote client machine, specifically, butnot necessary installed on the same machine as a sandbox, the request is handled by the client machine (for example, using a Java midlet or the like), and the result is sent to the display or other output port of the mobile device. Installation of the application is performed in the same way. The user, e.g., in a browser (local or remote) chooses an application. Application pack (*.jar+*.jad or other package) is loaded and installed to the remote server. Preferably, themobile device should not use a WAN, since the remote server can connect to the mobile network and to the wide area network as well. Also, the package may be stored locally and may be transmitted during the installation process to the distant server. The private requests can come from an IPC (i.e., a desktop computer used as a client machine) or from an RPC (i.e., another server, connected to the client machine and using its Host API ""C"" interface). In both cases the Parallels Server passeson the commands to the VMs. Thus, the Parallels Server is executed as a router that passes commands from the Host API ""C"" interface of the client machine to the VMs running on the server machine. More specifically, remote device data interchange may beprovided between either remote computing systems or between virtual machines running on the same hardware. In case of the VM 1, the Parallels Server sends the commands to the Guest API ""C"" Library implemented on GOS of the VM 1. The Guest API ""C"" Library interfaces with the third party Guest tools. In case of the VM N, the Parallels Server sendsthe commands to the guest device driver installed on the GOS of the VM N. In both cases, the user of the client machine gains remote access and controls devices and tools connected to the server via the VMs 1-N running on this server. As discusses above, the remote user controls the devices by passing the commands from a client machine to a server. A detailed structure of communication protocols used in the preferred embodiment is illustrated in FIG. 2. The essentialcommunication protocols illustrated in FIG. 2 are Command Flow, I/O Flow, Event Loop and Execution Engine. The commands are sent using the GUI at a remote desktop (i.e., client machine). The process prl_client_app.exe is executed on the client machine. The client machine is connected over the Internet to the Local Desktop that serves as aDispatcher. The command flow is provided over the XML-based protocol (i.e., SOAP) over TCP connection. These commands are used to perform basic VM control operations. Most of these commands are implemented within the Source/CommandFlow that goesthrough an external port. In one embodiment, the Remote IO Flow is a data-based protocol over a UDP connection. This flow is used to transfer raw VM data (i.e., video, sound, regular data, etc.). The Remote IO Flow also goes to the external port. The local desktop(i.e., dispatcher) executes its own process prl_disp_service.exe. Two scenarios of remote control of the devices by the client are possible. In one scenario, also illustrated in FIG. 1, the devices and tools are connected to the server where the VMs are implemented. In another scenario, illustrated in FIG.2, the local clients have devices connected to them. These local clients have guest device drivers installed on the GOSs of the VMs implemented on the server. The use of the remote client can control the devices connected to the local clients by sending the commands to the VM's implemented on the remote server. This novel approach allows the remote users to access any devices on the network providedthat the guest device drivers are installed on the GOS of the VMs. One of ordinary skill in the art will appreciate that, in the preferred embodiment, the remote access is implemented at the device level, and that a remote user controls tools and devices connected to the server while no device drivers need tobe installed on the client machine. In the first scenario, the Dispatcher passes the command flow directly to the VM on the server. Then VMController communicates with VM Monitor (VMM) and the commands are passed to the guest driver of the GOS. In the second scenario, the command flow is re-directed to another local client, where a local client GUI is implemented and a separate process prl_client_app.exe is executed. The Local IO Flow is directed to the VM. The Local IO Flow is FIFO(first-in, first-out) data transmission protocol that may be used to transfer Raw VM Data (i.e., video, sound, regular data, commands etc. generated on an external data bus of a hardware device). The Local IO Flow is then transmitted using the Named Pipe or similar inter-process communication technique (see http://en.wikipedia.org/wiki/Named_pipe). The dispatcher also directs the Command Flow and Local IO Flow from the local server tothe VM. Thus, the user of the remote client can send the commands all the way through to the devices connected to the local client. The VM Controller includes host-side devices, GUI Refresh Loop, IO Services for the VM and the Virtual Machineinterface. The Event Loop transfers the data between VM Monitor and VM events handler. The VM monitor (VMM) and Hypervisor can also include devices controlled on the monitor side, VTX/SVM supported features (AMD-V, seehttp://multicore.amd.com/us-en/AMD-Multi-Core/Quad-Core-Advantage/At-Work- -AMDOpteron/Virtualization.aspx, which is an AMD Virtualization.TM. technology that is a hardware-based technology that enables servers to reach higher levels of efficiency andutilization by assisting virtualization software to run multiple operating systems and applications on a single physical AMD Opteron.TM. processor-based server.). Also, INTEL VT-X technology, see http://www.intel.com/technology/platform-technology/virtualization for IA-32 processors provides hardware support that simplifies processor virtualization, enabling reductions in virtual machine monitor (VMM)software size and complexity. The Resulting VMMs can support a wider range of legacy and future operating systems (OSs) on the same physical platform while maintaining high performance. Other such features include exception handling module and codeanalysis module. The VMM handles exceptions and interrupts. It also prepares guest context and sends requests to the Host handlers in the VM. The VMM interfaces with a Guest OS by means of an Execution Engine. The VM controller can perform read/write operations with the shared buffers of a first type, such, as for example, VESA buffer. The VMM can perform read/write operations with the shared buffers of a second type, such as, for example, VGA Statebuffer, Sound buffer and Network buffer. The shared buffers of the first type are used to prevent copying of large data blocks between VMM/VMController and the clients. The shared buffers of the second type are used to prevent copying of large blocks of data between the VMM and VMController. The Dispatcher and the local clients can only read data from the shared buffers. Note that, in one embodiment, the roleof the Dispatcher can be performed by the Parallels Server. The communication protocols can be used with multiple remote clients as well as multiple local clients. FIG. 3 illustrates an exemplary remote access system. The system, according to the preferred embodiment, implements remote access to guest tools and guest devices. In the preferred embodiment, the remote access to guest tools and guest devicescan be accomplished by different entities. A remote user can use the client GUI for accessing the devices as shown in FIG. 1. A process prl_client_app.exe is executed using GUI interface. In another embodiment, a SOAP interface process prl_web_app.exe is executed and the remote devices can be controlled by a web service. In yet another embodiment, a Python interfaceprocess prl_python_app.exe is executed and the remote devices are controlled by a scripting layer. All of these interfaces can use interfaces provide by the lower level applications. All of the above mentioned interfaces communicate with the API (DLL) module implemented as an object oriented (OO) functional interface. The communication between the interfaces is accomplished using public (i.e., external) protocols. The API(DLL) functional interface includes management interface, tools interface and device interface. The API (DLL) library exposes interfaces that enable any of the users of the GUI, SOAP or Python interfaces to implement any kind of a third party tools theywant. Note that the API (DLL) library does not expose its interfaces to the users. In one embodiment, the API (DLL) library can provide all the functionality for sending commands directly to the VM using internal (i.e. private) protocol. In another embodiment, addition functionality is needed. This functionality is providedby the Parallels Server (i.e., Dispatcher). The prl_disp_service.exe is executed on a Dispatcher. Some information can be read from Hard Disk Drive (HDD) image and a process prl_image_explorer.exe is executed on the image explorer. These libraries expose all the functionality of aplatform provided by the preferred embodiment. All of the communication protocols between these libraries and the API (DLL) libraries are private (i.e., internal). Note that all of the interfaces and the VMs are implemented on the host OS (i.e., in aseparate address space). The API (DLL) interface communicates with the VM using internal message-driven protocol as well. The separate process prl_disp_service.exe is executed on the VM. The same internal message-driven protocol is used between the VM and the VMM. The VMM using a Hypervisor can pass control commands to either a guest driver or a guest tool. In case of accessing a guest tool, the Host API (DLL) functionality is provided via OO/Functional interface. The process third_party_tool.exe is executed by the guest tool module. In case of accessing the guest device driver, the PCI Tools Gate API (a communication protocol between host virtual machine and guest operating system sandbox based on thePCI bus reads and writes. The PCI Tools Gate API is described here by way of example only, and is not intended to limit the present invention.) is provided. Note that the PCI Tools Gate API is available on new platforms. The PCI Tools Gate APIincludes video card, shared folders, sliding mouse, custom resolution, time synchronization and coherence functionality. Those skilled in the art that the VM, in accordance with the exemplary embodiment, allows users to access any of the remote devices attached to remote computers. Data exchange between the users and remote devices is implemented over secureintelligent channel. As noted earlier, if the sender and receiver both know a priori that some commands normally used as part of the protocol of the channel are not needed, then those commands can be dropped on the sender side, or their order can berearranged, to optimize performance, or they can be grouped differently than the original grouping of commands. Also, if the memory or disk area being accessed is known to be about to be overwritten, there may be no point in transmitting the datainvolved (even though the hardware device itself may be unaware of this), or if there is no time to process the data (e.g., a video frame). With reference to FIG. 4, an exemplary system for implementing a client and a server according to the embodiments of the invention includes a general purpose computing device in the form of a computer or a server 20 or the like, including aprocessing unit 21, a system memory 22, and a system bus 23 that couples various system components including the system memory to the processing unit 21. The system bus 23 may be any of several types of bus structures including a memory bus or memorycontroller, a peripheral bus, and a local bus using any of a variety of bus architectures. The system memory includes read-only memory (ROM) 24 and random access memory (RAM) 25. A basic input/output system 26 (BIOS), containing the basic routines that help to transfer information between elements within the computer 20, such as during start-up, is stored in ROM 24. The computer/server 20 may further include a hard diskdrive 27 for reading from and writing to a hard disk, not shown, a magnetic disk drive 28 for reading from or writing to a removable magnetic disk 29, and an optical disk drive 30 for reading from or writing to a removable optical disk 31 such as aCD-ROM, DVD-ROM or other optical media. The hard disk drive 27, magnetic disk drive 28, and optical disk drive 30 are connected to the system bus 23 by a hard disk drive interface 32, a magnetic disk drive interface 33, and an optical drive interface 34, respectively. The drives andtheir associated computer-readable media provide non-volatile storage of computer readable instructions, data structures, program modules and other data for the computer/server 20. Although the exemplary environment described herein employs a hard disk, a removable magnetic disk 29 and a removable optical disk 31, it should be appreciated by those skilled in the art that other types of computer readable media that canstore data that is accessible by a computer, such as magnetic cassettes, flash memory cards, digital video disks, Bernoulli cartridges, random access memories (RAMs), read-only memories (ROMs) and the like may also be used in the exemplary operatingenvironment. A number of program modules may be stored on the hard disk, magnetic disk 29, optical disk 31, ROM 24 or RAM 25, including an operating system 35 (preferably Windows.TM. 2000). The computer 20 includes a file system 36 associated with orincluded within the operating system 35, such as the Windows NT.TM. File System (NTFS), one or more application programs 37, other program modules 38 and program data 39. A user may enter commands and information into the computer/server 20 through input devices such as a keyboard 40 and pointing device 42. Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner orthe like. These and other input devices are often connected to the processing unit 21 through a serial port interface 46 that is coupled to the system bus, but may be connected by other interfaces, such as a parallel port, game port or universal serialbus (USB). A monitor 47 or other type of display device is also connected to the system bus 23 via an interface, such as a video adapter 48. In addition to the monitor 47, personal computers typically include other peripheral output devices (notshown), such as speakers and printers. The computer 20 may operate in a networked environment using logical connections to one or more remote computers 49. The remote computer (or computers) 49 may be another personal computer, a server, a router, a network PC, a peer device orother common network node, and typically includes many or all of the elements described above relative to the computer/server 20, although only a memory storage device 50 has been illustrated. The logical connections include a local area network (LAN)51 and a wide area network (WAN) 52. Such networking environments are commonplace in offices, enterprise-wide computer networks, Intranets and the Internet. When used in a LAN networking environment, the computer/server 20 is connected to the local network 51 through a network interface or adapter 53. When used in a WAN networking environment, the computer/server 20 typically includes a modem 54 orother means for establishing communications over the wide area network 52, such as the Internet. The modem 54, which may be internal or external, is connected to the system bus 23 via the serial port interface 46. In a networked environment, programmodules depicted relative to the computer/server 20, or portions thereof, may be stored in the remote memory storage device. It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used. Having thus described the different embodiments of a system and method, it should be apparent to those skilled in the art that certain advantages of the described method and system have been achieved. In particular, it should be appreciated bythose skilled in the art that system and method described in the preferred embodiment, provide for remote access that is implemented at the device level over a Virtual Environment (such as a VM), and that a remote user controls tools and devicesconnected to the server (or the local clients of the server) and no devices drivers need to be installed on the client machine. It should also be appreciated that various modifications, adaptations, and alternative embodiments thereof may be made within the scope and spirit of the present invention. The invention is further defined by the following claims."
29|http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=59&p=2&f=G&l=50&d=PTXT&S1=(python.CLTX.+or+python.DCTX.)&OS=ACLM/python&RS=ACLM/python|Facilitating client server interaction|The apparatus includes a base client module and a server module. The base client module receives requests from a client application on a client computer. The base client module calls a resource of a web application. A server module transparently interacts with the logic of the web application to obtain the requested data and sends it back to the base client in a format handled by the base client. The base client can then reformat the data to a client application requested format before passing the data to the client application. This method allows a client application programmer to obtain easily usable data from a web application by using the base client.|
30|http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=54&p=2&f=G&l=50&d=PTXT&S1=(python.CLTX.+or+python.DCTX.)&OS=ACLM/python&RS=ACLM/python|Control surfaces for a technical computing environment|A technical computing environment may include a modeling component to facilitate construction of a model and a code generation component. The modeling component may include an input component to receive one or more input signals through an interface protocol, and one or more components to receive one or more parameters, corresponding to the input signals received using the interface protocol, and to operate on the one or more parameters. The code generation component may include a code generator to generate, from the model, programming code compatible with a target environment, and an output interface to output the programming code.|"1. An apparatus comprising: a memory to store instructions; and a processor to execute the instructions to: receive one or more input signals through an interface deviceusing a Musical Instrument Digital Interface (MIDI) compatible protocol; receive one or more parameters, corresponding to the one or more input signals received using the interface device; operate on the one or more parameters; receive a MIDI controlmessage that includes information associated with an adjustment of the interface device; generate, from a model and based on receiving the MIDI control message, programming code compatible with a target environment; and output the programming code. 2. The apparatus of claim 1, where the processor is further to: provide, for presentation, a graphical model or a textual model. 3. The apparatus of claim 1, where the processor is further to: provide, for presentation, at least one of: a state-based model, an event-based model, a time-based model, or a dataflow model. 4. The apparatus of claim 1, where the target environment includes at least one of: a general computing device, a graphics processing unit, a field programmable gate array, or an application specific integrated circuit. 5. The apparatus of claim 1, where the processor is further to: implement a subset of the MIDI compatible protocol. 6. The apparatus of claim 1, where the processor is further to: transmit signals, to the interface device, using the MIDI compatible protocol. 7. The apparatus of claim 1, where the processor is further to: transmit signals to the interface device during an initialization procedure to synchronize controls on the interface device with parameter values used by the model. 8. The apparatus of claim 7, where the processor supports a hot-plugging MIDI compatible device. 9. The apparatus of claim 1, where the processor is further to: limit a change between a value of a parameter that is initially received, as part of the one or more input signals, and a corresponding value for the parameter, as stored by themodel. 10. The apparatus of claim 1, where the processor is used to support modeling of a biological system. 11. The apparatus of claim 1, where the processor is used to support distributed computing or distributed modeling. 12. The apparatus of claim 1, where the processor is further to: receive parameter values including integers, where there are an even number of possible integers; and scale and shift a received integer value into a real value, based on thereceived integer value, with respect to a midpoint of a range of integer values, such that multiple different integer values are converted to a midpoint of a possible range of real values. 13. The apparatus of claim 1, where the model is written in at least one of: MATLAB code, MATLAB-compatible code, Simulink code, Simulink-compatible code, Stateflow code, Stateflow-compatible code, SimEvents code, SimEvents-compatible code,LabView code, LabView-compatible code, MATRIXx code, MATRIXx-compatible code, python code, or python-compatible code. 14. The apparatus of claim 1, where the model is written in a text-based modeling language or a graphical-based modeling language. 15. The apparatus of claim 1, where the model is written in a dynamically typed programming language. 16. The apparatus of claim 1, where the interface device is an externally connected human interface device. 17. The apparatus of claim 16, where the externally connected human interface device includes an externally connected tablet computer with a touch sensitive display. 18. A method comprising: receiving a first portion of a model of a design, the first portion including logic to: implement, during operation of the model, a Musical Instrument Digital Interface (MIDI) compatible protocol or an Open SoundControl (OCS) compatible protocol, through which the model receives one or more input signals from an interface device, and the receiving the first portion being performed by a computing device; receiving a second portion of the model of the design, thesecond portion including logic to: receive values from the first portion, operate on the received values, and provide one or more output signals, and the receiving the second portion being performed by the computing device; receiving a control messagethat includes information associated with an adjustment of the interface device, the receiving the control message being performed by the computing device; generating, based on receiving the control message, programming code, compatible with a targetenvironment, to implement the model, the generating being performed by the computing device; and outputting the programming code, the outputting being performed by the computing device. 19. The method of claim 18, where the target environment includes a general computing device. 20. The method of claim 18, where the first portion of the model implements a subset of the MIDI compatible protocol or the OCS compatible protocol. 21. The method of claim 18, further comprising: transmitting, during operation of the model, signals, to a compatible device, using the MIDI compatible protocol or the OCS compatible protocol. 22. The method of claim 21, further comprising: transmitting initialization signals to the compatible device, during an initialization procedure, to synchronize controls on the compatible device with parameters used by the model. 23. The method of claim 21, further comprising: providing, for presentation, a graphical interface that includes graphical controls to modify parameters used by the model, where changes to the graphical controls and changes to the controls onthe compatible device are synchronized. 24. The method of claim 18, further comprising: providing an interface to enable interaction of a plurality of entities with a single control surface. 25. The method of claim 24, where the plurality of entities interact with a single control on the single control surface. 26. The method of claim 24, where the plurality of entities include: a first plurality of separate graphical windows associated with the model, and a second plurality of separate graphical windows associated with the model and with one or moreadditional models, and the model and the one or more additional models are executed by a single technical computing environment or by separate technical computing environments. 27. The method of claim 18, further comprising: limiting a change between a value of a parameter that is initially received, as part of the one or more input signals, and a corresponding value for the parameter, as stored by the model. 28. The method of claim 18, where receiving the first portion of the model and receiving the second portion of the model are performed using a graphical modeling environment. 29. The method of claim 28, where the graphical modeling environment presents a state flow model or a graphical block modeling environment. 30. The method of claim 18, where the interface device includes a human interface device that is connected externally relative to the computing device. 31. The method of claim 18, where the interface device includes a software application that is being executed by the computing device. 32. The method of claim 31, where the interface device includes at least one of: graphical sliders, knobs, or other control elements. 33. A non-transitory computer-readable medium storing instructions, the instructions comprising: one or more instructions which, when executed by a processor, cause the processor to: receive one or more input signals through an interface deviceusing a Musical Instrument Digital Interface (MIDI) compatible protocol or a protocol similar to the MIDI protocol; receive one or more parameters, corresponding to the one or more input signals received using the interface device; operate on the oneor more parameters; receive a control message that includes information associated with an adjustment of the interface device; generate, from a model and based on receiving the control message, programming code compatible with a target environment; and output the programming code. 34. The non-transitory computer-readable medium of claim 33, where the instructions further include: one or more instructions to provide, for presentation, a graphical model or a textual model. 35. The non-transitory computer-readable medium of claim 33, where the instructions further include: one or more instructions to provide, for presentation, at least one of: a state-based model, an event-based model, a time-based model, or adataflow model. 36. The non-transitory computer-readable medium of claim 33, where the target environment includes at least one of: a general computing device, a graphics processing unit, a field programmable gate array, or an application specific integratedcircuit. 37. The non-transitory computer-readable medium of claim 33, where the instructions further include: one or more instructions to implement a subset of the MIDI compatible protocol or the protocol similar to the MIDI protocol. 38. The non-transitory computer-readable medium of claim 33, where the instructions further include: one or more instructions to transmit signals, to the interface device, using the MIDI compatible protocol or the protocol similar to the MIDIprotocol. 39. The non-transitory computer-readable medium of claim 33, where the instructions further include: one or more instructions to transmit signals to the interface device during an initialization procedure to synchronize controls on theinterface device with parameter values used by the model. 40. The non-transitory computer-readable medium of claim 33, where the instructions further include: one or more instructions to limit a change between a value of a parameter that is initially received, as part of the one or more input signals,and a corresponding value for the parameter, as stored by the model. 41. The non-transitory computer-readable medium of claim 33, where the model is written in at least one of: a text-based modeling language, a graphical-based modeling language, or a dynamically typed programming language. Description RELATED APPLICATIONS This application claims priority to U.S. Provisional Patent Application No. 61/493,664, filed Jun. 6, 2011, the disclosure of which is incorporated by reference herein.BACKGROUND Technical computing environments (TCEs) are known that present a user, such as a scientist or engineer, with an environment that enables efficient analysis and generation of technical applications. For example, users may perform analyses,visualize data, and develop algorithms. Technical computing environments may allow a technical researcher or designer to efficiently and quickly perform tasks, such as research and product development. Existing technical computing environments may be implemented as, or executed in conjunction with, a graphically-based modeling environment. For example, in one existing graphically-based modeling environment, graphical simulation tools allowmodels to be built by connecting graphical blocks, where each block may represent an object associated with functionality and/or data. The technical computing environment and the graphically-based modeling environment may be a single, integratedapplication. Some models created with TCEs may execute interactively with respect to input received from a user. For example, a model may present a graphical interface to a user, who may adjust, as the model executes, a number of parameters of the model.BRIEF DESCRIPTION OF THE DRAWINGS The accompanying drawings, which are incorporated in and constitute a part of this specification, illustrate one or more implementations described herein and, together with the description, explain these implementations. In the drawings: FIG. 1 is diagram of an example system in which concepts described herein may be implemented; FIG. 2 is a diagram of an example device that may correspond to a workstation; FIG. 3 is a diagram illustrating example functional components that relate to the use of control surfaces, as human interface devices, for models; FIGS. 4A and 4B are diagrams illustrating an example of communication with models using control surfaces; FIG. 5 is a flow chart illustrating an example process for generating a model that uses a Musical Instrument Digital Interface (MIDI) control surface; FIG. 6 is a diagram illustrating an example of bi-directional communications between a model or a compiled model and a control surface; FIG. 7 is a diagram illustrating an example of unidirectional communications between a model/compiled model and a control surface; FIG. 8 is a diagram illustrating example components relating to hot-pluggable operation of a model/compiled model; and FIG. 9 is a diagram illustrating example graphical interfaces presented by a model.DETAILED DESCRIPTION The following detailed description refers to the accompanying drawings. The same reference numbers in different drawings may identify the same or similar elements. Implementations described herein may relate to human interface devices that may be used to provide input signals to a model, generated in a TCE, such as a model executing on a general-purpose computing device or a model exported to a targetdevice. The human interface devices may include general-purpose input devices, such as Musical Instrument Digital Interface (MIDI) devices. The model may include a MIDI interface component to receive signals from the MIDI devices using the MIDIprotocol or a subset of the MIDI protocol. In one implementation, the human interface devices may be hot-pluggable and/or removable, potentially allowing a user to plug a human interface device into a running model and adjust parameters of the modelwithout otherwise interrupting operation of the model. A MIDI device may include one or more physical controls, such as buttons, knobs, sliders, touch pad, etc. Physical controls may provide a more intuitive and useable input mechanism relative to a virtual control implemented as part of a graphicalinterface. The MIDI interface component may provide a straightforward (e.g., intuitive) mechanism, from the perspective of the user, for using the MIDI device to input parameter values to a model. A user can incorporate available, off-the-shelf MIDIdevices, in designs created with the TCE.Definitions A Technical Computing Environment (TCE) may include any hardware and/or software based logic that provides a computing environment that allows users to perform tasks related to disciplines, such as, but not limited to, mathematics, science,engineering, medicine, and business. The TCE may include text-based facilities (e.g., MATLAB.RTM. software), a graphically-based environment (e.g., Simulink.RTM. software, Stateflow.RTM. software, SimEvents.TM. software, etc., by The MathWorks,Inc.; VisSim by Visual Solutions; LabView.RTM. by National Instruments; etc.), or another type of environment, such as a hybrid environment that includes one or more of the above-referenced text-based environments and one or more of the above-referencedgraphically-based environments. The TCE may be integrated with or operate in conjunction with a graphical modeling environment, which may provide graphical tools for constructing models, systems, or processes. The TCE may include additional tools, such as tools designed toconvert a model into an alternate representation, such as source computer code, compiled computer code, or a hardware description (e.g., a description of a circuit layout). In one implementation, the TCE may provide this ability using toolboxes (e.g.,toolboxes for signal processing, image processing, color manipulation, data plotting, parallel processing, etc.). The toolboxes may provide a graphical or textual interface for the users. In another implementation, the TCE may provide these functionsas block sets. In still another implementation, the TCE may provide these functions in another way. Models generated with the TCE may be, for example, models of a physical system, a computing system (e.g., a distributed computing system), an engineered system, an embedded system, a biological system, a chemical system, etc.System Description FIG. 1 is diagram of an example system 100 in which concepts described herein may be implemented. System 100 may include a personal computer or workstation 110. Workstation 110 may execute a TCE 120 that presents a user with an interface thatenables design, analysis, and generation of, for example, technical applications, engineered systems, and business applications. For example, TCE 120 may provide a numerical and/or symbolic computing environment that allows for matrix manipulation,plotting of functions and data, implementation of algorithms, creation of user interfaces, and/or interfacing with programs in other languages. TCE 120 may particularly include a graphical and/or textual modeling component and a component to convertgraphic models into other forms, such as computer source code (e.g., C++ code) or hardware descriptions (e.g., a description of an electronic circuit). In one implementation, the graphical modeling capability of TCE 120 may also include state-based,time-based, event-based, and/or dataflow-based software to facilitate construction of graphical models based on state, time, event, and/or dataflow diagrams and/or charts. For example, Stateflow software may generally allow a user to describe complexlogic in a natural form using state charts or flow diagrams. Workstation 110 may operate as a single detached computing device. Alternatively, workstation 110 may be connected to a network 130, such as a local area network (LAN) or a wide area network (WAN), such as the Internet. When workstation 110 isconnected to a network, TCE 120 may be executed by multiple networked computing devices or by one or more remote computing devices. In such an implementation, TCE 120 may be executed in a distributed manner, such as by executing on multiple computingdevices simultaneously. Additionally, in some implementations, TCE 120 may be executed over network 130 in a client-server relationship. For example, workstation 110 may act as a client that communicates with, using a web browser, a server that storesand potentially executes substantive elements of TCE 120. As shown in FIG. 1, system 100 may include a remote TCE 140 (e.g., a remotely located computing device running a TCE) and/or a TCE service 160. TCE service 160 may include a server computing device that provides a TCE as a remote service. Forinstance, a TCE may be provided as a web service, a service provided over a computing cloud, etc. For example, a web service may provide access to one or more programs provided by TCE service 160. In one implementation, models created with TCE 120 may be executed at workstation 110 to present an interface, such as a graphical interface, to a user. In some implementations, TCE 120 may generate, based on the model, code that is executableon another device. As shown in FIG. 1, a target device 170 may include, for example, a consumer electronic device, a factory control device, an embedded device, a general computing device, a graphics processing unit or device, a field programmable gatearray (FPGA), an application specific integrated circuit (ASIC), or any other type of programmable device. Users may interact, through a human interface devices, with models created with TCE 120. One human interface devices which can be used to interact with models executing in workstation 110 or target device 170 may include a MIDI compatibledevice referred to as a ""MIDI control surface"" or ""control surface"" herein. Example control surfaces 180 are illustrated in system 100. Control surface 180 may include a physical device with generic, programmable controls, such as knobs, sliders,buttons, etc., that can be used to control a model implemented by TCE 120 and/or a target device 170. Alternatively or additionally, instead of physically actuating a control, control surface 180 may include virtual physical controls, such as a knob orslider that is associated with a ring or line of visual indicators (e.g., LEDs) that are turned on/off to indicate the position of the know or slider. As another example of a control surface 180, control surface 180 may be a virtual control surfaceimplemented through software, such as a tablet computer executing an application that presents an image of control surface 180 through which a user can interact using a touch sensitive display. In any of these situations, control surface 180 may beimplemented as or within an external device that is connected to workstation 110 or target device 170, such as through a USB cable. The precise function of each control on control surface 180 may be determined by the model with which control surface 180 is communicating. For example, the controls on a control surface 180 may be used, for example, to: (1) alter values ofvariables or signals, (2) alter properties of system objects, (3) alter properties of graphic user interface handles, (4) alter parameters of graphical blocks, and/or (5) trigger events in state charts or flow diagrams. For simplicity, in thedescription that follows, the controls of a control surface 180 will generally be described as controlling parameters of a model, where the term ""parameter"" may refer to, for example, any of the five items, mentioned in the previous sentence that may becontrolled by control surface 180, or other aspects relating to the control or monitoring of a model. Additionally, the term ""model"" may refer to any graphical block model, textual model, state chart, and/or flow diagram that may be created with TCE120. One example of a commercially available MIDI control surface includes a device that is smaller than a keyboard, has 36 input elements (e.g., nine knobs nine sliders, and 18 push buttons), and connects to a host and is powered through a UniversalSerial Bus (USB) interface. Although FIG. 1 shows example components of system 100, in other implementations, system 100 may contain fewer components, different components, differently arranged components, and/or additional components than those depicted in FIG. 1. Alternatively, or additionally, one or more components of system 100 may perform one or more other tasks described as being performed by one or more other components of system 100. FIG. 2 is a diagram of an example device 200 that may correspond to workstation 110, target device 170, or a remote device running remote TCE 140 or TCE service 160. In one example, workstation 110, target device 170, and/or the remote devicemay include one or more devices 200 and/or components of device 200. As illustrated, device 200 may include a bus 210, a processing unit 220, a main memory 230, a read-only memory (ROM) 240, a storage device 250, an input device 260, an output device270, and/or a communication interface 280. Bus 210 may include a path that permits communication among the components of device 200. Processing unit 220 may include a processor, multiple processors, microprocessors, or other types of processing logic that may interpret and execute instructions. Main memory 230 may include a random access memory (RAM) or another type ofdynamic storage device that may store information and instructions for execution by processing unit 220 (e.g., instructions implementing TCE 120). ROM 240 may include a ROM device or another type of static storage device that may store staticinformation and/or instructions for use by processing unit 220. Storage device 250 may include a magnetic and/or optical recording medium and its corresponding drive. In some implementations, main memory 230 or storage device 250 may also beimplemented as solid state memory, such as flash-based memory. Input device 260 may include a mechanism that permits an operator to input information to device 200, such as a keyboard, a mouse, a pen, a single or multi-point touch interface, an accelerometer, a gyroscope, a microphone, voice recognitionand/or biometric mechanisms, etc. Output device 270 may include a mechanism that outputs information to the operator, including a display, a printer, a speaker, etc. In the case of a display, the display may be a touch screen display that acts as both aninput and an output device. Input device 260 and/or output device 270 may be haptic type devices, such as joysticks or other devices based on touch. Communication interface 280 may include any transceiver-like mechanism that enables device 200 to communicate with other devices and/or systems. For example, communication interface 280 may include mechanisms for communicating with anotherdevice or system via a network. As will be described in detail below, device 200 may perform certain operations in response to processing unit 220 executing software instructions contained in a computer-readable medium, such as main memory 230. For instance, device 200 mayimplement TCE 120 by executing software instructions from main memory 230. A computer-readable medium may be defined as a non-transitory memory device, where the memory device may include a number of physically, possible distributed, memory devices. The software instructions may be read into main memory 230 from another computer-readable medium, such as storage device 250, or from another device via communication interface 280. The software instructions contained in main memory 230 may causeprocessing unit 220 to perform processes that will be described later. Alternatively, hardwired circuitry may be used in place of or in combination with software instructions to implement processes described herein. Thus, implementations describedherein are not limited to any specific combination of hardware circuitry and software. Although FIG. 2 shows example components of device 200, in other implementations, device 200 may contain fewer components, different components, differently arranged components, or additional components than depicted in FIG. 2. Alternatively,or additionally, one or more components of device 200 may perform one or more tasks described as being performed by one or more other components of device 200.Control Surfaces for TCE Created Models FIG. 3 is a diagram illustrating example functional components 300 that relate to the use of control surfaces, as human interface devices, for models created with TCE 120. The functions described in connection with FIG. 3 may be performed byone or more components of device 200 (e.g., workstation 110) or by one or more devices 200. As shown in FIG. 3, functional components 300 may include an operating system (OS) 310, which may include a set of programs that manage the computer hardware resources of workstation 110 and may provide common services for application software,such as TCE 120. TCE 120 may include a modeling environment 320 and a code generation component 330. Modeling environment 320 may include logic to allow users of TCE 120 to create models. The created models may include models of systems, such as models of a physical system, a computing system, an engineered system, an embedded system, abiological system, a chemical system, an algorithm, a state-based model, an event-based model, a time-based model, a dataflow model, etc. Modeling environment 320 may enable the creation of models using graphical or text-based interfaces. For example,in one implementation, modeling environment 320 may provide graphical blocks, each representing functionality, and each potentially including one or more inputs and one or more outputs. The graphical blocks may be arranged, by a user of TCE 120, in aconfiguration to implement the desired model, labeled as model 322 in FIG. 3. In an alternative possible implementation, modeling environment 320 may provide a text-based interface through which a user can create a model, such as by writing functionsand/or using one or more functions provided by modeling environment 320. Modeling environment 320 may particularly include a MIDI interface component 324. MIDI interface component 324 may represent, for example, a graphical block (and its associated functionality) and/or textual functions (e.g., a textual systemobject) that can be included as components of model 322. MIDI interface component 324 may implement all or a portion of the MIDI protocol. By including MIDI interface component 324 in model 322, model 322 can communicate with control surfaces 180. Forexample, workstation 110 or target device 170 may receive signals from control surface 180. The signals may be used to control parameters of model 322. Control surface 180 may be a standard, off-the-shelf MIDI device. Thus, by including MIDI interfacecomponent 324 in a model, a user can easily and efficiently provide an input mechanism to the model through which a number of parameters, of the model, may be controlled. In one implementation, modeling environment 320 may facilitate creating models using a number of possible programming languages, such as MATLAB code, MATLAB-compatible code, Simulink code, Simulink-compatible code, Stateflow code,Stateflow-compatible code, SimEvents code, SimEvents-compatible code, LabView code, LabView-compatible code, MATRIXx code, MATRIXx-compatible code, python code, or python-compatible code; etc. These programming languages may include bothdynamically-typed and statically-typed languages. In operation, MIDI interface component 324 may generally operate to communicate with control surfaces 180 using the MIDI protocol (or a subset of the MIDI protocol). For instance, control surfaces 180 may transmit a MIDI ""control change""message when a control is moved. Each control change message may identify the control that is changing and may include a new value for the control. MIDI interface component 324 may listen for the control change messages and may output a value, to othermodel components 326 (e.g., to one or more of other model components 326 that are connected to MIDI interface component 324), that reflects the new value that is received as part of the control change message. In one implementation, MIDI interfacecomponent 324 may output a value in the range of zero to one, based on the control change message received from the MIDI control surface 180. In some alternative implementations, instead of implementing the MIDI protocol, other communication protocols may be used, such as other communication protocols compatible with or similar to the MIDI protocol. One such similar protocol that maybe used includes the Open Sound Control (OCS) protocol. Further, as mentioned, in some implementations, MIDI interface component 324 may implement a subset of the MIDI protocol. For instance, messages not needed to communicate a state of the controlsof control surface 180, such as the MIDI ""note on"" and ""note off"" messages may not be implemented by MIDI interface component 324. Other model components 326 may represent the portion of a model not including MIDI interface component 324. Other model components 326 may include, for example, one or more graphical blocks, textual functions (e.g., code), or other objects thatare used to implement model 322. Other model components 326 may receive signals, such as signals from control surface 180, via MIDI interface component 324. The signals may be used to control parameters of model 322. In some implementations, control surface 180, in addition to transmitting signals to MIDI interface component 324, may be able to receive signals from MIDI interface component 324. For example, control surface 180 may include a knob that iscontrolled by motors. In this situation, other model components 326 may transmit values, using MIDI interface component 324, to control surface 180, to actuate the knob. Code generation component 330 may include logic to generate programming code, such as compiled code 340, for a particular target device 170. Code generation component 330 may, based on model 322 or based on code representing model 322, convertmodel 322 into a form capable of being executed in the particular target device 170. The target device 170 may include, for example, workstation 110 or an external target device 170, such as an embedded processor and/or system. In one implementation, a user of TCE 120 may select a particular target device 170 from, for example, a menu. Code generation component 330 may then convert model 322 into a format that can be executed on the particular target device 170. Inthis manner, model 322, which may be created using modeling environment 320, can be converted to a form that is capable of being executed on one of a number of possible target devices. Compiled code 340 may generally represent any representation ofmodel 322 that is converted to be executed at a particular target device 170. Compiled code 340 may be, for example, machine-level code, source code, a mix of machine-level code and source code, etc. Although FIG. 3 shows example functional components 300 of workstation 110, in other implementations, workstation 110 may contain fewer functional components, different functional components, differently arranged functional components, oradditional functional components than depicted in FIG. 3. Alternatively, or additionally, one or more functional components 300 of workstation 110 may perform one or more tasks described as being performed by one or more other functional components ofworkstation 110. FIGS. 4A and 4B are diagrams illustrating an example of communication with models with control surfaces. As shown in FIG. 4A, a model 410 may communicate with control surface 180. In this example, assume that model 410 is a model that is beingexecuted by TCE 120. For example, TCE 120 may include an ""execute"" or ""debug"" mode in which models may be executed and receive real or simulated input signals. Model 410 and control surface 180 may be connected together using a number of possible transport technologies, such as USB, Ethernet, FireWire, MIDI cable, etc. Signals resulting from the user's interaction with control surface 180 may betransmitted, using the MIDI protocol implemented over a transport technology, to model 410. Model 410 may adjust, based on the signals, one or more parameters of model 410. In FIG. 4B, a model 430 is illustrated as communicating with control surface 180. In this example, assume that model 430 is a model that is compiled, such as by code generation component 330, and then executed by a target device 170. Forexample, code generation component 330 may generate compiled code 340, which may be downloaded to target device 170 and executed as model 430. As with model 410, signals corresponding to the user's interaction with control surface 180 may betransmitted, using the MIDI protocol and over a transport technology such as USB, to model 430. Embodiments, such as those illustrated in FIG. 4B, may allow a user to control modeling code running on target device 170. FIG. 5 is a flow chart illustrating an example process 500 for generating a model, or code that represents a model, that uses a MIDI control surface. Process 500 may be performed by, for example, workstation 110 executing TCE 120. Process 500 may include receiving a model or otherwise enabling or facilitating the creation of a model (block 510). The model may include MIDI interface component 324 (block 510). For example, as previously discussed, modeling environment 320may provide a graphical or textual interface through which a user may create a model designed to obtain one or more values from a MIDI human interface device (e.g., control surface 180). The interface for the MIDI human interface device may beincorporated into the model as MIDI interface component 324. In one implementation, TCE 120 may provide the user with one or more utilities to assist the user in mapping physical controls on control surface 180 to corresponding inputs at MIDI interface component 324. For example, TCE 120 may provide autility function that prompts the user to move a desired control on control surface 180. Based on MIDI control change messages that are received in response to the movement of the control on control surface 180, MIDI interface component 324 mayassociate the control with an input variable for MIDI interface component 324. The user may use the utility function multiple times to identify multiple physical controls on control surface 180. Process 500 may further include testing the model, including testing of the MIDI interface (block 520). For example, the model may be executed by TCE 120 and values for parameters in the model may be observed, by the user, as the user adjustsbuttons, knobs, or other physical input mechanisms, on control surface 180. In response, the user may, for example, interactively, through TCE 120, modify the operation of the model. At some point, the user may determine that the model is ready for deployment in a target device. At this point, process 500 may further include generating code, to implement the model, on one or more target devices (block 530). For example,the user may control code generation component 330 to generate compiled code for the target device or devices. A MIDI control surface 180 was generally described above as a control surface that can be used to input values to a model. Some MIDI control surfaces may be capable of receiving values. For such a MIDI control surface, controls, such assliders, may be motorized so that the control surface can adjust the position of the slider without user interaction. In this situation, MIDI interface component 320 may be bi-directional, which, in addition to receiving control change messages fromcontrol surface 180, may transmit control change messages to control surface 180. FIG. 6 is a diagram illustrating an example of bi-directional communications between a model or compiled model 610 and a control surface 180. Model/compiled model 610 may include a MIDI interface component, such as MIDI interface component 324. Control surface 180 may include a MIDI control surface that includes motors or other actuators capable of moving the physical controls of control surface 180. Alternatively or additionally, instead of physically actuating a control, control surface 180may include virtual physical controls, such as a knob or slider that is associated with a ring or line of visual indicators (e.g., LEDs) that are turned on/off to indicate the position of the know or slider. As another example of a control surface 180,control surface 180 may be a virtual control surface implemented through software, such as a tablet computer executing an application that presents an image of control surface 180 through which a user can interact using a touch sensitive display. As shown in the example of FIG. 6, model/compiled model 610, when it is first turned on or initialized, may exchange initial parameter values (625) with control surface 180. The initial parameter values may be the parameters of model/compiledmodel 610 that are initially set in model/compiled model 610 or parameters values that were saved from a prior execution of the model. Initial parameter values 625 may be passed to control surface 180 using one or more MIDI control change messages thatinclude the intended initial values of the parameters. In response to reception of the MIDI control change messages, control surface 180 may adjust its controls, such as by controlling motors or other physical actuators, to match the received parametervalues. At some point after initialization, a user may adjust the controls of control surface 180. In response, control surface 180 may transmit MIDI control change messages to model/compiled model 610 (user modified values 630), which may update theparameter values for model/compiled model 610. FIG. 7 is a diagram illustrating an example of unidirectional communications between model/compiled model 610 and control surface 180. Model/compiled model 610 may include a MIDI interface component, such as MIDI interface component 324. Control surface 180 may include a MIDI control surface that includes one or more physical controls but does not include motors or other actuators that could potentially adjust the position of the controls of control surface 180. When model/compiled model 610 and control surface 180 first communicate with one another, control surface 180 may transmit one or more MIDI control change messages, to model/compiled model 610, that communicate initial parameter values (755)corresponding to the physical controls of control surface 180. In some situations, the values received as initial parameter values 755 may be significantly different than the initial parameter values stored by model/compiled model 610. In order toavoid discontinuities that may adversely affect the operation of model/compiled model 610, model/compiled model 610 may include a limiting component 760 to limit or otherwise modify initial parameter values 755. For example, limiting component 760 mayrestrict the initial values of parameters of model/compiled model 610 to within a particular range or may restrict the initial change of a parameter value of model/compiled model 610 to within a particular range. At some point after initialization, a user may adjust, using control surface 180, the controls of control surface 180. In response, control surface 180 may transmit MIDI control change messages to model/compiled model 610 (user modified values765), which may update the parameter values for the model. In some implementations, model/compiled model 610 may also include, such as through a graphical interface that simulates control surface 180, the ability for a user to adjust parameter valuesfor the model. In this case, changes made by a user, either through control surface 180 or through model/compiled model 610, may be synchronized with respect to both control surface 180 and model/compiled model 610. Thus, changes made to controlsurface 180 may be reflected in the graphical interface of model/compiled model 610, and changes made to parameters through the graphical interface of model/compiled model 610 may be reflected in control surface 180. In one implementation, a MIDI control surface may be hot-pluggable with respect to workstation 110 and/or target device 170. In other words, the MIDI control surface may be removed or inserted into workstation 110 and/or target device 170during operation of the model. FIG. 8 is a diagram illustrating example components relating to hot-pluggable operation of a model/compiled model 810. A control surface 180 may include a MIDI control surface that includes one or more physical controls. Further,model/compiled model 810 may include a removal/insertion component 815, which may generally operate to ensure uninterrupted operation of model/compiled model 810 during an insertion or removal of control surface 180. For hot-pluggable operation ofmodel/compiled model 810, the transport technology between model/compiled model 810 and control surface 180 may be a transport technology, such as USB, that supports hot-pluggable operation. Removal/insertion component 815 may operate to detect the removal or insertion of control surface 180. For example, in one implementation, removal/insertion component 815 may poll operating system 310 to determine when a USB device,corresponding to control surface 180, is removed or inserted. In response to the removal of control surface 180 during operation of model/compiled model 810, removal/insertion component 815 may hold the parameter values that are received from controlsurface 180 at a steady value, such as the last received parameter value. Alternatively, removal/insertion component 815 may perform other functions in response to detection of removal of control surface 180, such as informing other elements ofmodel/compiled model 810 (e.g., other blocks) that control surface 180 has been removed. In response to the insertion of control surface 180 during operation of model/compiled model 810, removal/insertion component 815 may perform an initialization procedure relating to the parameters of model/compiled model 810. The initializationprocedure may include the communication of initial parameter values 625 or 755, as discussed previously with reference to FIGS. 6 and 7. FIG. 9 is a diagram illustrating example graphical interfaces presented by a model. In some implementations, a model, such as model 322, may execute in an environment in which a display is used to present a graphical interface to a user. Thegraphical interface may include one or more windows. In FIG. 9, a graphical interface 900 is illustrated as including two windows 910 and 920. Each window 910 and 920 may, for example, present information to a user and/or receive inputs from the user. As particularly shown, two sets of virtualslider controls, 912 and 914, are illustrated in windows 910 and 920, respectively. During the operation of model 322, a user may adjust slider controls in a set of virtual slider controls 912/914 by, for example, using a mouse or other pointing device. Alternatively, as shown in FIG. 9, a control surface 180 may, which includes sets of physical slider controls 930 and 932, may also be used during the operation of model 322. In this example, assume that the sets of slider controls 912/914 and 930/932are linked so that changes made to a physical slider, in the set of physical slider controls 930/932, will result in model 322 correspondingly adjusting the virtual slider in the set of virtual slider controls 912/914. As is further shown in FIG. 9, OS 310 and a sharing component 940 may act as logical interfaces between graphical interface 900 and control surface 180. OS 310 may, for example, handle the low level connection to control surface 180. Sharingcomponent 940 may provide an interface through which multiple windows, such as windows 910 and 920, may communicate with a single control surface 180. In one implementation, when a first one of windows 910 or 920 attempts to connect to control surface 180, sharing component 940 may open a connection, through OS 310, to control surface 180. When a second one of windows 910 or 920 attempts toconnect to control surface 180, sharing component 940 may share the previously open connection to control surface 180. Sharing component 940 may, for instance, forward MIDI control change messages from one of physical sliders, in the set of physicalslider controls 930/932, to the window 910 or 920, to which the physical slider is assigned. FIG. 9 illustrates the sharing of different sets of physical slider controls 930/932, on a single control surface 180, by virtual controls in two windows 910 and 920. In an alternative implementation, a single physical slider or set of physicalsliders may be shared by two or more windows. In this case, changes made to the physical slider may be reflected in the windows and changes made in any of the windows may be reflected the physical slider (and potentially in the other one(s) of thewindows). Additionally, in some implementations, virtual controls that correspond to a single physical control may be presented in the same window, separate windows of a single model, separate models that are being simultaneously executed by a singleTCE 120, or in models that are being simultaneously executed by multiple instances of TCE 120. In the MIDI protocol, values in MIDI control change messages may be represented as a seven-bit value, providing for integer control values in the closed interval [0, 127]. MIDI interface component 324 may convert these integer control valuesinto a range of real numbers, such as [0, 1] or [-1, 1]. A direct method to convert an integer interval to a range of real values may include dividing the received integer value by the maximum possible value (to obtain the range [0, 1]) and thenshifting and/or scaling to obtain the desired real number range. For example, [0, 127] may be converted to the real range [0, 1] as: x/127; where x represents the received integer value. The real range [-1, 1] may be obtained as: x/127*2-1. Becausethe integer interval [0, 127] includes an even number of possible values, the midpoint of the two real ranges (0.5 and 0) is not obtainable using these two conversion formulas. This can be particularly problematic for a range such as [-1, 1], where auser may expect to be able to set a control to zero to obtain the midpoint. In one implementation, an integer range, having an even number of values, may be converted to a real range by subtracting 1 from the received integer value, when the received integer value is greater than the midpoint, and then dividing by oneless than the maximum value of the integer range. For example, the conversion for the real range [-1, 1], from the integer range [0, 127], may be obtained as: (x-1)/126*2-1; when x>63 x/126*2-1; otherwise. With this formula, both x=63 and x=64 areconverted to zero. This may be desirable, as it makes it easier for a human to adjust a control to produce exactly zero. Although the above description of MIDI interface component 324 was described with reference to inputs received from a physical control surface, in some implementations, such as when testing a model, a user may desire to emulate a control surfaceas a software application (virtual) control surface that includes graphical sliders, knobs, or other control elements. In one implementation, MIDI interface component 324 may include an option to allow MIDI interface component 324 to communicate withvirtual control surfaces.CONCLUSION A TCE that includes mechanisms for communicating with a control surface, such as a MIDI control surface, was described herein. The control surface may be a hot-pluggable control surface that contains one or more knobs, slider buttons, or otherbuttons that can be used to provide a natural and intuitive interface to controlling parameters for a model designed with the TCE. The foregoing description of implementations provides illustration and description, but is not intended to be exhaustive or to limit the invention to the precise form disclosed. Modifications and variations are possible in light of the aboveteachings or may be acquired from practice of the invention. For example, while a series of blocks has been described with regard to FIG. 5, the order of the blocks may be modified in other implementations. Further, non-dependent blocks may be performed in parallel. Also, the term ""user"" has been used herein. The term ""user"" is intended to be broadly interpreted to include, for example, a workstation or a user of a workstation. It will be apparent that embodiments, as described herein, may be implemented in many different forms of software, firmware, and hardware in the implementations illustrated in the figures. The actual software code or specialized controlhardware used to implement embodiments described herein is not limiting of the invention. Thus, the operation and behavior of the embodiments were described without reference to the specific software code--it being understood that one would be able todesign software and control hardware to implement the embodiments based on the description herein. Further, certain portions of the invention may be implemented as ""logic"" that performs one or more functions. This logic may include hardware, such as an application specific integrated circuit or a field programmable gate array, software, or acombination of hardware and software. Even though particular combinations of features are recited in the claims and/or disclosed in the specification, these combinations are not intended to limit the disclosure of the invention. In fact, many of these features may be combined inways not specifically recited in the claims and/or disclosed in the specification. Although each dependent claim listed below may directly depend on only one other claim, the disclosure of the invention includes each dependent claim in combination withevery other claim in the claim set. No element, act, or instruction used in the present application should be construed as critical or essential to the invention unless explicitly described as such. Also, as used herein, the article ""a"" is intended to include one or more items. Where only one item is intended, the term ""one"" or similar language is used. Further, the phrase ""based on"" is intended to mean ""based, at least in part, on"" unless explicitly stated otherwise."
31|http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=74&p=2&f=G&l=50&d=PTXT&S1=(python.CLTX.+or+python.DCTX.)&OS=ACLM/python&RS=ACLM/python|Systems and methods for producing a cooling beverage|A system for cooling a beverage and dispensing a beverage cooling medium comprises a beverage line connectable to a beverage supply for transporting beverage from the beverage supply through a conduit to a beverage dispense valve at a dispensation site, and a cooling line for transporting a cooling medium through the conduit so as to allow heat exchange between the cooling medium in the cooling line and the beverage in the beverage line. The cooling line is connectable to the beverage supply or to a second beverage supply such that the cooling medium is a beverage cooling medium. The system further comprises a cooling medium dispense valve in communication with the cooling line at the dispensation site for dispensing the beverage cooling medium. The system is further operative for dispensing a frozen particle-containing beverage through a python.|
32|http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=100&p=2&f=G&l=50&d=PTXT&S1=(python.CLTX.+or+python.DCTX.)&OS=ACLM/python&RS=ACLM/python|Method and system for remote device access in virtual environment|A method, system and computer program product for accessing remote devices is provided. The proposed method allows users to remotely access devices or tools controlled by a VM implemented on a remote server. A user of a client machine can access a remote device controlled by a server or by local client of the server. The server can have a number of Virtual Machines (VMs) implemented on it. Each of the VMs can run a Guest OS that has guest device drivers installed on it. The VM receives the user request and passes on user commands to a device controlled by the guest device driver installed on the Guest OS of the VM.|"1. A method for remote device access, the method comprising: (a) establishing a network connection between a remote client computer and a server; (b) starting at least oneVirtual Machine (VM) on the server, the VM being supervised by a Virtual Machine Monitor; (c) activating a Guest Operating System (GOS) in the VM; (d) installing at least one guest device driver on the GOS for interfacing, over the network connection,and using a Remote Procedure Call (RPC) protocol, to a peripheral remote device that is physically connected to the remote client computer using a the remote client's computer system bus; (e) connecting the peripheral remote device over the networkconnection to the server; (f) activating a dispatcher module on the server, the dispatcher module being configured to access the VM and to manage a configuration of the VM; (g) sending a control command from the client computer to the dispatchermodule; (h) processing the control command at the dispatcher module and passing it to the guest device driver; (i) receiving the control command at the guest device driver and accessing the peripheral remote device over the Remote Procedure Call (RPC)protocol, wherein the control command is sent and received jointly with local data flow; and (j) repeating steps (g)-(i) at least once, wherein the interface to the remote procedure call protocol is a Host API ""C"" interface of the client computercommunicating with the remote server. 2. The method of claim 1, where the remote device is any of: a CD ROM; an external hard drive; a sound card; a video card; a USB flash drive; and a USB smart card. 3. The method of claim 1, wherein a plurality of remote devices is connected to the server. 4. The method of claim 1, wherein at least one local client computer is connected to the server. 5. The method of claim 4, wherein at least one device is connected to the local client computer, and wherein the at least one device is controlled by the commands sent from the remote client computer. 6. The method of claim 1, wherein a third-party guest tool is installed on the GOS. 7. The method of claim 6, wherein the dispatcher passes the control command to the third party Guest tool. 8. The method of claim 1, wherein a plurality of the remote clients and a plurality of the local clients are connected to the server, and wherein the remote clients access the devices connected to the local clients. 9. The method of claim 8, wherein the clients are connected to the server via a protected intelligent channel. 10. A system for remote device access, the system comprising: a processor; a memory coupled to the processor; and a computer code loaded into the memory and executed on the processor for implementing the steps of claim 1. 11. The method of claim 1, wherein the control commands are sent from any of: a GUI interface; a SOAP interface; and a Python interface. 12. A system for remote device access, the system comprising: at least one client computer connected to a server computer over a network; at least one Virtual Machine Monitor and at least one Virtual Machine activated on the server; a GOSrunning in the VM; at least one guest device driver installed on the GOS for interfacing, over the network connection, and using a Remote Procedure Call (RPC) protocol, to a peripheral remote device that is physically connected to the remote clientcomputer using a the remote client's computer system bus; the at least one remote device connected to the server over the network; at least one dispatcher module implemented on the server, wherein the dispatcher module passes control commands sent fromthe client computer on to the VM and manages a configuration of the VM, and wherein the control command is received at the guest device driver and the remote device is accessed over the Remote Procedure Call (RPC) protocol, wherein the control command issent and received jointly with local data flow, and wherein the interface to the remote procedure call protocol is a Host API ""C"" interface of the client computer communicating with the remote server. Description BACKGROUND OF THE INVENTION 1. Field of the Invention The present invention relates generally to Virtual Machine (VM) technology and, more particularly, to a method and system for accessing remote devices using a VM. 2. Background Art In the past decade, capabilities of computer systems have increased significantly. Computer systems process large volumes of data, which is changed or updated constantly. Even well-known and widely distributed applications are upgraded veryoften, so consumers have to download new software remotely. One conventional approach that allows users to have access to files and applications residing on a remote system is so-called ""dumb terminal"" that is connected to a large central computer or a computer cluster. The applications are onlyinstalled on the central computer, and users run the applications remotely. The user can control the application through a GUI of the local display, while no application executable code is loaded onto the user's computer. The ""dumb terminal"" approachhas two major shortcomings. One is security, since the user has to pass data to the central computer system. Another one is that a user is limited to applications installed on the central computer system. Another way for a user to remotely access software and data is to download the entire desired application from a provider, which generally involves loading files from a physical storage medium such as a CD ROM. This approach is inconvenient forusers who only need to use a particular feature of the application, or only need it for a short time. Another disadvantage of this approach is that the downloaded applications occupy large amounts of memory available on the user's system. Downloadingof applications also presents a problem of unauthorized copying. The problem of accessing and running, by a user, a potentially arbitrarily large number of applications (i.e., executable files) remotely is addressed in the U.S. Pat. No. 6,735,601. The system disclosed in this patent allows a user to retainlocal control of the execution of the applications installed or stored remotely. The proposed system is intended for situations when a user chooses not to load the application onto his computer. No scaling down or other modifications of the softwareapplications are required. The proposed system, however, does not allow users to access devices controlled by the remote server or by a local client of the remote server. The industry trend of virtualization and isolation of computer system resources makes the task of remote access, and in particularly remote device access, more complex. A Virtual Machine (VM) is a type of an isolated Virtual ExecutionEnvironment that runs on the same physical machine simultaneously. Each VM instance executes its own OS kernel. Support of Virtual Machines is implemented using a Virtual Machine Monitor and/or a Hypervisor. Virtualization allows running a number of VMs on the same physical machine or server. Each VM can have a Guest Operating System (GOS) implemented on it. A GOS can support a number of Guest tools and devices. A remote access to these tools anddevices by a user of a remote computer system is critical. None of the conventional remote access systems provide an efficient mechanism for remote access to devices in a Virtual Execution Environment. Accordingly, there is a need for a system and a method for accessing remote devices using a Virtual Execution Environment.SUMMARY OF THE INVENTION The present invention is directed to method, system and computer program product for accessing remote devices. The proposed method allows users to remotely access devices or tools controlled by a Virtual Execution Environment (VEE), such as aVM, implemented on a remote server. The process executed on remote server may be based on Parallels.TM. virtualization techniques, e.g. on Parallels Desktop, Parallels Workstation, Parallels Server and Parallels Virtuozzo Containers, although theinvention is not limited to any particular virtualization technology. These are examples of virtualized servers used for implementing the proposed method. According to the proposed method, a user of a client machine (i.e., a desktop or a laptop) can access a remote device controlled by a server or a local client of the server. The server can have a number of Virtual Machines (VMs) implemented onit. Each of the VMs can run a Guest OS that has Guest device drivers installed on it. In one embodiment, a special Dispatcher module called Parallels Server runs on the physical server. The Parallels Server receives remote access requests from a userof a client machine and dispatches these requests to the VMs that run on the physical server. The VM receives the user request and passes on user commands to a device controlled by the guest device driver. In an exemplary embodiment, a user canremotely access some third party Guest Tools controlled by a Guest API Library of a GOS. Therefore, a user of a client machine can, advantageously, access and control devices that are not physically connected to the client machine. A number of remote users can benefit from using the same device without having to install drivers forthese devices on the client machines. Additional features and advantages of the invention will be set forth in the description that follows, and in part will be apparent from the description, or may be learned by practice of the invention. The advantages of the invention will berealized and attained by the structure particularly pointed out in the written description and claims hereof as well as the appended drawings. It is to be understood that both the foregoing general description and the following detailed description are exemplary and explanatory and are intended to provide further explanation of the invention as claimed. BRIEF DESCRIPTION OF THEATTACHED FIGURES The accompanying drawings, which are included to provide a further understanding of the invention and are incorporated in and constitute a part of this specification, illustrate embodiments of the invention and together with the descriptionserve to explain the principles of the invention. In the drawings: FIG. 1 illustrates a system architecture, in accordance with an exemplary embodiment; FIG. 2 illustrates a structure of communication protocols, in accordance with the exemplary embodiment; FIG. 3 illustrates an example of remote access system, in accordance with the exemplary embodiment; and FIG. 4 illustrates an exemplary computer system on which the client and the server, according to exemplary embodiment, can be implemented.DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS Reference will now be made in detail to the embodiments of the present invention, examples of which are illustrated in the accompanying drawings. The present invention is directed to a method, system and computer program product for accessing remote devices using Virtual Environment. The proposed method allows users to remotely access devices or tools controlled by a VM implemented on aremote server. A VM is implemented on a server connected to a number of client computers. The client computers have external devices such as CD ROMs, DVD players, high definition video cards, USB flash cards, USB smart cards, sound/video cards, external hard drives, DMA (direct memory access) devices, VT-C, VT-d and VT-x processors,etc. Note that most servers do not have sound capability (since there is no point in having sound on a server), but a VM launched on the server can access a sound card on a local machine, as well as other peripherals on the same or different machine. Aspecial secure communication channel (e.g., IP SEC protocol) is established between the VM and the client computers. The VM accesses the remote devices attached to the remote clients. Note that each client can have a combination of the above listeddevices attached to it. According to an exemplary embodiment, the server-based VM can access any number of the remote devices of a single remote client or of a plurality of clients. In effect, it is possible to assemble a virtual (distributed) computerwith peripherals that are physically located on several different computers, and which are controlled through VM technology running on a server from a client-side through server-based secure communications protocol. Other devices can include videochangers, video-on-demand players, CPUs, math coprocessors, vector processors, disk drives, etc. Data exchange between the VM and the client devices can be optimized. For example some data can be compressed or pre-processed on the client site. Also, the device-related commands that are not needed by the VM are not sent over thecommunication channel. Thus, an intelligent secure communication channel is established between the VM and the remote client devices (optionally using encryption to connect some or all of the hardware to the VM). According to the proposed system and method, a client-server infrastructure is provided. A user of a client machine (i.e., a desktop or a laptop) can access remote devices connected to a server or to local clients of the server. The server canhave one or multiple Virtual Machines (VMs) running on it. Each of the VMs can run a Guest OS that has guest device drivers installed on it. In one embodiment, a special application called Parallels Server, available from Parallels SoftwareInternational, Inc., runs on the physical server. The Parallels Server receives internal (i.e., private) access requests from a user of a client machine and dispatches these requests to the VMs that run on the physical server. The VM receives the user request and passes on user commands to adevice controlled by the guest device driver installed on the GOS of this VM. In one embodiment, a user can remotely access some third party guest tools controlled by a Guest API Library of a GOS. According to the preferred embodiment, a user of a client machine can remotely (i.e., via a VM) access and control devices that are not physically connected to the client machine. A number of remote users can benefit from using the same device. Note that no device drivers need to be installed on the clients. Furthermore, each driver has to be installed only once on one of the VM's GOS. The architecture of an exemplary client-server system is illustrated in FIG. 1. A client machine has a proprietary Parallels GUI console implemented on it. The GUI console provides the user with a capability of access to remote devices andtools. A user can control remote devices by sending the commands to these devices using the GUI console. The client machine provides Component Object Model (COM) API binding. It also manages a CLR (Common Language Runtime) binding (see http://en.wikipedia.org/wiki/Common_Language_Runtime), exposing interfaces to a scripting interfaces. A web-based console of the client machine provides Simple Object Access Protocol(SOAP) API binding. Note that SOAP API binding is implemented using XML and is OS-independent. The client machine also includes a physical/virtual device binding. All of the binding implemented on the client machine use a client ""C"" Host API Library. According to the preferred embodiment, all client machines are based on a Host API ""C"" Library interface. The Host API ""C"" Library interface is a lowestlevel cross-platform interface, which allows the client machine(s) to interact with the VMs running on the physical server. As one embodiment, the Host API ""C"" Library interface is described, although other interfaces and programming languages supportedby calling API functions may be used here (e.g., C++, Visual Basic, Pascal, assembly language, C#, etc.). The Host API ""C"" Library cross-platform interface can interact with the VMs on the server in two different ways. In one embodiment, the Host API ""C"" Library cross-platform interface uses third-party host tools implemented on the client machine. Communication with the server's VMs is provided over one or several virtual networks. One of these virtual networks can utilize the Internet. In this embodiment the VM's are accessed directly using Host/Guest PIPE API (seehttp://msdn2.microsoft.com/en-us/library/aa365137(VS.85).aspx). In one embodiment, this network API can be implemented as a duplex pipe for corresponding data transmission between the physical machine and the client machine. In the case of Named Pipe, any process of the physical machine or the clientmachine can read data from a pipe and write data to the pipe. However, the pipe may be opened only either for reading or for writing. Therefore, the process that initiated the pipe chooses either a read mode or a write mode, and the pipe will remainopen in this mode until it is closed. Each of the VMs has a GOS installed on it. Note that, although in this example only two VMs are shown, an arbitrary number of the VMs can be implemented on the physical server. Both of the VMs are configured according to their ownconfiguration parameters. In one embodiment, there is a Guest API ""C"" Library (i.e., guest client API Library) implemented on the GOS of VM 1. The Guest API ""C"" Library interface controls third-party guest tools. Thus, the user of the client machinecan pass commands for controlling the third-party guest tools through the Host API ""C"" interface via the Guest API ""C"" interface implemented on the GOS of the VM. In another embodiment, VM N has a guest device driver installed on the GOS of the VM N. Note that multiple guest device drivers can be installed on the GOS of the VM N. These guest device drivers can also be controlled by the user of the clientmachine remotely with the Host API ""C"" interface that sends the commands to the guest device drivers through the Virtual Networks using Host/Guest PIPEs API. Thus, the user of the client machine can access and control remote devices using the devicedrivers of the respective VMs running on the server. In another embodiment, the Host API ""C"" Library interface of the client machine communicates with the Parallels Server installed on the same physical server where the VMs are implemented. The Parallels Server is configured in such a way that itcan process and dispatch the private requests received from the Host API ""C"" interface of the client machine to the VMs. The private requests can come from an IPC (i.e., a desktop computer used as a client machine) or from an RPC (i.e., another server, connected to the client machine and using its Host API ""C"" interface). In both cases the Parallels Server passeson the commands to the VMs. Thus, the Parallels Server is executed as a router that passes commands from the Host API ""C"" interface of the client machine to the VMs running on the server machine. More specifically, remote device data interchange may beprovided between either remote computing systems or between virtual machines running on the same hardware. In case of the VM 1, the Parallels Server sends the commands to the Guest API ""C"" Library implemented on GOS of the VM 1. The Guest API ""C"" Library interfaces with the third party Guest tools. In case of the VM N, the Parallels Server sendsthe commands to the guest device driver installed on the GOS of the VM N. In both cases, the user of the client machine gains remote access and controls devices and tools connected to the server via the VMs 1-N running on this server. As discusses above, the remote user controls the devices by passing the commands from a client machine to a server. A detailed structure of communication protocols used in the preferred embodiment is illustrated in FIG. 2. The essentialcommunication protocols illustrated in FIG. 2 are Command Flow, I/O Flow, Event Loop and Execution Engine. The commands are sent using the GUI at a remote desktop (i.e., client machine). The process prl_client_app.exe is executed on the client machine. The client machine is connected over the Internet to the Local Desktop that serves as aDispatcher. The command flow is provided over the XML-based protocol (i.e., SOAP) over TCP connection. These commands are used to perform basic VM control operations. Most of these commands are implemented within the Source/CommandFlow that goesthrough an external port. In one embodiment, the Remote IO Flow is a data-based protocol over a UDP connection. This flow is used to transfer raw VM data (i.e., video, sound, regular data, etc.). The Remote IO Flow also goes to the external port. The local desktop(i.e., dispatcher) executes its own process prl_disp_service.exe. Two scenarios of remote control of the devices by the client are possible. In one scenario, also illustrated in FIG. 1, the devices and tools are connected to the server where the VMs are implemented. In another scenario, illustrated in FIG.2, the local clients have devices connected to them. These local clients have guest device drivers installed on the GOSs of the VMs implemented on the server. The use of the remote client can control the devices connected to the local clients by sending the commands to the VM's implemented on the remote server. This novel approach allows the remote users to access any devices on the network providedthat the guest device drivers are installed on the GOS of the VMs. One of ordinary skill in the art will appreciate that, in the preferred embodiment, the remote access is implemented at the device level, and that a remote user controls tools and devices connected to the server while no device drivers need tobe installed on the client machine. In the first scenario, the Dispatcher passes the command flow directly to the VM on the server. Then VMController communicates with VM Monitor (VMM) and the commands are passed to the guest driver of the GOS. In the second scenario, the command flow is re-directed to another local client, where a local client GUI is implemented and a separate process prl_client_app.exe is executed. The Local IO Flow is directed to the VM. The Local IO Flow is FIFO(first-in, first-out) data transmission protocol that may be used to transfer Raw VM Data (i.e., video, sound, regular data, commands etc. generated on an external data bus of a hardware device). The Local IO Flow is then transmitted using the Named Pipe or similar inter-process communication, technique (see http://en.wikipedia.org/wiki/Named_pipe). The dispatcher also directs the Command Flow and Local IO Flow from the local server tothe VM. Thus, the user of the remote client can send the commands all the way through to the devices connected to the local client. The VM Controller includes host-side devices, GUI Refresh Loop, IO Services for the VM and the Virtual Machineinterface. The Event Loop transfers the data between VM Monitor and VM events handler. The VM monitor (VMM) and Hypervisor can also include devices controlled on the monitor side, VTX/SVM supported features (AMD-V, seehttp://multicore.amd.com/us-en/AMD-Multi-Core/Quad-Core-Advantage/At-Work- -AMDOpteron/Virtualization.aspx, which is an AMD Virtualization.TM. technology that is a hardware-based technology that enables servers to reach higher levels of efficiency andutilization by assisting virtualization software to run multiple operating systems and applications on a single physical AMD Opteron.TM. processor-based server). Also, INTEL VT-X technology, see http://www.intel.com/technology/platform-technology/virtualization for IA-32 processors provides hardware support that simplifies processor virtualization, enabling reductions in virtual machine monitor (VMM)software size and complexity. The Resulting VMMs can support a wider range of legacy and future operating systems (OSs) on the same physical platform while maintaining high performance. Other such features include exception handling module and codeanalysis module. The VMM handles exceptions and interrupts. It also prepares guest context and sends requests to the Host handlers in the VM. The VMM interfaces with a Guest OS by means of an Execution Engine. The VM controller can perform read/write operations with the shared buffers of a first type, such, as for example, VESA buffer. The VMM can perform read/write operations with the shared buffers of a second type, such as, for example, VGA Statebuffer, Sound buffer and Network buffer. The shared buffers of the first type are used to prevent copying of large data blocks between VMM/VMController and the clients. The shared buffers of the second type are used to prevent copying of large blocks of data between the VMM and VMController. The Dispatcher and the local clients can only read data from the shared buffers. Note that, in one embodiment, the roleof the Dispatcher can be performed by the Parallels Server. The communication protocols can be used with multiple remote clients as well as multiple local clients. FIG. 3 illustrates an exemplary remote access system. The system, according to the preferred embodiment, implements remote access to guest tools and guest devices. In the preferred embodiment, the remote access to guest tools and guest devicescan be accomplished by different entities. A remote user can use the client GUI for accessing the devices as shown in FIG. 1. A process prl_client_app.exe is executed using GUI interface. In another embodiment, a SOAP interface process prl_web_app.exe is executed and the remote devices can be controlled by a web service. In yet another embodiment, a Python interfaceprocess prl_python_app.exe is executed and the remote devices are controlled by a scripting layer. All of these interfaces can use interfaces provide by the lower level applications. All of the above mentioned interfaces communicate with the API (DLL) module implemented as an object oriented (OO) functional interface. The communication between the interfaces is accomplished using public (i.e., external) protocols. The API(DLL) functional interface includes management interface, tools interface and device interface. The API (DLL) library exposes interfaces that enable any of the users of the GUI, SOAP or Python interfaces to implement any kind of a third party tools theywant. Note that the API (DLL) library does not expose its interfaces to the users. In one embodiment, the API (DLL) library can provide all the functionality for sending commands directly to the VM using internal (i.e. private) protocol. In another embodiment, addition functionality is needed. This functionality is providedby the Parallels Server (i.e., Dispatcher). The prl_disp_service.exe is executed on a Dispatcher. Some information can be read from Hard Disk Drive (HDD) image and a process prl_image_explorer.exe is executed on the image explorer. These libraries expose all the functionality of aplatform provided by the preferred embodiment. All of the communication protocols between these libraries and the API (DLL) libraries are private (i.e., internal). Note that all of the interfaces and the VMs are implemented on the host OS (i.e., in aseparate address space). The API (DLL) interface communicates with the VM using internal message-driven protocol as well. The separate process prl_disp_service.exe is executed on the VM. The same internal message-driven protocol is used between the VM and the VMM. The VMM using a Hypervisor can pass control commands to either a guest driver or a guest tool. In case of accessing a guest tool, the Host API (DLL) functionality is provided via OO/Functional interface. The process third_party_tool.exe is executed by the guest tool module. In case of accessing the guest device driver, the PCI Tools Gate API (a communication protocol between host virtual machine and guest operating system sandbox based on thePCI bus reads and writes. The PCI Tools Gate API is described here by way of example only, and is not intended to limit the present invention) is provided. Note that the PCI Tools Gate API is available on new platforms. The PCI Tools Gate API includesvideo card, shared folders, sliding mouse, custom resolution, time synchronization and coherence functionality. Those skilled in the art that the VM, in accordance with the exemplary embodiment, allows users to access any of the remote devices attached to remote computers. Data exchange between the users and remote devices is implemented over secureintelligent channel. As noted earlier, if the sender and receiver both know a priori that some commands normally used as part of the protocol of the channel are not needed, then those commands can be dropped on the sender side, or their order can berearranged, to optimize performance, or they can be grouped differently than the original grouping of commands. Also, if the memory or disk area being accessed is known to be about to be overwritten, there may be no point in transmitting the datainvolved (even though the hardware device itself may be unaware of this), or if there is no time to process the data (e.g., a video frame). With reference to FIG. 4, an exemplary system for implementing a client and a server according to the embodiments of the invention includes a general purpose computing device in the form of a computer or a server 20 or the like, including aprocessing unit 21, a system memory 22, and a system bus 23 that couples various system components including the system memory to the processing unit 21. The system bus 23 may be any of several types of bus structures including a memory bus or memorycontroller, a peripheral bus, and a local bus using any of a variety of bus architectures. The system memory includes read-only memory (ROM) 24 and random access memory (RAM) 25. A basic input/output system 26 (BIOS), containing the basic routines that help to transfer information between elements within the computer 20, such as during start-up, is stored in ROM 24. The computer/server 20 may further include a hard diskdrive 27 for reading from and writing to a hard disk, not shown, a magnetic disk drive 28 for reading from or writing to a removable magnetic disk 29, and an optical disk drive 30 for reading from or writing to a removable optical disk 31 such as aCD-ROM, DVD-ROM or other optical media. The hard disk drive 27, magnetic disk drive 28, and optical disk drive 30 are connected to the system bus 23 by a hard disk drive interface 32, a magnetic disk drive interface 33, and an optical drive interface 34, respectively. The drives andtheir associated computer-readable media provide non-volatile storage of computer readable instructions, data structures, program modules and other data for the computer/server 20. Although the exemplary environment described herein employs a hard disk, a removable magnetic disk 29 and a removable optical disk 31, it should be appreciated by those skilled in the art that other types of computer readable media that canstore data that is accessible by a computer, such as magnetic cassettes, flash memory cards, digital video disks, Bernoulli cartridges, random access memories (RAMs), read-only memories (ROMs) and the like may also be used in the exemplary operatingenvironment. A number of program modules may be stored on the hard disk, magnetic disk 29, optical disk 31, ROM 24 or RAM 25, including an operating system 35 (preferably Windows.TM. 2000). The computer 20 includes a file system 36 associated with orincluded within the operating system 35, such as the Windows NT.TM. File System (NTFS), one or more application programs 37, other program modules 38 and program data 39. A user may enter commands and information into the computer/server 20 through input devices such as a keyboard 40 and pointing device 42. Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner orthe like. These and other input devices are often connected to the processing unit 21 through a serial port interface 46 that is coupled to the system bus, but may be connected by other interfaces, such as a parallel port, game port or universal serialbus (USB). A monitor 47 or other type of display device is also connected to the system bus 23 via an interface, such as a video adapter 48. In addition to the monitor 47, personal computers typically include other peripheral output devices (notshown), such as speakers and printers. The computer 20 may operate in a networked environment using logical connections to one or more remote computers 49. The remote computer (or computers) 49 may be another personal computer, a server, a router, a network PC, a peer device orother common network node, and typically includes many or all of the elements described above relative to the computer/server 20, although only a memory storage device 50 has been illustrated. The logical connections include a local area network (LAN)51 and a wide area network (WAN) 52. Such networking environments are commonplace in offices, enterprise-wide computer networks, Intranets and the Internet. When used in a LAN networking environment, the computer/server 20 is connected to the local network 51 through a network interface or adapter 53. When used in a WAN networking environment, the computer/server 20 typically includes a modem 54 orother means for establishing communications over the wide area network 52, such as the Internet. The modem 54, which may be internal or external, is connected to the system bus 23 via the serial port interface 46. In a networked environment, programmodules depicted relative to the computer/server 20, or portions thereof, may be stored in the remote memory storage device. It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used. Having thus described the different embodiments of a system and method, it should be apparent to those skilled in the art that certain advantages of the described method and system have been achieved. In particular, it should be appreciated bythose skilled in the art that system and method described in the preferred embodiment, provide for remote access that is implemented at the device level over a Virtual Environment (such as a VM), and that a remote user controls tools and devicesconnected to the server (or the local clients of the server) and no devices drivers need to be installed on the client machine. It should also be appreciated that various modifications, adaptations, and alternative embodiments thereof may be made within the scope and spirit of the present invention. The invention is further defined by the following claims."
33|http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=94&p=2&f=G&l=50&d=PTXT&S1=(python.CLTX.+or+python.DCTX.)&OS=ACLM/python&RS=ACLM/python|Semantic neural network for aggregating query searches|A system, method and computer program product for implementation of a Aggregate Neural Semantic Network, which stores the relationships and semantic connections between the key search words for each user. The Aggregate Neural Semantic Network processes the search results produced by a standard search engine such as, for example, Google or Yahoo!. The set of hits produced by the standard search engine is processed by the Aggregate Neural Semantic Network, which selects the hits that are relevant to a particular user based on the previous search queries made by the user. The Aggregate Neural Semantic Network can also use the connections between the terms (i.e., key words) that are most frequently used by all of the previous Aggregate Neural Semantic Network users. The Aggregate Neural Semantic Network is constantly updating and self-teaching. The more user queries are processed by the Aggregate Neural Semantic Network, the more comprehensive processing of search engine outputs is provided by the Aggregate Neural Semantic Network to the subsequent user queries.|"1. A system for processing user search requests comprising: a memory; a processor configured to execute instructions stored on the memory; a semantic neural networkconfigured to create semantic connections between one or more of words, documents, and sentences; a session manager configured to process a user search query and provide the user search query to the semantic neural network; a user map module configuredto generate a user map of search terms based on a subset of the semantic neural network and provide the user map to the user such that the user can select relevant search terms from the user map of search terms, wherein the search terms are semanticallyrelated to the user search query; a search controller module configured to provide a plurality of search result documents corresponding to the selected relevant search terms, wherein the user can identify relevant documents from the plurality of searchresult documents; and a semantic neural network update module configured to update the semantic neural network according to at least one of the selected relevant search terms from the user map or the identified relevant documents selected by the user. 2. The system of claim 1, wherein the semantic neural network is implemented on a server. 3. The system of claim 1, wherein the user search query comprises keywords and/or categories. 4. The system of claim 1, wherein the search query comprises documents considered relevant by the user. 5. The system of claim 1, further comprising a web server configured to service the user search query, wherein the web-server is any of: a MS ITS server; Apache with PHP; NGINX; http/https server; a server with ASP, JS, JSP, Java, Peri orPython scripting; and a server with scripting that works with http/https protocols. 6. The system of claim 1, Wherein updating the semantic neural network comprises changing a relevance of neurons relative to each other in response to selection of the identified relevant documents by the user. 7. The system of claim 1, wherein the semantic neural network is a bidirectional network. 8. A method for processing user search requests comprising: receiving a search query from a user at a web server manager; processing the search query by a session manager and sending the search query to a neural network; generating, at a usermap module, a user map of search terms based on a subset of the neural network; providing the user map to the user such that the user can select relevant search terms from the user map, wherein the search terms are semantically related to the usersearch query; processing search terms selected by the user from the user map; providing, via a search controller module, one or more search result documents corresponding to the selected search terms to the user; receiving a selection of at least oneof the one or more search result documents from the user; and updating the neural network according to at least one of the selected relevant search terms from the user map or the at least one of the one or more search result documents selected by theuser. 9. The method of claim 8, wherein the neural network is implemented on a second server. 10. The method of claim 8, wherein the neural network is implemented on a server cluster. 11. The method of claim 10, wherein the search query is sent via a reverse proxy. 12. The method of claim 10, wherein the search query is sent via a secure connection. 13. The method of claim 8, wherein the search query comprises one or more of keywords and categories. 14. The method of claim 8, wherein the search query comprises documents identified as relevant by the user. 15. The method of claim 8, wherein updating the neural network comprises changing a relevance of neurons relative to each other in response to selection of the at least one of the one or more search result documents by the user. 16. A computer-readable storage medium having instructions stored thereon, the instructions comprising: instructions to receive a search query from a user; instructions to process the search query; instructions to send the search query to aneural network; instructions to generate a user map of search terms based on a subset of the neural network; instructions to provide the user map to the user such that the user can select relevant search terms from the user map, wherein the searchterms are semantically related to the user search query; instructions to process search terms selected by the user from the user map; instructions to provide to the user one or more search result documents corresponding to the selected search terms; instructions to receive a selection of at least one of the one or more search result documents from the user; and instructions to update the neural network according to at least one of the selected relevant search terms from the user map or the at leastone of the one or more search result documents selected by the user. 17. The system of claim 1, wherein the semantic neural network comprises semantic connections between the one or more of words, documents, and sentences based on aggregated semantic information generated from preferences of a plurality ofprevious users. 18. The method of claim 1, wherein the neural network comprises semantic connections between the one or more of words, documents, and sentences based on aggregated semantic information generated from preferences of a plurality of previoususers. 19. The method of claim 8, further comprising receiving a selection from the user of one or more of the search terms from the user map. Description CROSS-REFERENCE TO RELATED APPLICATIONS This application is a non-provisional of U.S. Provisional Patent Application No. 61/041,428; Filed: Apr. 1, 2008, entitled AGGREGATE NEURAL SEMANTIC NETWORK FOR AGGREGATING QUERY SEARCHES, which is incorporated by reference herein in itsentirety.BACKGROUND OF THE INVENTION 1. Field of the Invention The present invention relates to neural networks and, more particularly, to a Aggregate Neural Semantic Network for processing output of multiple search engines by selecting relevant search results based on user preferences from prior searchesand/or multiple searches. 2. Description of the Related Art The World Wide Web (""web"") contains a vast amount of information. Locating a desired portion of the information, however, can be challenging. This problem is compounded because the amount of information on the web and the number of new usersinexperienced at web searching are growing rapidly. Search engines typically return hyperlinks to web pages in which a user is interested. Generally, search engines base their determination of the user's interest on search terms (referred to as a search query) entered by the user. The goal ofthe search engine is to provide links to high quality, relevant results to the user based on the search query. Typically, the search engine accomplishes this by matching the terms in the search query to a corpus of pre-stored web pages. Web pages thatcontain the user's search terms are considered to be ""hits"" and are returned to the user. However, the hits typically contain a lot of irrelevant information. In an attempt to increase the relevancy and quality of the web pages returned to the user, a search engine may attempt to sort the list of hits so that the most relevant or highest quality pages are at the top of the list of hits returned to theuser. For example, the search engine may assign a rank or score to each hit, where the score is designed to correspond to the relevance or importance of the web page. However, determining appropriate scores for a particular user can be a difficult task. For one thing, the importance of a web page to the user is inherently subjective and depends on the user's interests, knowledge, and attitudes. There is,however, much that can be determined objectively about the relative importance of a web page. Conventional methods of determining relevance are based on the contents of the web page. More advanced techniques determine the importance of a web page basedon more than just the content of the web page. The overriding goal of a search engine is to return the most desirable set of links for any particular search query. Keyword generation is one of the aspects of providing search results and managing the search process. Keywords identify whatthe documents are ""about""--they may be words that are mentioned in the documents themselves, or they may be concepts that are related to the meaning of the document, and which capture, in one term or a phrase, the meaning of the document. The same words (i.e., terms) can mean different things or concepts to different users. Typically, the same search query will return the same set of results. However, while one user may include the word ""apple"" in the search query looking forinformation on Apple.TM. computers, another user may be simply interested in the apple fruits. Accordingly, there is a need in the art for an effective and efficient system and method for processing output of search engines by selecting most relevant search results based on accumulated user preferences.SUMMARY OF THE INVENTION Accordingly, the present invention is directed to an implementation of Aggregate Neural Semantic Networks for producing the search results based on accumulated user preferences that substantially obviates one or more of the disadvantages of therelated art. In one embodiment, there is provided a system, method and computer program product for implementation of an Aggregate Neural Semantic Network, which stores the relationships and semantic connections between the key words for each user. TheAggregate Neural Semantic Network processes the search results produced by a standard search engine such as, for example, Google or Yahoo!. The standard search engine returns the same or very similar set of hits for the same user query. This set ofhits contains a lot of irrelevant references. The set of hits produced by the standard search engine is processed by the Aggregate Neural Semantic Network, which selects the hits that are relevant to a particular user based on the previous search queries made by the user. It can also usethe semantic connections between the terms (i.e., key words) that are most frequently used by all of the previous Aggregate Neural Semantic Network users. Thus, the Aggregate Neural Semantic Network is constantly updating and self-teaching. The moreuser queries are processed by the Aggregate Neural Semantic Network, the more comprehensive processing of search engine outputs is provided by the Aggregate Neural Semantic Network to the subsequent user queries. The user query can include keywords, phrases, documents considered relevant by the user, categories (e.g., general field of the query) or combinations thereof. The Aggregate Neural Semantic Network gets updated based on a query that identifiesa plurality of documents considered relevant by a user. It also takes in account the documents considered relevant by other users who submitted the same or a similar query previously. Additional features and advantages of the invention will be set forth in the description that follows, and in part will be apparent from the description, or may be learned by practice of the invention. The advantages of the invention will berealized and attained by the structure particularly pointed out in the written description and claims hereof as well as the appended drawings. It is to be understood that both the foregoing general description and the following detailed description are exemplary and explanatory and are intended to provide further explanation of the invention as claimed. BRIEF DESCRIPTION OF THEATTACHED FIGURES The accompanying drawings, which are included to provide a further understanding of the invention and are incorporated in and constitute a part of this specification, illustrate embodiments of the invention and together with the descriptionserve to explain the principles of the invention. In the drawings: FIG. 1 illustrates system architecture for Aggregate Neural Semantic Network in accordance with an exemplary embodiment; FIG. 2 illustrates exemplary user maps produced by the Aggregate Neural Semantic Network; FIG. 3 illustrates an exemplary computer system on which the Aggregate Neural Semantic Network can be implemented.DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS Reference will now be made in detail to the embodiment of the present invention, example of which is illustrated in the accompanying drawings. In one embodiment, there is provided a system, method and computer program product for implementation of an Aggregate Neural Semantic Network which stores the semantics (i.e., relationships and connections between the query terms) for each user. The Aggregate Neural Semantic Network accumulates the particular subsets of the search results produced by a standard search engine such as, for example, Google or Yahoo!. The standard search engines usually return the same or very similar set of hitsfor the same user query. These hits contain many irrelevant references that need to be sorted out for the user. The set of hits produced by the standard search engine is processed by the Aggregate Neural Semantic Network, which selects the hits that are relevant to a particular user based on the previous search queries made by the user. It can also usethe semantic connections between the terms (i.e. key words) that have been most frequently used by all of the previous Aggregate Neural Semantic Network users. Thus, the Aggregate Neural Semantic Network accumulates a semantic data and updates itselfaccording to the semantic data produced by all of the Aggregate Neural Semantic Network users. The more user queries are processed by the Aggregate Neural Semantic Network, the more comprehensive processing of search engine outputs is provided by theAggregate Neural Semantic Network to the subsequent user queries. The user query can include keywords, phrases, documents considered relevant by the user, or combinations thereof. The Aggregate Neural Semantic Network gets updated based on a query that identifies a plurality of documents considered relevantby a user, and what is more important, it also takes in account the documents considered relevant by other users who made the same or a similar query previously. The Aggregate Neural Semantic Network, according to an exemplary embodiment, is based on a neural network that implements the logical connections between user query terms (i.e., key words). The functionality of the neural network is describedin detail in the co-pending U.S. patent application Ser. No. 11/468,048, entitled NEURAL NETWORK FOR ELECTRONIC SEARCH APPLICATIONS, filed on Aug. 29, 2006, which is incorporated herein by reference in its entirety. The Aggregate Neural Semantic Network, according to the exemplary embodiment, is based on a multi-layer neural network, where each layer consists of a set of neurons (i.e., query terms). The difficult problem of constantly ""teaching"" the neuralnetwork is solved by forming the coefficients of the semantic connections between the neurons. The neural network uses a single-cycle approach to change the value of the semantic coefficient of the connections. The Aggregate Neural Semantic Network can use neural networks with a certain topology that permits efficient and effectivesearching of documents. The neural networks, in one embodiment, permit searching of documents that takes into account the context of the search terms (i.e., keywords) and the ""meaning"" of the words, sentences, clusters of words, documents, and so forth. In one embodiment, the semantic network uses a set of neurons that are not connected to all other neurons on the same layer (or all other neurons on some other layer), but only to a subset of such neurons. Thus, a number of neurons used can bedramatically less than the total number of neurons in the network. Thus, in the present invention, the context of the search query is displayed to the user by displaying both the terms of the search query itself and additional terms that define the meaning of the query. In the example given above, the wordapple can have several meanings--for example, apple the fruit, Apple computer, Big Apple, etc. In the absence of additional terms that define the context of the word apple, the meaning of the apple is ambiguous--it can be any one of these meanings, aswell as several others. By displaying additional terms on the map, the user can further define the meaning, i.e., the context, of the query. The additional terms, therefore, help the user define ""what the query is about."" Also, the manner of display of the additionalterms (i.e., font, color, size, animation, font effects, etc., see also discussion in U.S. patent application Ser. No. 12/234,751, filed on Feb. 2, 2009, incorporated herein by reference; for discussion of visualization of the neural network and thekeywords, see U.S. patent application Ser. No. 12/327,422, filed on 03-DEC-2008, incorporated herein by reference, and for a discussion of the application of these ideas to advertising, see co-pending application Ser. No. 12/414,242, filed Mar. 30,2009, incorporated herein by reference) can help define the relevance of a particular additional terms to the query. Also, the location of the additional terms on a two or three dimensional map (if one is displayed to the user) helps the user understandthe relevance of the particular additional term to the term of the search query. In other words, the closer the particular additional term is to the ""meaning"" of the query, the more relevant that particular additional term is to the search query term at issue. Note that this is true not only of the situation where oneadditional term is displayed relative to some single search query term, but is also true of all the additional terms relative to all the search query terms. In other words, the relative position on the map (either in two or three dimensions) of theadditional terms illustrate their relevance to the context of the original search query. By selecting one or more additional displayed terms, the user can specify what he means by his query--in other words, if the user is searching for apple the fruit (or the meaning of his search query is related to apple the fruit, or apple juice,or similar products), he can select additional terms that relate to that concept, and deselect other terms (such as computer) that are irrelevant to his intended search query context. Extending this idea further, the question is, how is search query context defined? In the simplest case, the search query context can be defined based on a single search, and the additional terms displayed as such. In the more complex case, thecontext can be defined based on multiple queries, whether by the same user or by other users. The Aggregate Neural Semantic Network accumulates semantic data for each user session. A session semantic network is created for each user session, in other words, all of the semantic data produced by user searches performed during one sessionis accumulated into the session semantic network. The session semantic network is then integrated into the Aggregate Neural Semantic Network. Initially, the Aggregate Neural Semantic Network might not contain meaningful elements, but this changes with each user session. The more user sessions are performed, the more semantic information is accumulated in the Aggregate Neural SemanticNetwork. During the indexing process, each new word or search term is added to the word layer of the Aggregate Neural Semantic Network. Also, at the time that the new word is added, at least some semantic connections between that new word or searchterm, and the other neurons of the word layer and the neurons of other layers, can be identified. When the same new word is encountered again, the weights of the corresponding semantic connections, which represent how ""close"" the words are contextually(i.e., semantically) can be updated. For example, the weight of the semantic connection increases if the relationship between new word i and word j reoccurs in the document. Note that initially, if no query input is specified through the session semantic network, the Aggregate Neural Semantic Network can be viewed as containing the ""word"" neurons, and a set of semantic connections between them. A query inputprocessed by the session semantic network, asking what the documents are about, would generate a set of keywords that is essentially based on the frequency of occurrence of the words in the documents, and a general set of semantic connections between theword neurons. As the user query is propagated back and forth through the session semantic network, the keywords produced by the session semantic network will change, and new keywords may be added. After the session semantic network is integrated into theAggregate Neural Semantic Network, the semantic connections between the neurons of the Aggregate Neural Semantic Network also change. While these changes may not be that significant after just one user session, the Aggregate Neural Semantic Network canchange dramatically after a large number of user sessions, especially if the same or similar user preferences are exhibited. For example, if a hundred of users used the word ""apple"" in their queries and then proceeded to Apple.TM. computers, then thesemantic connection between words ""apple"" and ""computer"" will get stronger, while the semantic connection between, for example, words ""apple"" and ""juice"" will get weaker. System architecture for Aggregate Neural Semantic Network, in accordance with an exemplary embodiment, is illustrated in FIG. 1. The architecture for employment of the Aggregate Neural Semantic Network is implemented as multi-layerclient-server architecture. A remote PC user 101 sends a search query to a web-server 103. The reverse proxy 102 distributes the incoming search requests among backend web-servers 103. The backend web-servers can be MS IIS, they can be ASP serversthat use server-side ASP scripting and AJAX-enabled web pages or they can be servers implemented using COM objects that are invoked via ASP. The system can also use a separate Mega server that contains Aggregate Neural Semantic Network 107 and processesall requests from backend servers. Other web servers such as CGI and ISAPI can be used with Aggregate Neural Semantic Network 107 as well. A session manager module 104 processes and serves all search requests generated during one user session. The session manager 104 forwards the initial search requests to the Aggregate Neural Semantic Network 107 and to the search controller 109. The search controller 109 produce a list of processed URLs 111, and then a session semantic network 114. The Aggregate Neural Semantic Network 107 and the session semantic network 114 produce a user semantic network 106 (i.e., MegaNet), and the user mapis generated based on the user's search query. A user map generated by the user map module 105 provides a user map (via session manager 104) to user PC 101 where it is rendered to a user. The user moves around the user map by clicking on particularterms. After the user selects particular terms on the user map 105, the session manager 104 sends the request for the documents corresponding to the selected terms to a search controller module 109. The search controller module 109 forwards the request to a searcher module 110. The searcher module 110 receives web index corresponding to the search query terms from web index storage 119 and retrieves a cached document with a correspondingindex from document cache 115 that temporarily stores some previously retrieved documents. The cached documents are indexed by a standard indexer module 112. The search controller 109 also routes user request for the documents to a request/response controller module 117 which passes it on to a search engine crawler 116 for searching the web. The search results (i.e., documents) retrieved from theweb by the crawler 116 are indexed by the index scheduler module 118. The index scheduler module 118 is controlled by a system administrator. The index scheduler module 118 provides indexes to the web index storage 119. The crawler 116 also checks ifthe documents having the same index are already cached and can be retrieved from the document cache 115. The annotations retrieved from the document cache 115 and the annotations retrieved from the web are provided to the search controller 109 by thesearcher module 110. The search controller 109 resolves (i.e., processes) all annotations and provides a list of annotations 111 (i.e., processed URLs and some associated text) to a session semantic network 114. The session semantic network 114 provides the results of each user request to a user semantic network 106 that, in turn, provides these results to a user. The session semantic network 114 accumulates all user preferences (i.e., selectedrelevant document annotations), and sends them to the Aggregate Neural Semantic Network 107. Thus, the Aggregate Neural Semantic Network 107 gets updated (i.e., is taught) according to the user preferences exhibited during a particular session. Thesubsequent users (and/or the same user during a subsequent user session) get the aggregated semantic information from the Aggregate Neural Semantic Network 107 for the user semantic network 106, and the user map 105 is generated based on the preferencesof the previous users. The Aggregate Neural Semantic Network 107 can reach a very large volume and require a lot of resources, so it can be implemented on a separate computer system (i.e., a mega server or a heavy-duty server). The exemplary user maps produced by the Aggregate Neural Semantic Network) are illustrated in FIG. 2. The User 1 enters a search term ""apple"" and the Aggregate Neural Semantic Network generates a MegaNet from which a User 1 map is generated andpresented to the User 1. The User 1 map displays words like computer, cinema display, imac, mac, ipod, etc. in a dark font, indicating a strong semantic connection between the word ""apple"" and these terms. The words like juice, cider, fruit, etc. areshown in a lighter font, indicating a weaker semantic connection to the word ""apple."" In this example, the User 1 chooses words ""juice"" and ""fruit"" by clicking on them (user actions are shown by the circled arrows on the User 1 map) and the terms likecider, fruit cocktail, schnapps, etc., appear in the dark font on the User 1 map while the words like ipod, mac mini, computer, etc., appear now in lighter font. The User 1 preferences are integrated into the Aggregate Neural Semantic Network, whichproduces an updated MegaNet that displays all the related to the word ""apple"" terms in a dark font. Thus, the strength of the semantic connections between certain terms has been changed. Note that this is only an illustrative example, and in reality toproduce such significant changes in the MegaNet a number of users would have had to repeat or perform similar actions as the actions of the User 1. In the illustrated example, a User 2 also enters the search for the word ""apple"" and gets the updated (based on User's 1 input) MegaNet that contains all the related terms shown in dark font. Thus, the User 2 map generated also contains all theterms in dark font indicating the strength of the semantic connection of these terms to the word ""apple."" So FIG. 2 illustrates how the actions of the hypothetical User 1 have affected the Aggregate Neural Semantic Network and the user map generated fora subsequent User 2. It should be noted that the Aggregate Neural Semantic Network described herein is applicable to any collection of documents, regardless of where they are stored. For example, it is applicable to documents stored on the local hard drive, on acorporate network, or on the internet. Furthermore, the Aggregate Neural Semantic Network is highly scalable and is independent of the number of documents involved. In the case of a local hard drive, the documents at issue could be text files, wordprocessing files, email files, attachments to emails, databases, etc. An example of the computer system where the Aggregate Neural Semantic Network can be implemented is illustrated in FIG. 3. With reference to FIG. 3, an exemplary system for implementing the invention includes a general purpose computing devicein the form of a computer or server 20 or the like, including a processing unit 21, a system memory 22, and a system bus 23 that couples various system components including the system memory to the processing unit 21. The system bus 23 may be any ofseveral types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. The system memory includes read-only memory (ROM) 24 and random access memory (RAM) 25. A basicinput/output system 26 (BIOS), containing the basic routines that help to transfer information between elements within the personal computer 20, such as during start-up, is stored in ROM 24. The computer 20 may further include a hard disk drive 27 for reading from and writing to a hard disk, not shown, a magnetic disk drive 28 for reading from or writing to a removable magnetic disk 29, and an optical disk drive 30 for reading fromor writing to a removable optical disk 31 such as a CD-ROM, DVD-ROM or other optical media. The hard disk drive 27, magnetic disk drive 28, and optical disk drive 30 are connected to the system bus 23 by a hard disk drive interface 32, a magnetic diskdrive interface 33, and an optical drive interface 34, respectively. The drives and their associated computer-readable media provide non-volatile storage of computer readable instructions, data structures, program modules and other data for the personal computer 20. Although the exemplary environment describedherein employs a hard disk, a removable magnetic disk 29 and a removable optical disk 31, it should be appreciated by those skilled in the art that other types of computer readable media that can store data that is accessible by a computer, such asmagnetic cassettes, flash memory cards, digital video disks, Bernoulli cartridges, random access memories (RAMs), read-only memories (ROMs) and the like may also be used in the exemplary operating environment. A number of program modules may be stored on the hard disk, magnetic disk 29, optical disk 31, ROM 24 or RAM 25, including an operating system 35 (preferably Windows.TM. 2000). The computer 20 includes a file system 36 associated with orincluded within the operating system 35, such as the Windows NT.TM. File System (NTFS), one or more application programs 37, other program modules 38 and program data 39. A user may enter commands and information into the personal computer 20 throughinput devices such as a keyboard 40 and pointing device 42. Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner or the like. These and other input devices are often connected to the processing unit 21 through a serial port interface 46 that is coupled to the system bus, but may be connected by other interfaces, such as a parallel port, game port or universal serialbus (USB). A monitor 47 or other type of display device is also connected to the system bus 23 via an interface, such as a video adapter 48. In addition to the monitor 47, personal computers typically include other peripheral output devices (notshown), such as speakers and printers. The computer 20 may operate in a networked environment using logical connections to one or more remote computers 49. The remote computer (or computers) 49 may be another personal computer, a server, a router, a network PC, a peer device orother common network node, and typically includes many or all of the elements described above relative to the personal computer 20, although only a memory storage device 50 has been illustrated in FIG. 3. The logical connections depicted in FIG. 3include a local area network (LAN) 51 and a wide area network (WAN) 52. Such networking environments are commonplace in offices, enterprise-wide computer networks, Intranets and the Internet. When used in a LAN networking environment, the computer 20 is connected to the local network 51 through a network interface or adapter 53. When used in a WAN networking environment, the computer 20 typically includes a modem 54 or other meansfor establishing communications over the wide area network 52, such as the Internet. The modem 54, which may be internal or external, is connected to the system bus 23 via the serial port interface 46. In a networked environment, program modulesdepicted relative to the computer 20, or portions thereof, may be stored in a remote memory storage device. It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between thecomputers may be used. Having thus described a preferred embodiment, it should be apparent to those skilled in the art that certain advantages of the described method and apparatus have been achieved. It should also be appreciated that various modifications,adaptations, and alternative embodiments thereof may be made within the scope and spirit of the present invention. The invention is further defined by the following claims."
34|http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=98&p=2&f=G&l=50&d=PTXT&S1=(python.CLTX.+or+python.DCTX.)&OS=ACLM/python&RS=ACLM/python|Program system, and method and system arrangement for configuring it|A method and system arrangement are disclosed for configuring a program system. The method includes initializing binary program components of the program system and a source code interpreter for interpreting at least one source code event handler. Logical connections are set up between interfaces of the binary program components and interfaces of the interpreted source code event handler in order for events generated by the binary program components to be processed by the at least one source code event handler. A configuration file may also additionally be evaluated.|"1. A method for generating a software application, comprising: initializing, using a processor, binary program components of the software application, the binary programcomponents including binary code compiled from source code and configured to generate events, the binary program components configured to forward the events and configured to react to received events according to the binary code of the binary programcomponents; initializing, using the processor, a source code interpreter configured to interpret at least one source code event handler; and setting up, using the processor, logical connections between interfaces of the binary program components andinterfaces of the interpreted source code event handler to permit the generated events to be processed by the source code event handler where the source code event handler is configured to provide one or more functions in response to the generatedevents, wherein the logical connections between the interfaces of the binary program components and the interfaces of the interpreted source code event handler are changeable to adjust a functionality of the program system during runtime withoutmodifying the binary code of the binary program components, the logical connections are set up by configuring an event distributor, the event distributor configured to be embedded into the runtime environment, to receive the events from one or more ofthe binary program components and to redistribute the events to at least one of the source code interpreter, the at least one source code event handler and the binary program components, according to instructions of an editable configuration file; andevaluating the configuration file by a configuration binary program component running in a runtime environment, the configuration file maintaining a text-editable list of the binary program components, the source code event handlers, and the logicalconnection between and among the binary program components and the source code event handlers, the configuration file configured to change the logical connections between and among binary program components and source code event handlers of the softwareapplication to alter the application's functionality without amending source code. 2. The method of claim 1, wherein the logical connections are set up by configuring an event distributor according to the instructions of the editable configuration file. 3. The method as claimed in claim 2, wherein at least two of the parts including configuration binary program component, source code interpreter and event distributor are combined in a binary program component. 4. The method as claimed in claim 1, wherein at least two of the parts including configuration binary program component, source code interpreter and event distributor are combined in a binary program component. 5. The method as claimed in claim 1, wherein the configuration file is evaluated by the configuration binary program component when the program system is started. 6. The method as claimed in claim 1, wherein the configuration file is evaluated by the configuration binary program component at prescribed intervals of time during the execution of the program system. 7. The method as claimed in claim 1, wherein the source code interpreter is likewise a binary program component, executable in the same runtime environment as the binary program components. 8. The method as claimed in claim 1, wherein the source code event handler includes a script written in a script language. 9. The method as claimed in claim 8, wherein the script language is at least one of Javascript, Jscript.NET, VBScript, Perl, VBScript.NET, Python, Ruby, Tcl and C#. 10. The method as claimed in claim 1, wherein the configuration file is a plain text file with a prescribed syntax, that is evaluated by the configuration binary program component. 11. The method as claimed in claim 10, wherein the configuration file corresponds to the XML syntax. 12. A computer program, configured to, when executed on a computer, cause the computer to carry out the method as claimed in claim 1. 13. A computer program product, including the computer program of claim 12. 14. A computer readable medium, configured to, when run on a computer, cause the computer to carry out the method as claimed in claim 1. 15. The method of claim 1, wherein the logical connections are defined in the configuration file to connect each generated event with a method for handling each generated event. 16. A system arrangement of a medical imaging device for generating a program system, comprising: at least one source code interpreter, including a first processor of a computer device of the medical imaging device, configured to interpret atleast one source code event handler; a runtime environment module, including a second processor of the computer device of the medical imaging device, configured to initialize and execute binary program components for the program system and to executethe at least one source code interpreter, the binary program components including binary code compiled from source code and configured to generate events, the binary program components configured to forward the events and configured to react to receivedevents according to the binary code of the binary program components; and at least one connection apparatus, including a third processor of the computer device of the medical imaging device, configured to set up logical connections between interfaces ofthe binary program components and interfaces of the interpreted source code event handler, in order for the events generated by the binary program components to be processed by at least one source code event handler, where the source code event handleris configured to provide one or more functions in response to the generated events, wherein the logical connections between the interfaces of the binary program components and the interfaces of the interpreted source code event handler are changeable toadjust a functionality of the program system during runtime without modifying the binary code of the binary program components, the logical connections are set up by configuring an event distributor, the event distributor configured to receive the eventsfrom one or more of the binary program components and configured to redistribute the events to at least one of the source code interpreter, the at least one source code event handler and the binary program components, according to instructions of aneditable configuration file, and the connection apparatus further includes a configuration binary program component, including a fourth processor of the computing device of the medical imaging device, for evaluating a configuration file, theconfiguration file maintaining a text-editable list of the binary program components, the source code event handlers, and the logical connection between and among the binary components and the source code event handlers, the configuration file configuredto change the logical connections between and among binary program components and source code event handlers. 17. The system arrangement as claimed in claim 16, wherein the source code interpreter is likewise a binary program component, executable in the same runtime environment as the binary program components. 18. The system arrangement as claimed in claim 16, wherein the source code event handler includes a script written in a script language. 19. The system arrangement as claimed in claim 18, wherein the script language is at least one of Javascript, Jscript.NET, VBScript, Perl, VBScript.NET, Python, Ruby, Tcl and C#. 20. The system arrangement as claimed in claim 16 wherein the configuration file is a plain text file with a prescribed syntax, that is evaluated by the configuration binary program component. 21. The system arrangement as claimed in claim 20, wherein the configuration file corresponds to the XML syntax. 22. The system arrangement of claim 16, wherein the logical connection provides a name for the source code event handler that corresponds to each generated event, and a name for a one of a plurality of methods of the source code event handlerthat implements source code based on each generated event. 23. A framework system arrangement of a medical imaging device, the frame system arrangement comprising: a plurality of binary program components, including a first processor of a computer device of the medical imaging device, the binaryprogram components including binary code compiled from source code and configured to, even during execution, at least one of receive and generate events via logical connecting paths and to output said events via interfaces, the binary program componentsconfigured to forward the events and configured to react to received events according to the binary code of the binary program components; at least one interpreted source code event handler, including a second processor of the computer device of themedical imaging device, configured to handle the events received via the logical connecting paths, the at least one source code event handler being interpreted by a source code interpreter at least one of at the runtime and at the starting time of theprogram system, and the binary program components and at least one interpreted source code event handler being executable in a runtime environment, where the source code event handler is configured to provide one or more functions in response to thegenerated events, wherein the logical connecting paths between the plurality of binary program components and the interpreted source code event handler are changeable to adjust a functionality of the program system during runtime without modifying thebinary code of the binary program components, and the logical connecting paths are set up by configuring an event distributor, the event distributor configured to be embedded into the runtime environment, to receive the events from one or more of thebinary program components and to redistribute the events to at least one of the source code interpreter, the at least one source code event handler and the binary program components, according to instructions of an editable configuration file; and aconfiguration binary program component, including a third processor of a computer device of the medical imaging device, to set up logical, directional connecting paths between interfaces of the binary program components and interfaces of the source codeevent handlers using the evaluated editable configuration file, the configuration file maintaining a text-editable list of the binary program components, the source code event handlers, and the logical connection between and among the binary componentsand the source code event handlers, the configuration file configured to change the logical connections between and among binary components and source code event handlers of the program system to alter the program's functionality without amending sourcecode. 24. The framework system arrangement as claimed in claim 23, wherein the source code event handler outputs results as its reaction to received events as result events to binary program components. 25. The frame system arrangement of claim 23, wherein the logical connecting paths are defined in the editable configuration file as a block of editable text that designates a source code event handler and a method of the source code eventhandler that is implemented when each event is generated. 26. A system arrangement of a medical imaging system for generating a program system, comprising: at least one source code interpreter means, including a first processor of a computing means of the medical imaging device, for interpreting atleast one source code event handler; runtime means, including a second processor of the computing means of the medical imaging device, for initializing and executing binary program components for the program system and for executing the at least onesource code interpreter means, the binary program components including binary code compiled from source code and configured to generate events, the binary program components configured to forward the events and configured to react to received eventsaccording to the binary code of the binary program components; and at least one connection means, including a third processor of the computing means of the medical imaging device, for setting up logical connections between interfaces of the binaryprogram components and interfaces of the interpreted source code event handler in order for the events generated by the binary program components to be processed by at least one source code event handler where the source code event handler is configuredto provide one or more functions in response to the generated events, wherein the logical connections between the interfaces of the binary program components and the interfaces of the interpreted source code event handler are changeable to adjust afunctionality of the program system during runtime without modifying the binary code of the binary program components; and the logical connections are set up by configuring an event distributor, the event distributor configured to be embedded into theruntime environment, to receive the events from one or more of the binary program components and to redistribute the events to at least one of the source code interpreter, the at least one source code event handler and the binary program components,according to instructions of an editable configuration file; and at least one configuration binary program component means, including a fourth processor of the computing means of the medical imaging device, for setting up logical, directional connectingpaths between interfaces of the binary program components and interfaces of the source code event handlers using an evaluated configuration file, the configuration file maintaining a text-editable list of the binary program components, the source codeevent handlers, and the logical connection between and among the binary components and the source code event handlers, the configuration file configured to provide means to change the logical connections between and among binary program components andsource code event handlers of the program system to alter the program's functionality without amending source code. 27. The system arrangement of claim 26, wherein the connection means are instructions in the editable configuration file to match the events generated by the one or more binary components to the source code event handler and a method of thesource code event handler. Description FIELD The present invention is generally directed to a method and/or a system arrangement for configuring a program system composed from binary program components and interpreted event handlers and at the program system.BACKGROUND The present state of the software art is distinguished in that generally different applications are programmed on the basis of existing software frameworks. There are likewise expansion opportunities for existing frameworks. A paradigm for producing programs is what is known as component-based programming, in which--in similar fashion to in the case of object-oriented programming--a program is created from self-contained entities. In contrast to object-orientedprogramming, however, the components are provided by suppliers and are already compiled program elements, which are therefore in binary form, of which the respective programmer knows only the interface definitions for interaction with other components. Expansions to frameworks are generally binary, particularly in the case of components, which means that a binary module created in accordance with the rules of the expanded framework needs to be generated and connected in order to be able to expand theframework as a whole. A program system within the meaning of the present description is to be understood to include an integral program which includes a plurality of program elements and in which the individual program elements, for example components etc., areconnected to one another by software interfaces in order to allow them to interact. Typically, an application includes a series of such interacting components. If the components of an application or a program system are logically connected to oneanother, it is impossible to adapt the connections to the changing demands for the program system without changing the source code of the program system and then having to recompile it. In the event of demand changes, the program system had to be adapted and retranslated in the source text, which was impossible without access to the source code of the program system or of the components which needed to be changed. By way ofexample, if a display program for visual elements in a particular format is also suitable for displaying visual elements in another format, which means that an NMR application is also suitable for displaying AX images, for example, but requires certainadaptation in order to display the other display formats, it has not been possible to date to alter the program if the source text was not available, which was generally the case. It was therefore necessary to program a completely new display for thenew visual data. In object-oriented systems, in which the elements are not ""linked"" until during the program system's runtime, it is possible to replace objects with other objects having other, for example expanded, capabilities while program starting is stillin progress. In this way, it is possible to influence the behavior of an application to the extent that the object-internal behavior of individual objects is affected. Even in the case of such an object-oriented system with linking at the programstarting time (or even not until the program is running), however, it is not possible to change the interaction between various objects without knowledge of the source text. Object-oriented and component-oriented program systems are most usually event-driven. Thus, the individual components or objects of a program system when the program system is being executed can generate ""events"" which are sent via one or moreevent queues to other objects, prescribed by the programming, at which point the data linked to the event are processed further in line with the type of event. The forwarding of the events has a permanent link within the context of application creation,as described above. It is not possible to influence the reaction of event handlers to the events sent to them either, since these too are created and compiled using the programming tools available. This in turn applies particularly to the reciprocalreaction of the event handlers, which generate new events and forward them to other objects or components of a program system. To actually be able to change the behavior of such a program system, it would be necessary to be able to alter the distribution of the events, i.e. the connection between the individual interfaces which are present, and also the reaction of theevent handlers.SUMMARY It is an object of an embodiment of the present invention to provide an appropriate system to allow alteration of the application using the components or of the program system even without knowledge of the source code of the components used. At least one embodiment of the invention may achieve an object by providing a method for configuring the program system, by use of a system arrangement for configuring a program system and/or by use of a framework system arrangement. At least one embodiment of the invention includes an idea of making the actual form of the event handlers and possibly the linking of components to the event handlers easily configurable and retrospectively adaptable. At least one embodiment of the invention is therefore first of all directed at a method for configuring a program system which has the following steps: binary program components of the program system, which are intended to generate events, areinitialized; a source code interpreter which interprets at least one source code event handler is initialized; and logical connections are set up between interfaces of the binary program components and interfaces of the interpreted source code eventhandler in order for events to be processed by at least one source code event handler. In this context, a program system is to be understood to be an executable computer program which includes a plurality of isolated components interacting via interfaces. A runtime environment is to be understood to be the entire program codethat is provided by an operating system in order to allow programs of a particular style to be executed. It includes not only system function calls (system calls) but also libraries specific to a particular programming environment etc., and contains, inprinciple, all precautions which are required in order to allow the program system to be executed on the chosen data processing installation. Binary program components are to be understood to be component-type parts of a program which have beencompiled, i.e. transformed into a binary form which can be executed by the processor used, using a compiler before the program is actually started. These include classical components and objects and also novel variations of these constructs. An event handler may include a program or subprogram which is used to handle an event sent by another component and possibly to output a result, e.g. a result event. A source code interpreter may include a program, a program section or aprogram component, for example a further binary program component, which is able to interpret a source code, to execute the instructions contained in the source code successively and to convert them directly into binary instructions, this operation beingperformed, in contrast to compilation, step by step whenever the source code program is executed. Classical examples of interpreted programs are programs written in the programming language ""BASIC"" or scripts written in script languages. Within the context of embodiments of the invention, a source code interpreter is also intended to include a program which is able to produce a binary program from a source code file in one pass when said source code file is called, provided thatthis program production involves renewed performance whenever the source code file is called and there is no value placed on the result of the interpretation being the generation of a program which can be executed independently in the runtimeenvironment. An interface is understood to include a software-based construct which uses a predefined mechanism to allow information to be interchanged between two components, objects or programs. In the present example case, the information interchangedincludes events, with an event including at least an identifier for the type of event, possibly meta-information and possibly data relating to the event. Events can be generated in reaction to particular incidents, which may arise either on the hardware(keyboard key pressed, mouse clicked, a buffer in the serial interface filled etc.) or within a component (execution of a subfunction, detection of a limit value within an algorithm, error condition etc.). In one particular example embodiment of the invention, the method involves a configuration file being evaluated by a configuration binary program component running in a runtime environment, with the configuration file containing informationabout the binary program components, the at least one source code event handler and their logical connections to one another. A configuration file within the meaning of at least one embodiment of the present invention includes a file which contains information, in an editable--that is to say plain text--form, about what binary program components and source code eventhandlers form the program system and how these are to be connected to one another in order to allow events to be interchanged. The inventive method of at least one embodiment now allows a large degree of intervention in the functionality of a program system by virtue of both the way in which events are handled, dealt with, processed or answered by the program systembeing contained in an easily editable source text format in the system and optionally the interaction of the individual components of the program system being contained in an easily editable configuration file. Hence, the very aspects of a programsystem for which practice-related changes ought to occur most frequently of a simple adaptation are possible even without knowledge of a source code for the individual program components. Expressed another way, the entire logical interconnection of the program components forming the program system is configured, and set up in the runtime environment, only at the program's runtime, preferably when the program starts. The logical connections may be set up, for example, by configuring an event distributor whose task is to receive events centrally and to use a distribution table or the like to forward them to the previously assigned event handlers. The eventdistributor may be the distributor normally used in the runtime environment or a special distributor incorporated into the program system (for example by a further program component). The new components including configuration binary program component, source code interpreter and event distributor, which the invention provides, may be components which are separate from one another or may at least to some extent be combinedinto a single component which, by way of example, is then able both to read the configuration file and to execute the scripts and possibly even to forward the events. It is thus conceivable that all the binary components involved forward their eventsautomatically to the inventive new component and that the latter performs distribution to the individual event handlers. The evaluation of the configuration file for program components and event handlers to be linked by the configuration binary program component may be done, for example, when the program system is started. In an alternative embodiment, theconfiguration file may be evaluated by the configuration binary program component at prescribed intervals of time during the execution of the program system. While the first of the two possible variants for evaluating the configuration file improves theperformance of the program system, since appropriate configuration of the components needs to be performed only once, the more complex, more involved and slower second variant allows intervention even into running program systems, for example in the caseof applications which need to run at all times and cannot be turned off. In certain embodiments of the invention, the source code interpreter is likewise a binary program component which is able to be executed in the same runtime environment as the binary program components. This measure is used for the integrationof the integral system, since mechanisms for interchanging information between components already exist within a runtime environment and hence do not have to be reimplemented specifically for embodiments of the present invention. The source code interpreter may be a commercially available interpreter which is encased by relevant additions such that it can be executed autarkly in the runtime environment and so as to make a connection to the other program components. Toimplement the source code event handlers, it is possible to use languages adapted to the runtime environment. Full programming languages can be used which are interpreted, such as BASIC or FORTH, but preferably script languages which are easy to programand are normally contained in modern runtime environments or are incorporated by third parties. Accordingly, the source code of the event handler is a script written in a script language. Possible script languages may be Javascript, Jscript.NET,VBScript, Perl, VBScript.NET, Python, Ruby, Tcl, C# and the like, for example. The configuration file is preferably a plain text file with a prescribed syntax which can be evaluated by the configuration binary program component. In this case too, it is appropriate to resort to already existing models in order to minimizethe program involvement for implementing embodiments of the present invention. It may thus be possible, for example, to use file browsers which already exist on the market, for example browsers for ""markup languages"", such as SGML or XML. Accordingly,the configuration file is a file which needs to obey the XML syntax. To implement the invention, it is possible to use a standard XML browser, to which a document type definition or the like is in turn equated which stipulates the interpretation of theXML data in the configuration file. At least one embodiment of the invention is also directed at a system for generating a program system. All that has been said in relation to embodiments of the inventive method also applies mutatis mutandis to the system and vice versa, so thatreciprocal reference is made. At least one embodiment of the invention is therefore directed at a system for generating the program system which has: a source code interpreter for interpreting at least one source code event handler; a runtime environment for initializing andexecuting binary program components for the program system; and for executing the source code interpreter, and an apparatus for setting up logical connections between interfaces of the binary program components and interfaces of the interpreted sourcecode event handler in order for events generated by the binary program components to be processed by at least one source code event handler. The conceptualities correspond to what has already been explained above. Embodiments of the inventive system may be characterized in that the connection apparatus has a configuration binary program component for evaluating a configuration file which contains information about the binary program components of theprogram system which is to be generated, about at least one source code event handler for the program system and about their connection to one another. As can be seen, embodiments of the inventive system has great store set by the various components being executable in a common runtime environment. This allows the individual parts, for example the binary program components, of the XML browserand the component with the script interpreter to be integrated. As explained previously, the source code interpreter is preferably a binary program component which runs in the same runtime environment as the binary program components, and the sourcecode event handler is preferably a script written in a script language, for example Javascript, Jscript.NET, VBScript, Perl, VBScript.NET, Python, Ruby, Tcl or C# etc. The configuration file is in turn preferably a plain text file with a prescribed syntax which can be evaluated by the configuration binary program component, for example an XML syntax. Finally, at least one embodiment of the invention is directed at a program system which is created using the above mechanisms and which has: a plurality of binary program components which can generate events during execution and can output themto the outside via interfaces; at least one interpreted source code event handler which is intended to handle events received from at least one of the binary program components via logical connecting paths, where the source code event handler isinterpreted by a source code interpreter at the runtime and/or at the starting time of the program system, and where the binary program components and at least one interpreted source code event handler are intended to be executed in a runtimeenvironment. In one example embodiment, the interpreted source code event handler is intended to output results of the reaction to received events as result events to binary program components. This provides a return channel which allows not only events tobe sent to the appropriate event handlers but also, conversely, the event handlers to generate new events or other operations, which in turn can be sent to other binary program components, as the result of their event handling. It is thus possible, byway of example, when a particular calculation event occurs, to allow the event handler to handle the event, this then needing to be displayed in a display program component, to which end the event is sent with the results of the calculation to thisdisplay component. The program system may also include a configuration binary program component which is intended to set up logical, directional connecting paths between interfaces of the binary program components and interfaces of the event handlers using theevaluated configuration file. The purpose of the configuration binary program component has already been explained above. The connecting paths between the interfaces are to be regarded as program-based or logical connecting paths and not as physicalones. They are directional because information flows in one particular direction, it being entirely conceivable for a binary program component which exists in the system both to output data to an event handler and to receive data which the latter has inturn handled as a result event. As explained, the configuration file is usually evaluated when the program system starts. Hence, the configuration binary program component does not in the strict sense need to be part of the configured program system, since it would no longerbe required for executing the program system at runtime. If intervention is also required during program execution, however, the configuration binary program component needs to be part of the program system in order to be able to reevaluate theconfiguration file dynamically at prescribed intervals of time and to be able to readapt the connecting paths as appropriate. As already stated in relation to the method, the source code interpreter may in one example embodiment likewise be a binaryprogram component which is able to be executed in the same runtime environment as the binary program components. The source code event handler may be a script written in a script language, for example in Javascript, Jscript.NET, VBScript, Perl, VBScript.NET, Python, Ruby, Tcl, C# etc. The configuration file used in line with at least one embodiment of theinvention may be, for example, a plain text file with a prescribed syntax which can be evaluated in the configuration binary program component, for example an XML syntax. The introduction of at least one component which encapsulates the interactions among other components localizes these interactions. It is also possible to specify the interactions in a script language. Adaptation of the script code allows thebehavior of the application to be adapted without having the source code of the entire application available. In addition, it is possible to expand the application by configuring the components and to interchange its components. At least one embodiment of the inventive system and/or method can be used to construct applications (program systems) whose business logic can be expanded, interchanged and even adapted. The wiring of the components of an application can bealtered flexibly from the outside by using a script. It is thus easily possible to adapt an application, for example an application in the field of medical technology, to the circumstances of its use without needing to alter the source code of theapplication. Embodiments of the inventive method described above and/or the systems may be in the form of a computer program product, in particular, with a computer-readable medium and a computer program and associated program code, with the computer beingprompted to perform the inventive method described above on the basis of data from the computer program, that is to say from the program system. An alternative way of achieving an object provides a storage medium which is intended to store the computer-implemented method or system described above and which can be read by a computer. Further advantageous refinements, aspects and details of the present invention can be found in the detailed description and in the appended drawings. BRIEF DESCRIPTION OF THE DRAWINGS The detailed description of the figures which follows discusses example embodiments (which are not to be understood as restrictive) with their features and further advantages with reference to the drawing figures, in which: FIG. 1 shows an overview representation of a system for generating a program system, including the program system which is to be generated.DETAILED DESCRIPTION OF THE EXAMPLE EMBODIMENTS FIG. 1 shows a schematic illustration of a program system 2 embedded in a runtime environment 1. The program system includes a series of binary program components 3. These software components 3 are binary, i.e. already compiled, and can bepurchased complete by the supplier of the runtime environment or by further manufacturers, but may also be programmed independently, according to need. A source code interpreter 4 executes event handlers 5 written in a script language or in anothersuitable interpretable language. In addition, an event distributor 6 is required which embeds into the runtime environment and/or into the program system and which forwards events generated by the components to the outputs 7 via logical connecting paths8, 9, 10 for example to the interpreting component 4, which then passes them to the scripts. It is also possible to implement at least one embodiment of the invention such that the events are forwarded logically directly to the scripts (cf. arrow 8). The connection 11 shows that by configuring the system it is also possible to set upconnections between binary program components 3. As element 12 shows, it is likewise possible for the events to be returned from events back to the same or other binary program components 3, where they are processed further. This achieves linking andalso handling of the events on the individual components in the inventive program system using the mediator point for the scripts. FIG. 1 also shows those components of the inventive system for configuring an operating system which need to be additionally added in order to configure the program system. It shows a configuration binary component 13 which reads in aconfiguration file 14 and uses the information contained in the latter to call the required binary components, this being able to be done via connection 15 and using ordinary calls in the runtime environment, for example. Likewise, connection 16 is usedto configure the distributor 6 in line with the stipulations such that the correct connections for the events can be set up between the components and the event handlers. Finally, connection 17 is used to call the necessary event handlers. It goeswithout saying that the illustration is highly schematic in order to clarify the basic principles of the present invention, but it is assumed that the information presented here allows the person skilled in the art to implement at least one embodiment ofthe invention for specific runtime environments, operating systems, programming languages and development environments without any further action. The system may include an XML specification in the form of a configuration file from components of the program system, as the listing below shows: TABLE-US-00001 <BUSINESS_FORM LOGID=""FORM1""> <BUSINESS_COMPONENT LOGID=""VIEWING"" TYPE=""MyComponents.BusinessComponent.Viewing"" ASSEMBLY=""\Projects\ MyCompo- nents.BusinessComponent.Viewing.dll""> <BUSINESS_OBJECTLOGID=""ViewingLayout"" TYPE=""MyComponents.BusinessObject.ViewingLayout"" ASSEMBLY=""\Projects\MyCompo- nents.BusinessObject.ViewingLayout.dll""> <INTERFACES> <INTERFACE TYPE=""ILayout""/> </INTERFACES> </BUSINESS_OBJECT></BUSINESS_COMPONENT> <BUSINESS_COMPONENT LOGID=""FUSION"" TYPE="" MyComponents.BusinessComponent.Fusion"" ASSEMBLY=""\Projects\ MyCompo- nents.BusinessComponent.Fusion.dll""> <BUSINESS_OBJECT LOGID=""FusionAlgorithm"" TYPE=""MyComponents.BusinessObject.FusionAlgorithm"" ASSEMBLY=""\Projects\ MyComponents.BusinessObject. FusionAlgorithm.dll""> <INTERFACES> <INTERFACE TYPE=""IFusion""/> </INTERFACES> </BUSINESS_OBJECT> </BUSINESS_COMPONENT><CONNECTION> <EVENTHANDLER LOGNAME=""DrawingHandler"" PROGID=""MyComponents.EventHandler.Drawing, \Projects\MyComponents. EventHandler.Drawing.js"" INITMETHOD=""Init"" /> <EVENTHANDLER LOGNAME=""ComputingHandler"" PROGID=""MyComponents.EventHandler.Computing, \Projects\MyComponents. EventHandler.Computing.js"" INITMETHOD=""Init"" /> <EVENT LOGNAME=""VIEWING "" EVENTMETHOD=""DrawGraphics""> <SUBSCRIPTION LOGNAME=""DrawingHandler"" HANDLERMETHOD=""Draw""/></EVENT> <EVENT LOGNAME=""FUSION"" EVENTMETHOD=""FuseImages""> <SUBSCRIPTION LOGNAME=""ComputingHandler"" HANDLERMETHOD=""Compute""/> </EVENT> </CONNECTION> </BUSINESS_FORM> The listing shows an example specification of the components of an application and of the association with event handlers. The file specifies two ""business components"", namely first the business component ""Viewing"", which is used to displayobjects, and secondly the business component ""Fusion"", which fuses files. This business component is implemented using the dynamic link library ""MyComponents.Businesscomponent.viewing.dll"", whereas the ""Fusion"" component is implemented using the dynamiclink library ""MyComponents.Businesscomponent.fusion.dll"". The individual subsections also define specific business objects which are to be used, and also define interfaces. The section with the ""Connection"" tag defines two event handlers, namely a drawing handler and a computing handler. The ""Event""tag then makes the actual links. As can be seen from the listing, the occurrence of a ""Draw Graphics"" event on the ""Viewing"" component prompts the event to be forwarded to the ""Drawing Handler"" event handler, with the ""Draw"" method being intended to beused within the handler. Similarly, the occurrence of the ""Fuse Images"" event on the ""Fusion"" business component prompts the ""Computing Handler"" event handler to be called with the ""Compute"" method. The implementation of this functionality using an XML file makes it an extremely simple matter to alter these associations which have been made as required. An event handler provides a series of functions which are called automatically upon particular events. In this context, the event handler is preferably written in a script language, such as Jscript, VBScript or in NET corresponding toJscript.NET, VB.NET or C#. The advantage of a script language is that the script is interpreted at the runtime and therefore can still be attached following delivery of the system. The listing below illustrates an event handler in Jscript.NET: import System; package MyComponents.EventHandler TABLE-US-00002 { public class Computing { var MyBusinessComponents; public function Init(parent : Object) : void { myBusinessComponents=parent.GetBusinessComponents( ); } public function Compute(sender : Object, e :EventArgs) : void { //Computea fusion ... var Fused_Image_DB_ID = ""4711""; //access the Drawing Business component to display //the fused image myBusinessCompo- nents[""VIEWING""].Display(Fused_Image_DB_ID); } } This case involves an event handler from the ""MyComponents.Event-Handler"" packet, specifically as illustrated by ""Public Class"", the ""Computing"" event handler, which has already been called Computing Handler in the first listing and to whichreference has been made by the corresponding ""My Components.eventhandler.computing"" progID. First of all, the INIT( ) function of the event handler is called, and there the handler can obtain access to the components which are connected to it. Next,the compute function is called if the ""Fusion"" component is generating the ""fusion image"" event, cf. the first listing. In the function itself, the fusion is performed and the database ID from the fused image is transferred to the ""Viewing"" componentfor display. An event handler provides access to all configured components. Thus, they can be connected in the script. Accordingly, the wiring of the components can be flexibly adapted without modifying the source code of the actual components, so that thefunction logic of a program system, i.e. an application, can be adapted. To be able to expand this function logic, new components can be configured into the program system during configuration. However, it is likewise possible to add new components to the script code at runtime. If required, the components in thescript which are added at runtime can be refreshed further, i.e. the function logic can be expanded either statically through configuration or dynamically by calling particular methods in the script. To be able to make such dynamic expansions, thescript provides handling. The actual function logic can also be replaced. This can be achieved by virtue of particular components in the configuration file being interchanged. By way of example, a component for displaying the medical images of a particular type (e.g.MR--magnetic resonance) can be replaced by another component for displaying the images of another type (e.g. CT--computer tomography). However, it is possible for both components CT and MR to be configured and used simultaneously in the script. Any of the aforementioned methods may be embodied in the form of a system or device, including, but not limited to, any of the structure for performing the methodology illustrated in the drawings. Further, any of the aforementioned methods may be embodied in the form of a program. The program may be stored on a computer readable media and is adapted to perform any one of the aforementioned methods when run on a computer device (a deviceincluding a processor). Thus, the storage medium or computer readable medium, is adapted to store information and is adapted to interact with a data processing facility or computer device to perform the method of any of the above mentioned embodiments. The storage medium may be a built-in medium installed inside a computer device main body or a removable medium arranged so that it can be separated from the computer device main body. Examples of the built-in medium include, but are not limitedto, rewriteable non-volatile memories, such as ROMs and flash memories, and hard disks. Examples of the removable medium include, but are not limited to, optical storage media such as CD-ROMs and DVDs; magneto-optical storage media, such as MOs;magnetism storage media, such as floppy disks (trademark), cassette tapes, and removable hard disks; media with a built-in rewriteable non-volatile memory, such as memory cards; and media with a built-in ROM, such as ROM cassettes. Example embodiments being thus described, it will be obvious that the same may be varied in many ways. Such variations are not to be regarded as a departure from the spirit and scope of the present invention, and all such modifications as wouldbe obvious to one skilled in the art are intended to be included within the scope of the following claims."
35|http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=82&p=2&f=G&l=50&d=PTXT&S1=(python.CLTX.+or+python.DCTX.)&OS=ACLM/python&RS=ACLM/python|Method and system for simplifying distributed server management|"A method and system for managing a large number of servers and their server components distributed throughout a heterogeneous computing environment is provided. In one embodiment, an authenticated user, such as a IT system administrator, can securely and simultaneously control and configure multiple servers, supporting different operating systems, through a ""virtual server."" A virtual server is an abstract model representing a collection of actual target servers. To represent multiple physical servers as one virtual server, abstract system calls that extend execution of operating-system-specific system calls to multiple servers, regardless of their supported operating systems, are used. A virtual server is implemented by a virtual server client and a collection of virtual server agents associated with a collection of actual servers."|"1. A method for receiving and executing, on one of a plurality of servers, a system call from a software application program, the method comprising the steps of: (a)providing a representation of a plurality of servers as a single virtual server, the representation of the single virtual server implemented by a virtual server client and a plurality of virtual server agents, at least one virtual server agent running oneach one of the plurality of servers; (b) receiving, by the virtual server client from a client-side software application program, an abstract system call that requests a service from an operating system of at least one of the plurality of servers, theabstract system call generated by the client-side software application program in response to a command and with indifference to the operating system used by the at least one server; and (c) instantiating in a thread-safe manner the abstract system callby: identifying, by the virtual server client, a target server to receive the abstract system call and a corresponding virtual server agent associated with the target server; transmitting the abstract system call to the identified agent for translationof the abstract system call into an operating system-specific system call for execution on the target server; mapping a user identity for a user of the client-side software application program to an associated local user identity for the target server; authorizing the abstract system call for the mapped local user identity based on at least one of role-based access control model and an access control list; executing the operating system-specific system call using the mapped local user identity on thetarget server; and receiving execution results from the virtual server agent. 2. The method of claim 1, wherein at least two of the plurality of servers have different operating systems. 3. The method of claim 1 further comprising the step of aggregating the abstract system call and a second abstract system call into a high-level abstract system call. 4. The method of claim 3 further comprising the steps of (i) receiving, by the virtual server client, the high-level abstract system call; (ii) disintegrating, by the virtual server client, the high-level abstract system call into the abstractsystem call and the second abstract system call; and (iii) instantiating in a thread-safe manner each of the abstract system call and the second abstract system call. 5. The method of claim 3 further comprising the steps of: (i) receiving, by the virtual server client, the high-level abstract system call; and (ii) instantiating in a thread-safe manner the high-level abstract system call. 6. The method of claim 1, wherein the virtual server client is implemented by a network-aware code library. 7. The method of claim 6, wherein the network-aware code comprises a network-aware version of a libc library. 8. The method of claim 6, wherein the virtual server client comprises a network-aware version of a libc library. 9. The method of claim 1 wherein the identifying step comprises identifying the target virtual server agent to receive the abstract system call in response to a server identifier included in the abstract system call. 10. The method of claim 9, wherein the server identifier comprises a host name specified in a path. 11. The method of claim 9, wherein the server identifier comprises a network address. 12. The method of claim 11, wherein the server identifier is inferred from a group of servers the target server belongs to. 13. The method of claim 1 further comprising, after the transmitting step, the steps of: (i) translating, by the virtual server agent, the abstract system call into operating system specific system call to be executed by the target server; and(ii) executing, by the target server, the operating system specific system call in a thread-safe manner. 14. The method of claim 1 further comprising: before the transmitting step, specifying at least one of priority, CPU utilization, and memory utilization of the abstract system call on the target server associated with the identified virtualserver agent. 15. The method of claim 1 further comprising: (i) authenticating the user of the client-side software application program and a management system operating the client-side software application program; (ii) encrypting, by the virtual serverclient, the abstract system call; (iii) identifying, by the virtual server agent, the management system and the user; (iv) decrypting, by the virtual server agent, the encrypted abstract system call; and (v) maintaining an audit log to record the nameof the user and the abstract system call executed on the target server. 16. The method of claim 15, wherein the authenticating step (i) is performed in accordance with a public key protocol. 17. The method of claim 15, wherein the authenticating step and the encrypting step are performed in accordance with Kerberos protocol. 18. The method of claim 15, wherein the authenticating step and the encrypting step are performed in accordance with Shared Secret protocol. 19. The method of claim 1 further comprising: modifying an existing non-distributed application to function as a network-aware application by substituting a non network-aware system call with the abstract system call. 20. The method of claim 19, wherein the modifying step comprises modifying a non-distributed Unix shell to function as the network-aware application program. 21. The method of claim 19, wherein the modifying step comprises modifying a non-distributed scripting language to function as the network aware-application program. 22. The method of claim 21, wherein the non-distributive scripting language comprises Perl. 23. The method of claim 21, wherein the non-distributive scripting language comprises Python. 24. The method of claim 1, wherein the client-side software application program comprises a configuration manager. 25. A virtual server, having a virtual server client and a virtual server agent, for representing a plurality of servers as an abstract model, wherein the virtual server comprises: (a) a virtual server client receiver for receiving, from aclient-side software application program, an abstract system call that requests a service from an operating system of at least one of the plurality of servers, the abstract system call generated by the client-side software application program in responseto command and with indifference to the operating system used by the at least one server; (b) a virtual server client instantiator, in communication with the virtual server client receiver, for instantiating the abstract system call in a thread-safemanner; (c) a virtual server client transmitter, in communication with the virtual server client instantiator, for transmitting the abstract system call; (d) a virtual server agent receiver for receiving the abstract system call from the virtual serverclient transmitter; (e) a virtual server agent translator for translating the abstract system call to an operating system specific system call; (f) a virtual server agent mapper for mapping a user identity for a user of the client-side softwareapplication program to an associated local user identity for a target server; (g) a virtual server agent authorizer for authorizing the abstract system call for the mapped local user identity based on at least one of a role-based access control modeland an access control list; (h) a virtual server agent impersonator for impersonating the user of the client-side software application program using the mapped local user identity on the target server; and (i) a target server executor for executing theoperating system specific system call on the target server associated with the virtual server agent in a thread-safe manner. 26. The virtual server of claim 25, wherein at least two of the plurality of servers have different operating systems. 27. The virtual server of claim 25 further comprising an aggregator for aggregating the abstract system call and a second abstract system call into a high-level abstract system call. 28. The virtual server of claim 27, wherein the virtual server client receiver receives the high-level abstract system call and disintegrates the high-level abstract system call into the abstract system call and the second abstract system calland the virtual server client instantiator instantiates in a thread-safe manner the abstract system call and the second abstract system call. 29. The virtual server of claim 27, wherein the virtual server client receiver receives the high-level abstract system call, and the virtual server client instantiator instantiates the high-level abstract system call in a thread-safe manner. 30. The virtual server of claim 25, wherein the virtual server client is implemented by a network-aware code library. 31. The virtual server of claim 30, wherein the network-aware code library comprises a network aware version of a libc library. 32. The virtual server of claim 30, wherein the virtual server client comprises a network-aware version of a libc library. 33. The virtual server of claim 25, wherein the virtual server client instantiator identifies the target virtual server agent to receive the abstract system call in response to a server identifier included in the abstract system call. 34. The virtual server of claim 33, wherein the server identifier comprises a host name specified in a path. 35. The virtual server of claim 33, wherein the server identifier comprises a network address. 36. The virtual server of claim 35, wherein the server identifier is inferred from a group of servers the target server belongs to. 37. The virtual server of claim 25, wherein the virtual server client transmitter specifies at least one of priority, CPU utilization, and memory utilization of the abstract system call on the target server-s associated with the virtual serveragent-s. 38. The virtual server of claim 25 further comprising: (i) an authenticator for authenticating the user of the client-side software application program and a management system operating the client-side software application program; (ii) avirtual server client encryptor for encrypting the abstract system call; (iii) a virtual server agent identifier for identifying the management system and the user; (iv) a virtual server agent decryptor for decrypting the encrypted abstract systemcall; and (v) an audit log for recording the name of the user and the abstract system call executed on the target server. 39. The virtual server of claim 38, wherein the virtual server client encryptor performs in accordance with a public key protocol. 40. The virtual server of claim 38, wherein the authenticator and the virtual server client encryptor perform in accordance with a Kerberos protocol. 41. The virtual server of claim 38, wherein the authenticator and the virtual server client encryptor perform in accordance with a Shared Secret protocol. 42. The virtual server of claim 25, wherein the virtual server modifies an existing non-distributed application to function as a network-aware application by substituting a non network-aware system call with the abstract system call. 43. The virtual server of claim 42, wherein the virtual server further modifies a non-distributed Unix shell to function as the network-aware application program. 44. The virtual server of claim 42, wherein the virtual server further modifies a non-distributed scripting language to function as the network aware-application program. 45. The virtual server of claim 44, wherein the non-distributed scripting language comprises Perl. 46. The virtual server of claim 44, wherein the non-distributed scripting language comprises Python. 47. The virtual server of claim 25, wherein the client-side software application program comprises a configuration manager. 48. A method for securely executing a system call on a remote computer, the method comprising the steps of: (a) receiving, by a virtual server client running on a client computer from an software application program running on the clientcomputer and operated by an authenticated user, an abstract system call that requests a service from an operating system of at least one remote computer, the abstract system call generated by the client-side software application program in response to acommand and with indifference to the operating system used by the at least one remote computer; (b) instantiating in a thread-safe manner the abstract system call by: identifying, by the virtual server client, a virtual server agent running on a targetremote computer to receive the abstract system call; (c) encrypting, by the virtual server client, the abstract system call; (d) communicating the encrypted abstract system call to the virtual server agent; (e) identifying, by the virtual serveragent, the client computer and the authenticated user; (f) decrypting, by the virtual server agent, the encrypted abstract system call; (g) mapping the authenticated user to a local user on the target remote computer; (h) impersonating theauthenticated user as the local user on the target remote computer; (i) authorizing the decrypted abstract system call for the local user based on at least one of role-based access control model and access control lists; (j) translating the abstractsystem call to an operating system specific system call; and (k) executing as the local user, by the virtual server agent, the operating system specific system call on the target remote computer. 49. The method of claim 48 further comprising: before the receiving step (a), authenticating a user in accordance with a public key protocol. 50. The method of claim 48 further comprising: before the receiving step (a), authenticating a user in accordance with a Kerberos protocol. 51. The method of claim 48 further comprising, if the authenticated user is not identified as a local user in the identifying step (e), then designating the authenticated user as a local guest. 52. The method of claim 48, wherein the authorizing step (i) comprises authorizing the decrypted abstract system call for the local user based on at least one of roll-based access control model and access control lists in accordance withKerberos protocol. 53. The method of claim 48, wherein the authorizing step (i) comprises authorizing the decrypted abstract system call for the local user based on at least one of roll-based access control model and access control lists in accordance with SSLprotocol. 54. The method of claim 48 further comprising: after the executing step (k) encrypting results of the executing step (k); and returning the encrypted results to the virtual server client. 55. The method of claim 48, further comprising: maintaining an audit log, by the virtual server client and the identified virtual server agent, that includes names of the authenticated user and the abstract system call performed. 56. A virtual server for securely executing a system call on a remote computer, the virtual server comprising: (a) a virtual server client receiver running on a client computer for receiving, from a software application program running on theclient computer and operated by an authenticated user, an abstract system call that requests a service from an operating system of at least one remote computer, the abstract system call generated by the client-side software application program inresponse to a command and with indifference to the operating system used by the at least one remote computer; (b) a virtual client instantiator, in communication with the virtual server client receiver, for instantiating the abstract system call in athread-safe manner by identifying a virtual server agent running on a target remote computer to receive the abstract system call; (c) a virtual server client encryptor, in communication with the virtual server client instantiator, for encrypting theabstract system call; (d) a virtual server client transmitter for communicating the encrypted abstract system call to the virtual server agent; (e) a virtual server agent decryptor, in communication with the virtual server client transmitter, fordecrypting the encrypted abstract system call; (f) a virtual server agent identifier, in communication with a virtual server agent decryptor, for identifying the authenticated user and the client computer; (g) a virtual server agent mapper, incommunication with the identifier and the decryptor, for mapping the authenticated user to a local user on the target remote computer; (h) a virtual server agent impersonator for impersonating the authenticated user as the local user on the targetremote computer; (i) a virtual server agent authorizer, in communication with the virtual server agent impersonator, for authorizing the decrypted abstract system call for the local user based on at least one of role-based access control model andaccess control lists; (j) a virtual server agent translator for translating the abstract system call to an operating system specific system call; and (k) a virtual server agent executor, in communication with the virtual server agent authorizer, forexecuting the operating system specific system call as the local user on the target remote computer. 57. The virtual server of claim 56, wherein, if the authenticated user is not identified as a local user by the virtual server agent identifier, then the virtual server agent identifier designates the authenticated user as a local guest. 58. The virtual server of claim 56, wherein the virtual server agent authorizer performs in accordance with Kerberos protocol. 59. The virtual server of claim 56, wherein the virtual server agent authorizer performs in accordance with SSL protocol. 60. The virtual server of claim 56, wherein the virtual server agent executor encrypts results of executing the operating system specific system call, and returns the encrypted results to the virtual server client. 61. The virtual server of claim 56, further comprising: an audit log, maintained by the virtual server client and the identified virtual server agents, that includes names of the authenticated user and the abstract system call performed. Description TECHNICAL FIELD This invention relates to the field of server management and, more particularly, to the management of servers in a heterogeneous computing environment.BACKGROUND INFORMATION Information Technology (IT) administrators are facing new challenges due to a significant increase in the number of servers in an enterprise's IT infrastructure and the adoption of distributed electronic business applications. These challengeshave resulted from: (1) a transition from client-server to Internet-based architectures, resulting in frequent interactions between different types of servers; and (2) the use of component application servers, such as J2EE (JavaJAVA 2 Platform,Enterprise Edition) and .NET platform, to generate components, tools, systems, and complex application models. Faced with these challenges, an IT administrator may need to juggle hundreds of incompatible software application configurations and trackthousands of server components for the thirty to forty servers he or she manages. Currently available configuration tools are inadequate to manage a large number of software application configuration and server components across multiple servers in a heterogeneous computing environment. To manage and configure heterogeneousservers, particularly in the complex business computing infrastructure, many IT administrators use enterprise systems management (ESM) products offering monitoring tools to automate problem identification across multiple servers. However, thesemonitoring tools do not provide a centralized management system with a centralized configuration database, which can centrally keep track of current server components and their interdependencies across the different servers. In addition, these ESM products provide little or no help in correcting or configuring server components in a heterogeneous computing environment. For UNIX and LINUX operating system-based servers, despite the open-source and internallydeveloped tools and scripts to handle simple configuration changes to J2EE configurations, neither the tools nor the scripts can be easily extended to address complex distributed applications. MICROSOFT WINDOWS-based operating system servers are even more difficult to correct and configure than UNIX and LINUX operating system based servers, due to a large number of server components having complex interdependencies. Although systemmanagement tools are available from Microsoft Corporation, they have been designed to target only small-scale homogenous MICROSOFT WINDOWS-based computing environments, and not the large and heterogeneous computing environment supporting multipleoperating systems that most IT administrators have to manage. Because of the inadequacies in currently available management tools, significant portions of any server configuration change operations have to be made manually by the IT administrator for each server. Accordingly, human errors can occur fromthese manual change operations, and from manual monitoring and tracking of each server's configuration, resulting in frequent server misconfigurations and system downtime.SUMMARY OF THE INVENTION To alleviate this situation, systems and methods according to the invention can be used to manage a large number of servers and their server components distributed throughout a heterogeneous computing environment. In one embodiment, an authenticated user, such as a IT system administrator, can securely and simultaneously control and configure multiple servers, supporting different operating systems, by implementing a virtual server from the user'smanagement system. In one embodiment, the user is authenticated by an operating-system-user-context-inheritance model or standard authentication protocols, such as a public key protocol, a Kerberos protocol, or a shared secret protocol. In some embodiments, a ""virtual server"" model is used. A virtual server is an abstract model representing a collection of actual target servers. To represent these multiple physical servers as one virtual server, the abstract system calls thatextend execution of operating-system-specific system calls to multiple servers regardless of their supported operating systems are used. A virtual server is implemented by a virtual server client and a collection of virtual server agents associated witha collection of actual servers. The virtual server client may be implemented by a network-aware code library, such as ""libnc,"" which is implemented as a network-aware version of the ""libc"" library. In another embodiment, the virtual server client is alibrary, such as ""libnc."" The user's management system contains a software application system, such as a command program (also referred to as a command line interface) or a configuration manager, which generates abstract system calls to request services to be performedon the target servers. In one embodiment, the virtual server client receives the abstract system calls and instantiates the abstract system calls in a thread-safe manner. The thread-safe instantiation ensures simultaneous execution of the system callson multiple target servers, while sharing the single virtual server client among these multiple target servers and their associated virtual server agents. In the instantiating process, the virtual server client identifies the target server(s) and theirassociate virtual server agent(s) to receive the abstract system calls. In one embodiment, the virtual server client identifies the target server(s) in response to a server identifier included in the abstract system call. Examples of the serveridentifier include a host name specified in a path and a network address. The server identifier may also be inferred from a group of servers to which the target server belongs. Also, in the instantiating process, the virtual server client transmits the abstract system calls to the identified virtual server agent for execution on the target server. Before the transmission of the abstract system call, the virtual serverclient may encrypt the abstract system calls using standard encryption protocols, such as the SSL protocol, the Kerberos protocol, or the shared secret protocol, to secure communication between the virtual server client and the virtual server agent. Inaddition, before the transmission of the abstract system call, the virtual server client may specify priority, CPU utilization, and/or memory utilization of the abstract system call on the identified target server. After the virtual server agent receives the abstract system calls from the virtual server client, the virtual server agent translates the abstract system call into an operating system-specific system call, so that system call can be executed onthe operating system-specific target server. Before translating the abstract system call, in one embodiment, the virtual server agent identifies the source host of the user's management system to determine the encryption protocol used on the abstractsystem call. The virtual server agent decrypts the abstract system call after learning about the encryption protocol used by the virtual server client. From the decrypted abstract system call, the virtual server agent identifies the authenticated user. In addition, the virtual server agent contains software modules that can map the authenticated user (presented user) to another user (effective user) and locate a corresponding local user identity on the target server for the effective user, andimpersonate the effective user as a local user on the target server associated with the virtual server agent. In one embodiment, if the effective user is not identified as a recognized local user on the target server, the user is designated as a localguest user on the target server. The virtual server agent further restricts the user's access to the target server through a software module that limits the user to performing predetermined actions or accessing predetermines resources on the targetserver, based on a role-based access control model and/or access control lists (ACLs). The translated system calls are then executed on the target server in a thread-safe manner and the results of the execution are transported from the virtual server agent to the virtual server client. In one embodiment, the virtual server agentmaintains an audit log to record the names of users and the abstract system calls executed on the target server. In another embodiment, the application system can aggregate multiple abstract system calls into a single high-level abstract system call, which in turn is transported to the virtual server client. After receiving the high-level abstract systemcall, the virtual server client disintegrates the high-level abstract system call into the original multiple abstract system calls and instantiates these original abstract system calls individually. Accordingly, the virtual server agent receives theindividual abstract system calls for execution on the associated target server. In yet another embodiment, after receiving the high-level abstract system call from the application program, the virtual server client instantiates the high-level abstract system call as a whole. Thus, the identified virtual server agentreceives the high-level abstract system call, rather than the original multiple abstract system calls. The virtual server agent in turn translates the high-level abstract system into the individual operating system-specific system calls to be executedon its associated target server. In another embodiment, the virtual server modifies an existing non-distributed application supporting only one specific operating system to function as a network-aware application that is applicable across servers or devices supporting differentoperating systems by substituting a non network-aware system call with an abstract system call. In one exemplary embodiment, a non-distributed Unix shell program can function as a network-aware application program that is adaptable across multipleservers or devices supporting non-Unix operating systems. In another exemplary embodiment, non-distributed scripting languages, such as Perl and Python, can function as network aware-application programs that are applicable across multiple servers anddevices supporting different operating systems. In another embodiment, software configuration components (also referred to as server objects) having intricate interdependencies with other server components can be defined and characterized under a single unified system. Through this unifiedsystem, fine-grain application change operations can be uniformly and simultaneously implemented across the heterogeneous servers, rather than implementing different application change operations for each of the servers individually. In yet another embodiment, a centralized management system can automatically track changes, configure, and manage multiple servers to provide compliance in accordance with pre-defined policies by incorporating the methods and systems describedabove. BRIEF DESCRIPTION OF THE DRAWINGS In the drawings, like reference characters generally refer to the same parts throughout the different views. Also, the drawings are not necessarily to scale, emphasis instead generally being placed upon illustrating the principles of theinvention. FIG. 1 is a block diagram depicting an embodiment of a system for managing multiple servers in a heterogeneous computing environment. FIG. 2 is a block diagram depicting a virtual server client in accordance with an embodiment of the invention. FIG. 3 is a block diagram depicting a virtual server agent in accordance with an embodiment of the invention. FIG. 4 is a flowchart depicting an embodiment of a method for receiving and executing a system call from an application program. FIG. 5 is a flowchart depicting the details of instantiating an abstract system call in one embodiment of the method of FIG. 4. FIG. 6 is a screen shot of an embodiment of a system implementing the method of FIG. 4. FIG. 7 is a block diagram depicting an embodiment of a system for executing and undoing distributed server change operations in a transaction-safe manner. FIG. 8 is a flowchart depicting an embodiment of a system for executing and undoing distributed server change operations in a transaction-safe manner. FIG. 9 is a flowchart depicting an embodiment of a method for executing and undoing distributed server change operations in a transaction-safe manner. FIG. 10 is a block diagram depicting an embodiment of a system for configuring multiple servers in a heterogeneous computing environment. FIG. 11 is a flowchart depicting an embodiment of a method for configuring multiple servers in a heterogeneous computing environment. FIG. 12 is a block diagram depicting an embodiment of a system for managing server objects as described in a embodiment of the invention. FIG. 13 is a block diagram depicting an exemplary embodiment of the system of FIG. 12. FIG. 14 is a user interface display in an embodiment for a system implementing the method of FIG. 11.DETAILED DESCRIPTION Referring to FIG. 1, a user 10, such as a system administrator, manages a number of servers 15A, 15B, 15C, 15D, generally 15, which are computers, each of which can be of the same or of different types than the other servers 15. The servers 15are typically server-class general-purpose computers, which provide services (e.g. software applications and/or data) to other computers via one or more computer networks. For example, the servers may be application servers, routers, firewalls, loadbalancers, storage controllers, or a combination of these or other computers or network devices. Examples of application servers are databases, such as the ORACLE database from Oracle Corporation of Redwood City, Calif. or other business applications. Application servers may also include web servers, such as the Apache web server from theApache Foundation, and Internet Information Server (IIS) from Microsoft Corporation of Redmond, Wash. In addition to these examples, other programs can be provided by the servers 15. It should be understood that as used herein, the term ""server"" is notlimited to server-class computers or application servers, but refers generally to computers on which the embodiments of the invention operate, which may include other types of computers or network devices. As shown, each of the servers 15 may use a different operating system. For example, server 15A uses MICROSOFT WINDOWS (e.g., WINDOWS NT and WINDOWS 2000), available from Microsoft Corporation of Redmond, Wash.; server 15B uses SUN SOLARIS,available from Sun Microsystems, Inc. of Santa Clara, Calif.; server 15C uses RED HAT LINUX, available from Red Hat, Inc. of Durham, N.C.; and server 15D uses IBM AIX, available from IBM of Armonk, N.Y. It will be understood that this is just oneexample of the operating systems that may be used on the servers 15, and other combinations and operating systems may be used on the servers 15 in accordance with embodiments of the invention. One of the benefits of the system is its ability to operatein an environment having heterogeneous servers. In one embodiment, the user 10 manages the servers 15 via a management system 20. The management system 20 is typically a server-class computer that provides the user 10 with an ability to manager servers 15 in a consistent manner through useof application programs 25. The management system 20 may be one of the servers 15, or any server-class computer that can communicate with the servers 15 over a network. Any of the target servers 15 can be designated as the management system, as long asthe designated server includes appropriate application programs and software modules to manage remotely located servers. Application programs 25 in the management system 20 can include one or more of a command-line shell program 25A and related programs for executing shell commands (e.g., UNIX shell commands such as ls, mv, rm, etc.), a configuration manager 25Bfor managing system configuration, and/or other applications 25C. The application programs 25, which in some implementations are ""network-aware,"" communicate abstract system calls to a virtual server client 30, which in turn communicates the abstractsystem calls to the servers 15 that are the target(s) for execution of the operations requested by the abstract system calls. Advantageously, through use of the abstract system calls, the ""network-aware"" applications are able to request services fromheterogeneous servers supporting different operating systems without having to modify their architecture to support each of the different operating systems. For example, the user 10 enters commands, such as UNIX shell commands, to the shell program 25A via a command line interface. Commands can be entered, for example, to distribute files, directories, software packages, and patches to the targetservers 15. Commands can also be entered to edit configuration files of the target servers 15. In addition, commands can be entered to remotely reboot the target servers 15, and stop and start change operation on the target servers 15. For example, in one implementation, the Unix shell command ""ls,"" which requests a server computer to list a directory of files, may be modified to be used with the user's management system 20 and the virtual server client 30 to list a directoryof files from any of the target servers 15. From the user's 10 perspective, the ""ls"" command is used in the normal manner, except that the user 10 can identify a target server 15 for the command in a path associated with the command. For example, ifthe target server 15A is named ""targetserver1,"" the user 10 may enter the command ""ls//targetserver1/path/"" to list the files in the specified path on the target server 15A. To implement this ls command of the shell program 25A on the user's management system 20, the shell program 25A translates the system calls called by the ""ls"" command into one or more abstract system calls. These abstract system calls are sentto the virtual server client 30, which in turn sends the abstract system calls to appropriate target servers 15, in this case, the target server 15A. After execution of the command on the target servers 15, the results are communicated back to the user10 via the application programs 25 and the virtual server client 30. Other programs can be made ""network aware"". For example, in some implementation, script interpreters, such as interpreters for the Perl and Python scripting languages can be modified to work with the virtual server client 30. Generally,selected system calls made by an application program are translated into abstract system calls, which are communicated through the virtual server client 30 to the servers 15. In addition to providing shell commands and other application programs, the management system 20 may include a configuration manager 25B. In one embodiment, the configuration manager 25B is used to configure one or more of the servers 15. Theconfiguration manager is a software application program that implements server change operations that are in turn translated into the corresponding operating system specific commands on the target servers 15. In one implementation, an application program 25 directs abstract system calls to specific target servers 15. In another implementation, the application program 25 can also direct abstract system calls to a group of servers. A group of serverscan be pre-defined or dynamically defined based on attributes such as operating systems, capacity, IP address ranges, and installed applications. For example, the application program 25 can direct an abstract system call to a group of servers,consisting of a subset of servers 15 running the Linux operating system. Application program 25 thus can deploy a command onto a server in this group without specifying a particular server in the subset. In this way, the application program 25 does notneed to keep track of each server, not determine which servers have sufficient capacity or features to run the program; rather, the application program 25 can deploy commands (or change operations) to a predetermined group, and the virtual server client30 decides which specific server should run these operations. The virtual server client 30, which may be included in the management system 20, presents the servers 15 to the application programs 25 as a single ""virtual server"" on which system call operations can be executed. The virtual server client 30is implemented by a software library, which in one implementation is roughly analogous to the C library, libc. The application programs 25 can be statically or dynamically linked to the virtual server library, which is called libnc. In one embodiment,non network-aware application programs 25 are converted to network-aware programs by replacing calls to the libc library with equivalent calls to the libnc library, which provides abstract network-aware system calls. In an alternative embodiment, the virtual server client 30 may be implemented as part of an operating system. For example, the operating system running the user's management system 20 can receive abstract system calls and communicate them tothe remote target servers 15. Accordingly, for purposes of executing an abstract system call a target servers 15, the source of the abstract system call is immaterial. In some embodiments, the virtual server client 30 communicates with the servers 15 through virtual server agents 35 associated with the servers 15, which will be described in detail below. The virtual server client 30 communicates with virtualserver agents 35 to present the multiple physical target servers 15 as a single virtual server to the application programs 25. As an abstract representation of a collection of the physical servers 15, the virtual server intercepts the abstract systemcalls via the virtual server client 30 and routes the abstract system calls to the virtual server agents 35. When the virtual server client 30 receives an abstract system call from an application program 25, the virtual server client 30 checks the abstract system call to determine whether this system call is a local call or a remote call. If theabstract system call is a local call, then the operating system running the management system 20 executes the system call locally. If the abstract system call is determined to be a remote call, the virtual server client 30 sends the abstract system callto a virtual server agent 35 associated with a target server 15 via a message protocol. For example, when an ""ropen"" abstract system call, representing a remote file open command, is received by the virtual server client 30, the data representing the""ropen"" command and parameters associated with the ""ropen"" command are sent to appropriate virtual server agents 35. The target-servers 15 for a system call are identified by the user 10 or the application programs 25. The virtual server client 30identifies the target servers 15 from their virtual server agents 35 and determines where the system call should be directed. The virtual server agents 35 receive abstract system calls from the virtual server client 30 and prepare the abstract system calls for their associated target servers 15. When the virtual server client 30 determines to which virtual serveragents an abstract system call should be directed, each of the virtual server agents 35 receives the abstract system call. As a part of preparing the abstract system call for the associated target servers 15, the virtual server agents 35 providesecurity measures to ensure that the user 10 is authorized to access the target servers 15, and that the virtual server agent 35 controls the user access, as provided by the associated target server 15. Once the user 10 is authorized, the virtual serveragent 35 translates the abstract system call into an operating system specific call directed to its associated target server 15. The target server 15 executes the abstract system call and returns the results back to the virtual server agent 35, which inturn sends the results back to the appropriate application programs 25 via the virtual server client 30. In one embodiment, the virtual server agents 35 (also referred to as Remote System Call Daemon or RSCD agents) are software modules attached to their corresponding target servers 15. In another embodiment, the virtual server agents 35 aresoftware modules that are not attached to their corresponding target servers 15, but are in communication with their associated remotely located target servers 15. In some embodiments, instead of acting as a messenger that sends an abstract system call to a specific target server 15, one of the virtual server agents 35 can represent a group of physical servers. Thus, if the same command needs to beexecuted on multiple servers, these servers can be aggregated into a group, represented by a single virtual server agent 35, so that appropriate system calls can be made to a group of servers simultaneously via that virtual server agent 35. Generally, abstract system calls may include all types of system calls including file system calls, operating system calls, and the like. An abstract system call typically is implemented as a modification of an analogous standard operatingsystem specific call. For example, the abstract system call ""ropen"" is analogous to a standard system call ""open,"" which opens a file on a server. With minor modifications to an application program's source code, any application program can make operating system agnostic abstract system calls. By changing the system calls to abstract system calls, any generic application program can bemade into a network aware-application that can operate transparently across servers supporting different operating systems. In one embodiment, only the system calls that are applicable to all of the target servers 15 can be modeled as abstract system calls. For example, if the target servers 15 include UNIX-based servers, it may not be possible to model a systemcall to update a registry as an abstract system call, since a registry, which is a Windows specific object, does not exist and has no relevance for UNIX-based server platforms. Referring to FIG. 2, in one embodiment, the virtual server client 30 includes various software modules which implement its functionality. These modules include a receiver 40 that receives an abstract system call made by an application program25, and forwards the abstract system call to an instantiator 42. The receiver 40 is a software module that acts a messenger between the software application programs 25 and the instantiator 42. In one embodiment, the receiver 40 receives the abstractsystem call from one of the software application programs 25 used by the user 10. The receiver 40 then forwards the abstract system call directly to the instantiator 42. In another embodiment, the receiver 40 may receive standard operating systemspecific system calls from an application program 25. The receiver forwards such standard system calls to the instantiator 42 for the instantiator 42 to decide to where the system calls should be directed. The instantiator 42 instantiates abstract system calls in a thread-safe manner. The thread-safe instantiation shares a single resource between multiple operations without requiring changes to the architecture of the application programsrequesting the operations. Typically, thread-safe instantiation shares the same virtual server client 30 between multiple simultaneous execution of system calls. The use of the shared resource, such as the virtual server client 30, is coordinated, sothat the execution of one operation does not impact the execution of other operations. In one embodiment of the thread-safe instantiation, the application programs 25 can instantiate multiple commands (or operations) via the instantiator 42. Forexample, the application programs 25 may invoke multiple ""ropen"" system calls that are directed to one or more target servers 15. The ""ropen"" system call is received by the instantiator 42 in the virtual server client 30. The instantiator 42 thendistributes the ""ropen"" abstract system call to each of the virtual server agents associated with the target servers, so that multiple ""ropen"" calls can be executed simultaneous by the target servers 15. In one embodiment, the instantiator 42 is implemented as a software library that provides routines that represent the abstract system calls. One particular implementation of the software library is called ""libnc."" Libnc is a ""network-aware""library that is analogous to the standard C library. The Libnc library supports the network aware application programs 25 by instantiating the abstract system calls generated by the application programs 25. In one embodiment, the instantiator 42 determines to which virtual server agents 35 an abstract system call should be directed. The instantiator 42 identifies target servers 15 by finding the target server identifiers specified in the abstractsystem call. The target server identifier may include a path name, which in turn may include a host name or a network address (e.g., IP address) for the server. The target server 15 may also be identified by server names explicitly stated in a filewhich is to be run on specific named servers. Alternatively, the server identity may be inferred from a subset of servers or a group of servers (e.g., a group of Linux servers) to which the target server 15 belongs. Before transmitting the abstract system call to the virtual server agents 35, the instantiator 42 can also specify the priority, CPU utilization, and memory utilization of the system call for the target servers 15, so that the identified targetserver 15 platforms can perform the requested services as specified by the virtual server client 30. Once the abstract system call has been instantiated, it is sent to an encryptor 44 for further processing. The encryptor 44 encrypts the abstract system call before sending it to a transmitter 46 for transmission to the virtual server agents 35. The encryptor 44 uses standard encryption protocols and algorithms to secure communication between thevirtual server client 30 and the virtual server agents 35. Examples of standard encryption protocols include, but are not limited to, SSL (Secure Sockets Layer), Kerberos, and Shared Secret protocols. SSL uses a public key to encrypt data. Kerberosassigns a unique key to each authorized user. Standard encryption algorithm includes, but are not limited to, DES (Data Encryption Standard), 3DES (Triple DES), Blowfish, and AES (Advanced Encryption Standard). The encryption protocol and algorithm used by the encryptor 44 must be supported by each virtual server agent 35 with which the virtual server client 30 will communicate. For example, if the virtual server client 30 supports SSL, the virtualserver agent 35 must be able to support SSL for that protocol to be used. If the virtual server client 30 supports Kerberos, the virtual server agent 35 must also be able to support Kerberos for that protocol to be used. The transmitter 46 uses a network interface protocol, such as TCP/IP or Ethernet, to send the abstract system call over a network to the virtual server agents 35. The transmitter transmits the same abstract system call to each target virtualserver agent. In one embodiment, the transmitter 46 uses an IP address to determine to which of the target servers 15 an abstract system call should be sent. An IP address may be directly included in the abstract system call or may be inferred from aserver identifier included in the abstract system call. The virtual server agent 35 accepts the abstract system call containing the IP address of the target server 15 associated with that virtual server agent 35. Once the virtual server agent 35receives the abstract system call, the virtual server agent 35 processes the abstract system call for execution on the target server 15. Referring to FIG. 3, each virtual server agent 35 includes software modules that implement its functionality. These modules include a receiver 50, which receives abstract system calls from the virtual server client 30, and transfers theabstract system calls to a decryptor module 52. Before the user 10 can access the user's management system 20, the user 10 is authenticated to ensure that the user 10 is in fact the person he or she claims to be. The user 10 can be authenticated in many ways. In one embodiment, the user 10is authenticated by the operating system of the management system 20 and the target servers 15 subsequently inherit the user's 10 identity. In another embodiment, SRP (Secure Remote Password) or PKI Cryptography (X.509 Certificates) is used toauthenticate user 10. In yet another embodiment, the Kerberos 5 system can be used to authenticate the user 10 by assigning a unique private key to the user 10. The source identifier module 52 identifies the source machine, e.g., the user's management system 20. The source identifier module 52 first determines the source machine through a network address (e.g., IP address) that was submitted to thevirtual server agent 35 from the virtual server client 30 with the abstract system call and checks to see if the source host is authorized. By identifying the source machine, the source module 52 determines the security protocols to be used by the virtual server agent 35 for encryption and decryption. In one embodiment, the virtual server agent 35 can support different securityprotocols. For example, the virtual server agent 35 can flexibly support either SSL or Kerberos based on the security protocol of the incoming data from the virtual server client 30. Next, the abstract system call is sent to a decryptor 54, whichdecrypts the abstract system call. From the decrypted abstract system call, the user identifier module 55 identifies the user 10 invoking the application programs 25 from the source machine and verifies that the user 10 is authorized to access thesource machine. After the user is identified by the user identifier 55, an identity mapper 56 and an impersonator 58 provide additional security measures as the user 10 tries to access the remote target servers 15 from the user's management system 20. Theidentity mapper 56 optionally maps the authenticated user (presented user) to another user (effective user) and locates a local user identity on the target server 15 that corresponds to the authenticated identity of the effective user. Through theimpersonator 58, the user 10 is impersonated on a remote target server 15, so that if the effective user is identified and exists as a local user on the remote target server 15, the user 10 takes on the local identity of the effective user and thepermissions provided by that identity on the remote target server 15. Thus, the user's 10 access to the remote target server 15 is further restricted to the appropriate levels provided by the permissions granted to the effective user's local identity onthe remote server 15. For example, if the user 10 is authenticated as ""Joe"" on the management system 20 and mapped to an effective user ""Jane"", local permissions of ""Jane"" will be available to the user 10 on the remote target server 15. If ""Jane"" doesnot exist on the remote target server 15, then the user 10 will be given a guest account. In one embodiment, the combination of the presented user and the role, which is defined by Role Based Access Control (RBAC), is mapped to an effective user. Forexample, user ""Joe"" having the role of a junior administrator can be mapped to an effective user named ""junior administrator."" Another user ""Bob"" also having the role of a junior administrator can be mapped to the same effective user named ""junioradministrator."" The effective user's access for presented user 10 is further restricted by an authorizer 60, which permits the user 10 to perform predetermined actions or access predetermined resources on a particular target server 15. This is achieved byusing Access Control Lists (ACLs) to manage the effective user's access to resources on the remote target servers 15. The ACL informs the operating systems of the remote target servers 15 of the access rights of the effective user on specific serverresources, such as files or directories. For example, if the user 10 is mapped to the effective user ""junior administrator"", then the user 10 is only permitted to perform read-only commands on certain directories or files of a group of remote targetservers 15 and cannot effect any changes to the target servers 15. After the user is authorized, a translator 62 translates the abstract system call into a standard operating system call that is understandable and executable by the target server 15. The translator 62 examines the abstract system call andidentifies a standard operating system specific system call that is analogous to the abstract system call and is supported by the operating system running the associated target server 15. Once the analogous standard system call is identified, thetranslator changes the abstract system call to the standard system call. This standard operating system call is forwarded to an executor 66 for execution on the target server 15. Once the executor 66 receives a standard operating system call, the executor 66 performs the services that are requested by the standard system call. In one embodiment, the executor 66 is the operating system running on the target server 15. The operating system examines system calls and carries out the operations requested by the system call by, for example, communicating with other applications running on the target server 15. An audit log 64 is maintained by each virtual server agent 35 to keep track of the names of the users and all the activities performed by each user, and to troubleshoot server changes and configuration errors. For example, the audit log 64saves information about the activities requested and performed by authorized users, information about data, such as the system calls and the results of the system calls, that were transferred back and forth between the virtual server client 30 and thevirtual server agent 35, as well as all parameters associated with the abstract system call. The content of the audit log 64 is then transmitted to a centralized aggregated log kept for all of the virtual server agents 35. A first example of security measures incorporated in an embodiment of the virtual server implementation follows. First, the user 10 logs into the management system and is authenticated as ""Joe"" during the login process. This authenticationprocess can be achieved by using a known network authentication server, such as NTLM, K5, AD, APM, NIS, etc., depending on the operating system running on the management system 20. After the user ""Joe"" is authenticated in the management system 20, theuser ""Joe"" is authenticated for the target servers 15 by inheriting the user ""Joe"" identity through the management system 20. Next, the user 10 enters a ""ls"" command, requesting a listing of files on the remote target server 15A, through the shell command program 25A on the management system 20. The shell command program 25A generates an abstract system call inresponse to the command and sends the abstract system call to the virtual server client 30 to proceed with the user's 10 request. The virtual server client 30 examines the security configuration of the abstract system call and encrypts the system callusing a shared secret key scheme with a encryption algorithm, such as DES, 3DES, or Blowfish. Once the abstract system call is encrypted, the system call is communicated across a network to the virtual server agent 35A of the target server 15A. When the virtual server agent 35A receives the abstract system call, the target server's 15A agent 35A attempts to decrypt the message using the secret key shared with the virtual server client 30. The virtual server agent 35A checks to see ifthe user ""Joe"" is recognized as a local user on the target server 15A through an effective user. If the user ""Joe"" is recognized as a local user, then the virtual server agent examines the access control list to determine if the combination of the user""Joe"" 10, target server 15A, and the abstract system call is allowed. If the combination is allowed, then the access control list is used to determine whether any further restrictions apply to the user's 10 access to the target server 15A. The virtualserver agent 35A executes the system call in accordance with any security restrictions, encrypts the results using the same-shared secret key. The results of the ""ls"" command are sent back to the virtual server client 30, where they are decrypted anddisplayed to the user. In a second example of security measures incorporated in an embodiment of the virtual server, the user 10 is authenticated using of SRP or PKI Certificates. Once the user 10 is authenticated the user 10 enters an ""ls"" command, requesting alisting of files on the remote server 15A, through the shell command program 25A on the management system 20. The shell command program 25A generates an abstract system call in response to the command and sends the abstract system call to the virtualserver client 30. The virtual server client 30 examines the security configuration of the abstract system call and encrypts the abstract system call using public key cryptography, standard encryption algorithms, such as DES, 3DES, or Blowfish, may beused for exchange of session key between the virtual server client 30 and the target server agent 35A to establish a communication session between them. After decrypting the abstract system call received by the virtual server agent 35A, the virtual server agent 35A checks to see if the user ""Joe"" is recognized as a local user on the target server 15A through an effective user. If the user ""Joe""is recognized as a local user, then the virtual server agent 35A examines the ACL to determine if the combination of the user 10, target server 15A, and the abstract system call is allowed. If the combination is allowed, then the access control list isused to determine whether any further restrictions apply to the user's 10 access to the target server 15A. The virtual server agent 35A executes the system call in accordance with any security restrictions, and encrypts the results using the establishedsession key. The results of the ""ls"" command are then sent back to the virtual server client 30, where they are decrypted and displayed to the user. A third example of security measures incorporated in an embodiment of the virtual server implementation follows. If the management system 20 has an existing Kerberos 5 (K5) infrastructure in place, the user 10 can be authenticated by entering aKerberos password to the management system 20. Once the user 10 is logged in as the authenticated user ""Joe,"" the user 10 enters the ""ls"" command, requesting a listing of files on the remote target server 15A, through the shell command program 25A onthe management system 20. The shell command program 25A generates an abstract system call in response to the command and sends the abstract system call to the virtual server client 30 to proceed with the user's 10 request. The virtual server client 30then sends the abstract system call and a Kerberos ticket, which is retrieved from a Kerberos Domain Controller (KDC) to the virtual server agent 35A. After the virtual server agent 35A receives the abstract system call and the ticket, the virtual server agent 35A validates the abstract system call by verifying the ticket via the IDC. Once validated, the virtual server agent 35A checks to seeif the user ""Joe"" is recognized as a local user on the target server 15A through an effective user. If the user ""Joe"" is recognized as a local user, then the virtual server agent examines the ACL to determine if the combination of the user ""Joe"" 10,target server 15A, and the abstract system call is allowed. If the combination is allowed, then the access control list is used to determine whether any further restrictions apply to the user's 10 access to the target server 15A. The virtual serveragent 35A executes the system call in accordance with any security restrictions, encrypts the results using a Kerberos key. The results of the ""ls"" command are sent back to the virtual server client 30, where they are decrypted and displayed to theuser. Referring now to FIG. 4, a method for managing multiple servers as a single virtual server is described. First, in step 400, the system represents multiple servers as a single virtual server. Next, in step 410, based on a user's request foroperations to be performed on target servers, the virtual server client 30 receives an abstract systems call from an application program 25. Finally, in step 420, the virtual server client instantiates the abstract system calls and sends the abstractsystem call to the virtual server agents 35 for execution. FIG. 5 shows steps involved in instantiating an abstract system call. First in step 422, the virtual server client 30 identifies the target servers 15 through target server identifiers provided within the abstract system call. Once the targetservers are identified, in step 424, the abstract system call is transmitted to the virtual server agents associated with the identified target servers. The virtual server agents 35 prepare the abstract system call for the target servers 15, so that theabstract system call can be the executed on the target servers 15. For example, for the target server 15A, the abstract system calls are translated into standard MICROSOFT WINDOWS NT/W2K specific system calls that are executable by the operating systemrunning on the target server 15A. Upon completion of execution of the system call, in step 426, the virtual server client 30 receives the results of the execution from the virtual server agents 35. In one embodiment, multiple commands generate multiple system calls, which can be aggregated into a single high-level abstract system call by an application program 25. For example, if two commands, such as copy and change permission commands,are to be made to a target server 15A, the abstract system calls carrying out these commands, such as ropen, rread, rwrite, and rchmod system calls, can be aggregated into one high-level abstract system call. When received by the virtual server client30, the virtual server client 30 can disintegrate the high level abstract system call into the original abstract system calls and transmit the abstract system calls separately to virtual server agent 35. In another embodiment, instead of disintegratingthe high-level system call into the original abstract system calls at the virtual server client 30, the high-level abstract system call is received by a virtual server agent 35, which in turn translates the high-level abstract system call into separateoperating system specific system calls to be executed on the target server 15. FIG. 6 is a screenshot showing a command being issued to multiple servers through the management system 20. As shown here, server names used as parameters for commands are preceded by two slashed to distinguish them from a path name, which isgenerally separated by a slash. For examples, ""//redhatbiz1/etc"" specifies the/etc path on the server named ""redhatbiz1."" Thus, as seen in the screenshot, to compare the ""/etc/hosts"" file on two different servers, one named ""redhatbiz1,"" and the othernamed ""redhatbiz2,"" the user 10 enters the command ""diff//redhatbiz1/etc/hosts//redhatbiz2/etc/hosts."" Referring back to FIG. 1, in an alternative embodiment, the user 10 manages the target servers 15 by executing and undoing distributed server change operations across the target servers 15 in a transaction safe-manner, using the virtual serverimplementation described above. Distributed server change operations request the operating systems of the target servers 15 to update, delete, install, and/or copy server assets and/or configuration file entries of the target servers 15. Transaction-safe server change operations ensure that all of the required steps of each server change operation are completed before the distributed server change operations are deemed completed. Further, if an error occurs while performing the requiredsteps on the target servers 15, any changes made from these steps are undone, and values of the target servers' 15 assets and/or configuration entries are returned to the values they had before execution of the server change operations. In oneembodiment, the application programs 25 can generate a transaction package that bundles an instruction set and necessary server contents for the operating system of each of the target servers 15 to carry out the server change operations. Referring to FIG. 7, in one embodiment, the configuration manager 25B generates a transaction package 700 that includes files or configuration file entries 705 (together referred to as server objects), a parameter file 710, and an instructionset 715 to carry out the server change operations on one or more target servers 15 that are specified by an external file, as requested by the configuration manager 25B. In one embodiment, the instruction set 715 includes an execution sequence of the server change operations provided for the operating systems of the target servers 15 that carry out the server change operations. If this information is notprovided in the instruction set 715 in the transaction package 700, an external dependency graph 720 is accessed to provide an execution sequence of the server change operations. For example, the external dependency graph 720 can provide informationabout directional relationships between server objects. In particular, if NT-based program A is a prerequisite for another NT-based program B, to successfully execute programs A and B, program A must start before program B and program B must stop beforeprogram A. Although the sequence information is used to order the sequence of change operations for the server objects that are specified in the transaction package, the sequence information is also used to add implied server object change operations forrelated server objects, such as server objects that depend on and/or depend from these specified server objects, that are not specified in the transaction package. In particular, continuing from the previous example, if the only change instructionprovided in a transaction package is to stop program A, the sequence information adds the implied instruction to stop program B and then stop program A based on the directional relationship between programs A and B. Thus, the sequence information fromthe dependency graph determines the sequences of server change operations to be performed not only on the specified server objects, but also on their related server objects. If an error occurs while performing the service change operations, the sequenceinformation also causes the server change operations to stop and to be reversed not only on the specified servers, but also on the related server objects. As described above, if the instruction set 715 provides the sequence information for the server change operations, the instruction set 715 overrides the sequence information provided by the dependency graph 720. Similar to the sequenceinformation provided by the dependency graph 720, the instruction set 715 provides the information related to the order in which the server change operations should be performed. The related server objects of the specified server objects are provided,so that the server change operations can effect changes on the related server objects, as well as the specified server objects. The instruction set 715 also provides dependency information between types of servers. For example, if an application serverdepends on a database server, the sequence information provided in the instruction set 715 will instruct the execution of the database server change operations before the execution of the application server change operations. In one embodiment, the instruction set 715 specifies server change operations to occur on any of the four types of server objects 705: primitive server objects, compound server objects, abstract configuration server objects, and component serverobjects. A primitive server object is an elemental server object that serves as a basis for all other types of server objects. For example, for Linux-based servers, primitive server objects include, but are not limited to, files, directories, RedhatPackage Manager files, and configuration file entries for text configuration files, such as the ""inetd.conf"" file. For Solaris-based servers, primitive server objects include, but are not limited to, files, directories, packages, patches, andconfiguration files entries for configuration files, such as the ""inetd.conf"" file. For MICROSOFT WINDOWS NT or W2K-based servers, primitive server objects include, but are not limited to, files, file ACLs, directories, directory ACLs, applicationprograms, hot fixes, the registry entries, registry entry ACLs, COM/COM+ (component object model) catalog entries, Metabase entries, users, accounts, and configuration file entries for all configuration files, such as "".ini"" files. A compound server object is a server object containing primitive server objects and other related compound server objects. For example, an extended component object model (COM+) object, an NT or W2K-based compound server object, containsprimitive server objects, such as a COM+ catalog entry, NT registry entries, and DLL files. In yet another example, an Enterprise JavaBeans (EJB) object, a compound server object, contains primitive server objects including a Java Archive (JAR) file andmultiple configuration file entries. In another example, a server process is a compound server object, containing primitive server objects, such as configuration file entries (e.g., a permission entry, a priority entry, a control signal entry), files,and executables. An abstract configuration server object is a special type of a primitive server object that represents an entry in a configuration file via a corresponding entry in an abstract configuration file, where mapping of a configuration file to acommon abstract configuration format is provided by a configuration file-specific grammar. For example, in the MICROSOFT WINDOWS NT/W2K environment, configuration file entries are stored in "".ini"" files or XML configuration files. In the UNIXenvironment, configuration file entries are stored in text files such as ""inetd.conf"" files or ""httpd.conf"", or XML configuration files. To reconcile the difference between the configuration file entry formats across different servers, a common abstract configuration format is provided by normalizing configuration file entries through a supported configuration file-specificgrammar. By modeling each configuration file entry as an abstract configuration file entry through this normalization process, server change operations may be made based on the normalized abstract configuration file entries. The change operationsrequested by the abstract configuration file entries are performed, and the changes are then communicated to the actual configuration file entries. Thus, in this embodiment, configuration file entries can be individually managed through use of abstractconfiguration file entries, without having to change the entire configuration file each time a server change operation changes an individual entry. Configuration file-specific grammars may be provided for numerous systems, including SOLARIS, LINUX,MICROSOFT WINDOWS NT4/W2K, Apache, WEBLOGIC, and WEBSPHERE. A component server object is a sequenced collection of server objects. For example, an NT Service Pack is a sequenced collection of NT Hot Fixes to be applied in a predefined order. Accordingly, a collection of predefined related changeoperations can be effected in order through a component server. In addition to the constituencies of the instruction set 715 described above, the instruction set 715 specifies the server change operations to be made across the target servers 15 on a collection of predetermined server objects by communicatingwith the server objects (e.g., files or configuration file entries 705), the dependency graph 720, and the parameter file 710. Server change operations can be used to deploy or copy files, directories, and software packages to the target servers 15. Change operations can also be used to edit configuration file entries 705 without having to log into each target server 15. In one embodiment, the instruction set 715 provides the information needed by the target servers 15 and their associated virtualserver agents 35 to carry out the server change operations. In one embodiment, the instruction set 715 provides a transaction context that is identified by begin-transaction and end-transaction statements encapsulating the server object changeoperations. After the begin-transaction statement is made, the instruction set provides the necessary information to perform the change operations requested by the application programs 25. The instruction set 715 also provides error-handling instructions for the target servers and their associated virtual server agents. In one embodiment, several types of errors are available. Soft errors are available to alert the targetservers and their virtual server agents of a likelihood of occurrence of an error during server change operations. Because no actual error has occurred, the user 10 may ignore the soft errors and continue with the execution of the server changeoperations. Alternatively, the user 10 may instruct the virtual server agents to explicitly undo all the changes made from the execution of the server change operations after reviewing the error information returned by the soft errors. Hard errors are available to notify the virtual server agents of an occurrence of an error during the performance of server change operations on the target servers. In one embodiment, the hard errors can be programmed to automatically triggerundo operations to undo any of the changes made during the execution of the server change operations. In another embodiment, the hard errors can be programmed to abort the execution of the remainder of transaction package change operations. The harderrors are triggered by error conditions set forth in the instruction set 715. These error conditions specify that if certain conditions occur, the hard errors should be sent to the target servers and their associated virtual server agents. The instruction set 715 also includes prerequisite information for the instructions. An example of this prerequisite information can include, but are not limited to, the minimum set of change operation instructions that must be specified in atransaction package for its successful execution. For example, to successfully add a COM+ component on the target servers, instructions for adding the COM+ entry in the catalog, the corresponding Registry entry, and the corresponding DLL file must bespecified in the transaction package. Another example of the prerequisite information can include types of permissions needed to carry out the change operations, minimum disk space required by the target servers 15, and the type of operating systemrequired. In addition, the prerequisite information can also include implicit instructions for hierarchical server objects. For example, to add a file in the target servers, the parent directory for the file should exist in the target servers, so thatthe file can be created under the specified parent directory in these servers. In one embodiment, the instruction set 715 defines the changes that need to be made on the server objects by using named parameters, and later replacing the parameters with actual values obtained from a parameter file 710. The virtual serveragents 35 receive the transaction package 700 on behalf of their associated target servers 15, and replace the named parameters with values obtained from the parameter file 710. These named parameters are particularly useful when performing serverchange operations on server objects that are directed to multiple target servers 15, because the named parameter representing the identity of each target server can be replaced with the actual server identifiers by the virtual server agents 35. Forexample, named parameters of an instruction can reference a path name for a target server 15 that includes a host name or an IP address of the target server 15. These parameters are replaced with actual server identifiers for each target server 15, asprovided in the parameter file(s) 710. In one embodiment, the parameter file 710 can be either a global parameter file or a host-specific parameter file. A global parameter file contains parameters that are configured by the user 10, thus the identical global parameter file ispassed to all target servers 15. A host specific parameter file contains parameters that are specific to each of target servers 15, thus the host specific parameter file is different for each of target servers 15. Parameter values contained in theglobal parameter file are useful when copying the same server object to the same destination on multiple target servers 15. Examples of this type of parameter are the user's name and password. For parameter values contained in the host-specificparameter file, the parameter values are resolved by each of the target servers 15. Examples of these parameters are host names, and path names of the target servers 15. In addition, there are intrinsic parameters that are resolved through hostenvironment variables on the target server. In one embodiment, one or more parameter files 710 are associated with one or more target servers. For example, for a Window-based target server, ""windir"" and IP address are examples of host environmentvariables that can be used to resolve intrinsic parameters associated with one or more target servers and passed via the transaction package 700. Referring to FIGS. 1 and 7, in one embodiment, instead of using abstract system calls to carry out server change operations generated by the application programs 25, a transaction package 700 can be used to carry out these change operationsusing an XML-based instruction set 715. To accommodate both system call level commands and XML-based instruction sets, each virtual server agent 35 is divided into two parts. One part of the virtual server agent 35 is an XML API that can interpret theXML-based instruction set 715 contained in the transaction package 700, and the other part of the virtual server agent 35 is a system call API that can interpret abstract system calls. Thus, when a virtual server agent 35 receives an XML-basedtransaction package 700 through the virtual server client 30, the XML-based instruction set 715 in the transaction package 700 can be interpreted via the XML API. In an alternative embodiment, the transaction package 700 can be implemented with atext-based instruction set 715. The commands of the text-based instruction set 715 are translated into abstract system calls that are in turn interpreted by the system call API. Below is an example of an XML-based transaction package, named ""Package.sub.--1.XML,"" specifying a prerequisite, transaction context, compound server object, sequence, and error handling information using an XML-based instruction set 715. Package.sub.--1.XML TABLE-US-00001 <blpackage schema-version=""2.0"" created-date=""02/12/03"" modified- date=""02/22/02"" revision=""23""> <name> name of the blpackage </name> <description> description of the package </description> <sourcetype=""host"">web-demo1</source> <!-- default parameters --> <param name=""$APP_PATH""> c:\program files\app </param> <param-file>foo.params</param-file> <applies-to> <condition> <os>""$(os) =Windows""</os> <os-version>$ (os-version) > 5</os-version> <service-pack>2</service-pack> </condition> </applies-to> <!-- requires the following items before we deploy this package --> <depends><condition> <application>SQL server</application> <version>$(version) = 8.0 </version> </condition> </depends> <!-- failure conditions if the following exit on target --> <FailIf> <ErrorLevel <4/> </FailIf > <transaction id=""0""> <command id = ""1005"" undo=""net start w3svc"">net stop w3svc</command> <service action=""add"" refid=""1003"" key=""RSCDsvc""> <depends> <file refid=""1002""/> </depends></service> <command id = ""1006"" undo=""net stop w3svc"">net start w3svc </command> <file action=""add"" key=""%WINDIR%ado.dll"" refid=""1001""/> <file action=""add"" key=""%WINDIR%/System32/svchost.exe"" refid=""1002"" /> <assets><file id=""1001""> <name>ado.dll</name> <source>0</source> <attributes>2</attributes> <created-date>02/12/03</created-date> <modified-date>02/22/03</modified-date><owner></owner> <group>0</group> <acl key=""%WINDIR%ado.dll"" owner=""BUILTIN\Administrators""> <ace action=""add"" id=""1313"">web admins</ace> <acemode>0</acemode> <aceflags>3</aceflags><acemask>1179817</acemask> <ace action=""add"" id=""1314"">dbas</ace> <acemode>1</acemode> <aceflags>3</aceflags> <acemask>2032127</acemask> </acl> </file> <file id=""1002""><name>svchost.exe</name> <source>0</source> <attributes>2</attributes> <created-date>02/12/03</created-date> <modified-date>02/22/03</modified-date> <owner></owner><group>0</group> <acl key=""%WINDIR%ado.dll"" owner=""BUILTIN\Administrators""> <ace action=""add"" id=""1313"">web admins</ace> <acemode>0</acemode> <aceflags>3</aceflags><acemask>1179817</acemask> <ace action=""add"" id=""1314"">dbas</ace> <acemode>1</acemode> <aceflags>3</aceflags> <acemask>2032127</acemask> </acl> </file> <service id=""1003""name=""RSCDsvc""> <binary_path>%WINDIR%/System32/svchost.exe</binary_path> <name>RSCDsvc</name> <description></description> <state>Stopped</state> <runas> <userid>$Token1</userid><pwd>$Token2</pwd> </runas> </service> </assets> </transaction> </blpackage> The Parameter file foo.params contains $TOKEN1 as a parameter that corresponds to user id - ""R2D2\web-admins"" $TOKEN2 as a parameter topassword for R2D2\web-admins - ""c3-po"" In this example, the <blpackage schema> tag denotes the beginning of the instruction set 715. The <name>, <description> and <source type> tags respectively provide the package name, description, and source server, inthis example ""web-demo1,"" server, from where the package was created. The <param> tag is use to specify location, in this example ""c:\program files\app"", of parameters having the name of ""$APP_PATH"" within the package 700, while <param-file>tag is used to specify an external parameter file 710 called ""foo.params"". In the prerequisite section, which is introduced with the <applies-to> tag, the MS Windows operating system, version greater than 5 and with service pack 2, is specified asa prerequisite to carry out this instruction set. Also in the prerequisite section, the <depends> tag, indicates that SQL Server, version 8, is a pre-requisite for the package. The error handling information, which is introduced with the<FailIF> tag, specifies that the server operations should fail if error level falls below 4. The <transaction id=""0""> tag introduces the set of change operations requested, and any dependency information for the specified server change operations. The execution sequence information for the server change operations is providedunder the <depends> tag. In this example, the order of the operations, -stop w3svc, add service RSCDsvc, start w3svc, add file ado.dll, and add file svchost.exe, would occur in the following order: stop w3svc, add file svchost.exe, add serviceRSCDsvc, start w3svc, and add file ado.dll. The server assets that are being affected by the server change operations are specified under the <assets> tag. This example has three assets--two files, id=1001 and id=1002, and one service, id=1003. Each file has a corresponding nestedFile ACL having the <acl key> tags. The parameter file 710, ""foo.params"" has two parameters that are used in the transaction package 700, named as ""$TOKEN1"" and ""$TOKEN2"". Instead of passing physical values directed to each target server, the named parameters are sent, and areresolved by the parameter file 710 when the parameter file 710 substitutes the actual values that are specific for each target servers 15 for the named parameters. As shown in this example, these values can be a path for a collection of server objects(e.g., files), a user name, or a password. In this example, the first parameter, $TOKEN1, corresponds to the user name ""R2D2\web-admins"", and the parameter $TOKEN 2 corresponds to the password ""c3-po."" In one embodiment, multiple transaction packages can be aggregated into a transaction project 725. The transaction project 725 coordinates the transaction packages 700 and their server change operations, so that each server change operation canbe executed in a transaction safe manner. Below is an example of an XML transaction project 725 containing a transaction package named ""BLPkg_web.XML,"" directed to six web servers, a transaction package named ""BLPkg_app.XML,"" directed to two applicationservers, and a transaction package named ""BLPkg_db.XML,"" directed to two database servers: TABLE-US-00002 <PROJECT> <BLPkg> <Name>BLPkg_web.XML</Name> <Hosts>Web Server1</Hosts> <Hosts>Web Server2</Hosts> <Hosts>Web Server3</Hosts> <Hosts>Web Server4</Hosts><Hosts>Web Server5</Hosts> <Hosts>Web Server6</Hosts> </BLPkg> <BLPkg> <Name>BLPkg_app.XML</Name> <Hosts>App Server1</Hosts> <Hosts>App Server2</Hosts> </BLPkg> <BLPkg><Name>BLPkg_db.XML</Name> <Hosts>Db Server1</Hosts> <Hosts>Db Server2</Hosts> </BLPkg> </PROJECT> In this example, first, the package ""BLPkg_web.XML"" is to be executed on six web servers named Web Server1 through Web Server6, the package ""BLPkg_app.XML"" is to be executed on two application servers, and the package ""BLPkg_db.XML"" is to beexecuted on two database servers. The configuration manager 25B, or any of the application programs 25, prepares the transaction package 700 and instructs the virtual server client 30 to pass the package 700 to the virtual server agents 35 associated with the target servers. After receiving the transaction package 700, the virtual server agents 35 unpack the package 700 and execute the operations on their associated target servers 15. A method for achieving this is shown in FIG. 8 In Step 800, Configuration manager 25B checks the prerequisite information of the requested change operations. Examples of the prerequisite information include checks related to integrity and completeness of package such as prompting for username and password if required, making sure simple dependencies are resolved, and making sure the corresponding files are in the package. After the prerequisites are checked in step 800, in step 810, the configuration manager 25B checks for the sequence information setting forth the execution order of the requested change operations in the package's instruction set 715. If thesequence information is not provided in the instruction set 715, the configuration manager 25B accesses the external dependency graph 720 to obtain the sequence information. After completion of step 810, in step 815, the configuration manager 25Btransfers the package 700 and the associated files and parameter files to the virtual server agents 35 via the virtual server client 30. In one embodiment, the virtual server agent 35 receives the completed transaction package 700 via the virtual server client 30. On the virtual server agent 35, in step 820, the named parameters are substituted with actual values. The virtualserver agent 35 then executes the server change operations specified in the transaction package for its associated target server 15. In another embodiment, instead of transporting the completed transaction package 700, the virtual server client 30 maytransport only the parameter file 710 and the instruction set 715, without the actual files or any of the server objects, to the virtual server agent 35, in case the user 10 optionally elects to proceed with a dry run. The dry run provides an additionalset of tests to see if the instruction set 715 can be carried out by the recipient virtual server agent 35 before making any changes on the target server 15. After the virtual server agent 35 receives a partial transaction package 700 from the virtualserver client 30, in step 820, the parameters are substituted with actual values as provided in the parameter file 710. After completing the dry run, the configuration manager 25B can transfer the entire package 700 to the virtual server agents 35 viathe virtual server client 30 for actual execution. Before executing the operations on each target server 15, in step 835, the agent updates an undo log. The undo log, which is maintained for each target server, records the executed operations, and tracks the changes made by these operations, sothat if an error occurs while executing the servers change operations, the operations can be undone as recorded in the undo log. This can be achieved by tracing back the steps performed during the server change operations using the undo log records. Inone embodiment, the undo log is identical in structure to the transaction package, but with the parameter files arranged in reverse order and the change operations recorded in reverse order. Finally in step 840, the server change operations are executedon the target servers 15. Referring now to FIG. 9, a method for executing and undoing server change operation in a transaction safe manner is described. In step 900, one or more application programs 25 generate and specify change operations using a transaction package700. Different types of server objects and corresponding target servers 15 are supported through the instruction set provided in the transaction package 700. Next, in step 910, the application program specifies the target server(s) to which the serverchange operations are directed. In step 920, the application program specifies the parameter file that provides parameters and their corresponding values defined for each of the target servers, and places this information in the transaction package 700. In step 930, the server client 30 sends the server change operation from the application program 25 to the virtual server agents 35 on the target servers 15. In step 940, the target servers 15 execute the server change operations in a transaction-safemanner. Configuration Manager Referring now to FIG. 10, the configuration manager 25B is an exemplary application program 25 that tracks changes and compliance and configures target servers by generating and deploying a transaction package 700. The configuration manager 25Bprovides a method and system for configuring different servers using a variety of software modules, such as a browser 1000, a template 1010, a recorder 1020, a reference model 1030, a comparator 1040, and a corrector 1050. The browser 1000 browses server objects in different servers in real time, to examine the current configuration of the server objects contained inside of the servers 15. First, the user selects a server he/she wishes to browse. Throughbrowsing, a collection of server object identifiers that identify each server object are selected and entered into the template 1010. Alternatively, instead of building the template 1010 from browsing, the template 1010 may be imported from an externalvendor. The template 1010 may also be created by including one or more previously defined templates. In one embodiment, the template 1010 is an abstract template that identifies server objects contained in a server. For example, if an Apache servercontains files, and configuration file entries, an Apache server template 1010 contains identifiers that are sufficient to identify the files and configuration file entries of the Apache server. After identifying server objects on the template 1010,values of these identified server objects are recorded to configure servers on the network. In one embodiment, the recorder 1020 takes a snapshot of values (e.g., attributes) associated with a collection of server objects. In another embodiment the recorder 1020 takes a snapshot of values of the server objects identified in thetemplate 1010. The values may come from any of the servers browsed by the browser. Alternatively, the values may come from a selected server, also referred to as a gold server. Examples of the values (or attributes) of files recorded in the snapshotsinclude, but are not limited to, file names, sizes, permissions, owners, creation dates, modification dates, and versions. Examples of directory attributes (or values) recorded in snapshots are directory locations, permissions, creation dates, andmodification dates. Examples of registry entry attributes recorded in snapshots are field names, and corresponding values. In one embodiment, the recorded values or snapshot results of the gold server are used to derive baseline values and compliance ranges in the reference model 1030. In another embodiment, instead of creating the reference model, the snapshotresults can be directly used to track changes, configure existing servers and provision new servers on the network. Snapshot results record a configuration of a server at a point in time, thus they cannot be changed. However, the reference model 1030can be edited to represent the reference implementation for compliance or provisioning purposes. For example, when the snapshots of the gold server are taken by the recorder 1020, the values collected in the snapshots are saved in the reference model 1030. Based on the values of the gold server, the reference model 1030 can provideinformation, such as baseline values and compliance ranges, for use by other servers in the network to identify their drift in comparison to the gold server. The baseline values provide basis for configuration of other servers. The compliance rangesare ranges of acceptable configuration values that are acceptable for other servers for these servers to be in compliance. Alternative to creating a reference model 1030, the reference model 1030 may be an imported reference model that was created by anexternal vendor. Also, the reference model 1030 may include one or more previously defined reference models. Subsequently, the comparator 1040 compares a server to the reference model 1030 to track changes and track compliance in the server. In another example, a snapshot of a current configuration of a server captured at an arbitrary point in time can be compared against a live-version of the captured server to track changes in the captured server. The configuration of a servercan include explicitly selected server objects that are on the server or implicitly selected server objects provided through the template 1010. In yet another example, the snapshot results of recurring snapshots of a server taken at scheduled time intervals (e.g., daily, weekly, etc.) can be used to track changes in the captured server. In this example, the first snapshot of the serverserves as a baseline, so that for subsequent snapshots, only the changes against the baseline are saved in the snapshot results. Thus, any snapshot result taken during these time intervals can be reconstructed to view its entire configuration andcontent by combining the baseline with the incremental changes saved in the snapshot result. Moreover, the incremental changes show changes occurred in the configuration of the server over a period of time for the user to analyze the changes of thisparticular server. Subsequently, the comparator 1040 compares a live-version of the server to the baseline snapshot to track and save only changes on the server. In one embodiment, two live servers can be compared against each other without the snapshots or the reference model 1030, on an ad-hoc basis. In this embodiment, the user 10 may explicitly select server objects that are commonly shared betweenthe two live servers so that the comparator 1040 can compare the values of the sever objects between these servers. In another example of this embodiment, the comparator 1040 compares the values of the server objects that are implicitly provided by thetemplate 1010. After comparing the servers and identifying the discrepancies present in the compared servers, the corrector 1050 corrects the discrepancies in each target server. The corrector 1050 examines the discrepancies and generates server changeoperations that request services from the operating systems running on the target servers to correct these discrepancies. As described previously, server change operations can be presented to the servers as a transaction package 700 to removediscrepancies and synchronize the target servers to the reference model 1030 in a transaction-safe manner. Similarly, in one embodiment, configuration updates to the target servers can be made by the transaction package 700. In particular, theconfiguration manager 25B first makes all the updates to the reference model 1030, which then packages the discrepancies (introduced in the reference model) as updates in the transaction package 700. The transaction package 700 is propagated to thetarget servers to synchronize them to the updated reference model 1030. The reference model 1030 can also be used to provision a new server to ensure consistency in the configuration of the servers in the network when a new server is added. For example, an Apache reference model 1030 can be used to provision a newApache server so that the configuration of all Apache servers in the network are consistent with each other. In addition, both the reference model 1030 and snapshots can be used restore a previous configuration of a server in case of a disaster recovery. In particular, in case of a server failure, this server can recover its most recent configurationand contents by reconstructing the server's configuration from the snapshots taken over a period of time. With the reference model 1030, in case of a server failure, the server can look to the basis values of the gold server in the reference model 1030and synchronize to this configuration to be in compliance again. FIG. 11 shows an exemplary method of tracking changes and compliance, and correcting component as well as parameter-level changes across multiple servers. In step 1100, the configuration manager 25B browses servers in the network to obtainserver asset and configuration (together referred to as server objects) status information for each server. In the browsing step 1100, selected server objects and their dependent server objects are browsed in real time. In one embodiment, live serversin the network and their stored server objects can be browsed via a Graphic User Interface (GUI) which presents the servers and server objects hierarchically. Next, in step 1105, the configuration manager 25B, selects identifiers of the browsed server objects to be in the template 1010. The identifiers can include any information about the server object that is sufficient to identify the serverobject. Next in step 1110, the configuration manager selects a gold server, to provide a baseline configuration and configuration ranges for other servers in the network. In step 1115 snapshots of the values of the server objects identified in thetemplate that are present in the gold server are recorded in the reference model 1030. Based on the values recorded in the reference model 1030, in step 1115, the reference model establishes compliance rules, such as the baseline configuration and thecompliance ranges. Alternatively, the snapshots of the values are not recorded in the reference model. Instead, the snapshot results of a server can be used to directly compare against a live-version of this server to track changes. In step 1120, the configuration manager 25B selects servers and their respective configuration parameters (also referred to as server objects) to compare against the reference model 1030. These servers can be selected from any live servers onthe network. Alternatively, these live-version servers can also be directly compared against their own snapshots, taken at an arbitrary point in a time, or taken over a specific period, without the reference model 1030, to track compliance and changesin these servers. The results of the comparing step 1125 can be viewed item-by-item, by showing which software (or server objects) are installed or not installed, or host-by-host, by showing each server and the server objects present on the server. Finally, based on the discrepancies obtained during the comparing step 1120, a correcting step 1130 fixes the servers to be in compliance by synchronizing configuration of these servers with the reference model 1030 or the snapshots. Moreover,a newly added servers can be provisioned to be consistent with other servers by synchronizing this new server to the reference model 1030. Referring to FIG. 12, in one embodiment, the configuration manager 25B can manage the same type of configuration parameters (also referred to as server objects) across different servers by specifying one or more categories for the parameters intemplates. The template 1200 first specifies the ""server-type"" category (e.g., application server category 1210, web server category 1215, and database server category 1220) to specify to what type of server each server object in the network belongs,and then specifies the ""parameter-type"" category (e.g., network parameters, capacity parameters, availability parameters, performance parameters, security parameters) to specify the parameter type to which each server object belongs. Each server objectin the template 1200 can be classified under one or more categories, sub-categories and keywords. In one example, for security parameters, sub-categories can include encryption type and authentication type, and keywords can include ""read-only"" andconstant. Referring briefly to FIG. 13, an example of the system described with reference to FIG. 12 is shown. In this example, Internet 1300 and intranet 1305 are available to different categories of servers 1215, 1210, 1220 through firewalls 1310. Webserver category 1215 include an IIS server 1215A for intranet services and Apache Servers 1215B, 1215C for the HTTP/FTP and Wireless/Video Internet services respectively. Application server category 1210 include servers running sales applications 1210A,on-line brokerage applications 1210B, and customer service application 1210C. Database server category 1220 include sales, trading, and account databases 1220A, 1220B, and 1220C. Referring again to FIG. 12, each server object in the template 1200 is placed into a parameter category based on its function and server type. For example, the server objects may be grouped into network parameters 1330, capacity parameters1335, availability parameters 1340, performance parameters 1345, and security parameters 1350. The configuration manager 25B selects categorically related server objects from each category of servers and stores them in the template 1200. For example,all the security parameters in the application server category 1210 and all the network parameters in the application server category 1210 are stored in the template 1200. Referring again to FIG. 13, for the web server category 1215, web server configuration parameters a, b, c, d, e are respectively categorized as network parameters 1330, capacity parameters 1335, availability parameters 1340, performanceparameters 1345, and security parameters 1350. For the application server category 1210, application server configuration parameters i, ii, iii, iv, v are respectively categorized as network parameters 1330, capacity parameters 1335, availabilityparameters 1340, performance parameters 1345, and security parameters 1350. Similarly, for the database server category 1220, database server configuration parameters I, II, III, IV, V are respectively categorized as network parameters 1330, capacityparameters 1335, availability parameters 1340, performance parameters 1345, and security parameters 1350. After categorizing all the server objects in the template 1200 by the server-type categories and the parameter-type categories, a new template can be derived from the template 1200 to isolate the categorically related server objects across theserver categories and manage the configuration parameters as if they belonged to a single server. For example, security configuration parameters of an individual web server can be changed in concert with other security configuration parameters for otherweb servers, as well as for application servers and database servers. In the example shown in FIG. 13, for instance, web server network parameter a can be changed in concert with network parameters i of the application server category 1210 and parameterI of the database server category 1220. Similarly, Web server capacity parameter b can be changed in concert with other capacity parameters ii of the application server category 1210 and II of the database server category 1220. Likewise, correlatedchanges of parameters can be performed for the availability parameters 1346, the performance parameters 1345, and the security parameters 1350. Referring to FIG. 14, an exemplary screenshot of a GUI-based configuration manager 25B includes a module referred to as an asset browser 1400, which allows a user 10 to browse live remote target servers 15, and to manage and store frequentlyused server assets (also referred to as server objects). The asset browser 1400 is divided into two panes. The left pane 1410 functions as either a Servers pane or a Depots pane, depending on a tab 1420 selected by the user 10. The Contents pane 1430,on the right side displays the contents of an item selected in the Servers or the Depots pane. In FIG. 14, the left pane 1410 displays the Servers pane which shows a hierarchical depiction of the servers that the user 10 manages. For example, the user 10 may arrange the servers into groups based on geographical location and/or operatingsystem. Server groups are divided into the eastern and western divisions of an enterprise, and within those groups, another level of hierarchy for MICROSOFT WINDOWS, UNIX, and LINUX-based servers. More specifically in FIG. 14, within the servers in theEastern Division 1440, the patches object 1460 in the ""sun-2"" server 1450 is selected. The Contents pane 1430 shows the contents of the patches object 1460. The Depots pane (not shown) can display central repositories of commonly accessed server objects (e.g., all files, software to be deployed, and pointers to the content of the files and software residing in other servers in the network). Inadditions, the Depots pane stores scheduled tasks to be performed, snapshots of server objects, Shell scripts, and transaction packages 700.Example In an overall example of operation of the configuration manage, the configuration manager browses live servers on a network, tracks changes and compliance in the servers by comparing their server objects against a reference model or a snapshot,and identifying any discrepancies from the reference model or the snapshot. By making records of the values of the gold server's server objects through a snapshot and saving the results as a reference model, the reference model may be used to auditother servers, to determine how configurations of the other servers have changed from the reference model. Alternatively, a server's own snapshot can be taken arbitrarily, or over a specific period of time to track changes in the server, without usingthe reference model. In one example, the server objects being compared in the audit process are provided automatically by the configuration manager via templates. In another example, the user may manually select the server objects to compare. Additionally, the audit process can be scheduled to track compliance over time. After identifying server configuration discrepancies present in the servers, the configuration manager 25B corrects the discrepancies by generating a transaction package 700, that contains server change operations to be performed on the servers15. The transaction package 700 bundles configuration changes operations and corresponding instructions to be deployed on remote target servers 15 to correct any discrepancies that exist in server objects contained in those servers 15. With thetransaction package 700, the configuration manager 25B can install any types of server objects from a single source to multiple locations. Similarly, the configuration manger 25B can uninstall software, and undo server object deployments on the remotetarget servers 15. As discussed previously, certain values inside the transaction package 700 can be parameterized and subsequently replaced with real values during the deployment of the transaction package 700 on the target servers 15, without changingthe contents of the transaction package 700 for each target server 15. In one particular example, the configuration manager 25B can be used to move a working MS SQL server database from a gold server to multiple target servers 15, to duplicate the changes made in this database to multiple servers. To achieve thisduplication, the user 10 copies the changes made on the SQL Server database to the reference model, so that the configuration manager 25B can later bundle these changes to other instances of the same SQL Server database in the remote target servers 15. The reference model and the remote target servers 15 have the same initial installation of the SQL Server database. The configuration manager takes a snapshot of the gold server to create a reference model that is used as a baseline to compare the SQLServer databases between the gold server and the target servers 15. The necessary database changes are first made to the gold server. Next, the configuration manager 25B creates a transaction package 700 to bundle these changes to be deployed on thetarget servers 15. The configuration manager 25B deploys the transaction package 700 to the virtual server agents 35 associated with the target servers 15 to request these changes to be made on their SQL Server databases. In some embodiments, the functionality of the systems and methods described above may be implemented as software on one or more general purpose computers. In such an embodiment, the software may be written in any one of a number of high-levellanguages, such as FORTRAN, PASCAL, C, C++, LISP, JAVA, or BASIC. Further, the software may be written in a script, macro, or functionality embedded in commercially available software, such as EXCEL or VISUAL BASIC. Additionally, the software could beimplemented in an assembly language directed to a microprocessor resident on a computer. For example, the software could be implemented in Intel 80.times.86 assembly language if it were configured to run on an IBM PC or PC clone. The software may beembedded on an article of manufacture including, but not limited to, a ""computer-readable medium"" such as a floppy disk, a hard disk, an optical disk, a magnetic tape, a PROM, an EPROM, or CD-ROM. Variations, modifications, and other implementations of what is described herein will occur to those of ordinary skill in the art without departing from the spirit and the scope of the invention as claimed. Accordingly, the invention is to bedefined not by the preceding illustrative description but instead by the spirit and scope of the following claims."
36|http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=70&p=2&f=G&l=50&d=PTXT&S1=(python.CLTX.+or+python.DCTX.)&OS=ACLM/python&RS=ACLM/python|System for translating diverse programming languages|A computer language translator that translates all or any portion thereof of source code in an original computer language to source code in a target computer language, which may then be translated back to the original language while still maintaining concept, syntax, form of expression, and formatting of the original source code.|"1. A computer language translator for translating a first Object-Oriented Programming (OOP) computer language source code to a second OOP computer language source code, thetranslator comprising: a computer having software executing thereon, the software having: an emulated Application Programming Interface (API) library including a table accessible by said software; said API library including data indicative of types ofdata manipulations of the first OOP computer language source code; said API library including second computer language API equivalent functions callable by said second computer language; said software identifying the type of data manipulation the firstOOP computer language source code performs and accessing the table of said API library and correlating the type of data manipulation the first OOP computer language source code performs to second OOP computer language source code; said softwaregenerating second OOP computer language source code based in part upon identified equivalent functions in the second computer language. 2. The computer language translator according to claim 1 wherein the translator is a bi-directional translator. 3. The computer language translator according to claim 2 wherein said translating software analyzes the second computer language source code to identify the type of data manipulation that the second computer language source code performs,accesses said library and correlates the type of data manipulation the second computer language source code performs to first computer language source code. 4. The computer language translator according to claim 3 wherein the correlation from the second computer language to the first computer language is independent of the context in which the second computer language source code is used, saidtranslating software generates re-translated first computer language source code that emulates the type of data manipulation the second computer language source code performs. 5. The computer language translator according to claim 2 wherein the re-translated first computer language source code equates to the first computer language source code in: context, syntax, form of expression and formatting. 6. The computer language translator according to claim 1 wherein said translating software performs a name adjustment when an incompatibility between the first computer language source code and the second computer language source code occurs. 7. The computer language translator according to claim 1 wherein the first computer language source code comprises a class. 8. The computer language translator according to claim 7 wherein the class consists of units selected from the group consisting of: methods, data fields, inner-classes, and combination thereof. 9. The computer language translator according to claim 1 wherein the first computer language source code comprises an identifier. 10. The computer language translator according to claim 9 wherein said software performs a name adjustment when an incompatibility between the identifier and the second computer language source code occurs. 11. The computer language translator according to claim 1 wherein said software generates a tagged element inserted in the second computer language source code indicative of a type of data manipulation the first computer language source codeperforms. 12. The computer language translator according to claim 11 wherein the tagged element comprises information selected from the group consisting of: formatting, translation data, and first computer language source code. 13. The computer language translator according to claim 1 wherein the first computer language is Java and the second computer language is C++, Objective-C or C#. 14. The computer language translator according to claim 1 wherein the first computer language is C# and the second computer language is C++, Objective-C or Java. 15. The computer language translator according to claim 1 wherein the first or the second computer language is a scripting language. 16. The computer language translator according to claim 15 wherein the scripting language is selected from the group consisting of JavaScript, Ruby, Python, Perl and PHP. 17. The computer language translator according to claim 1 further comprising a parser for parsing the first computer language source code into parsed elements. Description FIELD OF THE INVENTION The present invention relates to a system and method for translating source code between different computer languages and different operating environments. More specifically, the present invention relates to a bi-directional computer languagetranslator where source code written in an original language may be translated to a target language, and then may be translated back to the original language while still maintaining concept, syntax, form of expression, and formatting of the originalsource code.BACKGROUND OF THE INVENTION Computer systems and applications have reached almost every market on a global scale. As a result, vast sums of money are spent in researching and developing new applications and programs. Typically, these applications are written in acomputer language selected by a software developer or by a group of software developers. A trend among software developers has been toward use of object-oriented programming (""OOP"") languages. Three major categories of OOP languages are (1) systems programming languages, which are generally unmanaged and natively compiled and, inturn, executed natively; (2) productivity-oriented business application programming languages, which are generally managed and compiled to non-native bytecodes or a non-native intermediate language (""IL"") and, in turn, executed non-natively by a managedruntime environment or virtual machine; and (3) scripting languages, which are generally managed and expressed in plain text source code instead of a binary form like compiled languages, and, in turn, plain text source code is executed non-natively by ascripting runtime environment or virtual machine. Scripting languages are relatively easy-to-program computer languages that use simpler and more permissive forms of expression than compiled languages, such as Java and C++. Scripting language programs are usually expressed in plain text assource code instead of a binary form like compiled programs, which makes them very readable and easy to modify. They are generally interpreted instead of being explicitly compiled by the programmer. This means that programmers see immediate resultsfrom their programming statements and makes for a very interactive development experience. These features make scripting languages well suited for beginners, experimentation and research, system administrative tasks, and high-productivity,fast-turn-around development projects. Scripting languages are becoming dominant in Web programming, both for Web server and Web client programming. Scripting languages are also used in, for example, Adobe Flash, integrated runtime environments fromAdobe, Microsoft, and Sun, desktop operating environments like Mac OS X, as well as mobile devices, such as iPhone. For these reasons, scripting languages are very popular with programmers and the range of devices that supports them continues to grow. Systems programming languages are typically used for developing performance critical applications, operating systems, operating environments, operating system specific applications, managed runtime environments and virtual machines, embeddedsystems, and hardware specific software, such as for instance, device drivers. Systems programming languages are generally lower-level languages which offer finer control over the run-time execution of applications. Systems programming languagesinclude, for instance but are not limited to C and C++. Productivity-oriented business application languages are typically used for developing applications for electronic commerce, wireless devices, multimedia devices and platforms, accessing databases, web applications, and other business-relatedneeds. Productivity-oriented business application languages are generally higher-level languages which offer greater programmer productivity and increased reliability during the run-time execution of applications. Business application languagesinclude, for instance but are not limited to Java.RTM. and C# (pronounced, ""C-Sharp""). These however, are just a few of the many OOP languages that may be utilized in generating applications. Traditionally, software developers choose one computer language for systems programming and another for business applications programming. In doing so, however, they must make sacrifices and accept the tradeoffs of the selected language. Theapplication, design methodology, and business model may all factor into the choice of programming language used for a particular application. For instance, C++ is typically viewed as an advantageous language for creating large-scale applications, whereas Java is typically viewed as optimized for the distribution of program objects in a network such as the Internet. Java is generallyconsidered a higher level language than C++, that is, closer to the actual business application. As a result, many programmers prefer to write programs in Java because it is generally considered an easier language to use than C++. Another advantage Java provides is that Java objects cannot contain references to data external to themselves or other known objects. This ensures that an instruction input by a programmer cannot contain an address of data storage in anotherapplication or in the operating system itself, either of which could cause the program and possibly even the operating system to terminate or crash. In addition, Java utilizes a virtual machine that makes a number of checks on each object to ensureintegrity. This results in a finished application that is not prone to low-level memory errors and requires considerably less debugging. C++ on the other hand does not have these safety functions such that a programmer may inadvertently or maliciouslycause problems with the operating system. In addition, many of the computer viruses seen today exploit this characteristic of C++ to cause widespread computer problems. Many of these problems could be avoided by utilizing Java because of the built-insafety checks and balances inherent to the language. Alternatively, there are some distinct advantages associated with C++ as opposed to Java. For instance, C++ is generally considered a higher performance language than Java. Once an application is written in C++, it may be compiled to nativecode or machine code, as opposed to Java, which is typically compiled into bytecode. As a result, unlike Java, a program compiled into native code does not need to operate with a virtual machine, which results in increased application performance. Another advantage to compiling a program to native code is that it is very difficult to derive the C++ source code from the native code, whereas it is a fairly simple matter to derive the Java source code from the compiled bytecode. Therefore, C++ canprovide greater protection for a company's intellectual property. In view of the forgoing, there is an inherent tension between using Java and using C++. Many programmers would prefer to write programs in Java, however many companies want their end product to be completed in C++ so that it may be compiledinto native code. However, companies also recognize the benefits of using Java, realizing that it may be a faster and less expensive way to get new products and services to market. This is because Java is generally considered an easier language to useand also because of the greatly reduced debugging time associated with new applications. Historically it has been very difficult or nearly impossible to convert a program written in C++ to Java and/or vice versa. To do so requires manual porting, which is generally labor intensive, error prone, and requires extensive re-testing. To address these issues and minimize the differences between computer languages, a number of existing systems have tried a number of approaches. These include for instance: (1) cross-language interoperability layers and object mappingmechanisms; (2) native compilers for traditionally non-natively compiled languages; (3) programs which convert or migrate computer programs from one language to another language; and (4) programs which translate computer programs between differentcomputer languages. None of these approaches, however, have provided an acceptable solution. For instance, one approach taken is cross-language interoperability layers and object mapping mechanisms including the Sun Microsystems.RTM. Java Native Interface.TM. (JNI), the Microsoft.RTM. Common Object Model.TM. (COM), and the ObjectManagement Group.RTM. (OMG) Common Object Request Broker Architecture.TM. (CORBA). Such solutions are generally suited for integrating two or more different computer languages and operating environments. However, they do not eliminate the need formiddleware, such as virtual machines, managed runtime environments, and object request brokers (ORBs), but instead increase dependence on these. This dependence make these solutions unsuitable for demanding low-level systems programming for developingfor instance, operating systems, virtual machines, and embedded systems. A second approach taken includes native compilers for traditionally non-natively compiled languages including, for instance, the GNU.RTM. Compiler for Java (GCJ) and the Excelsior JET. The GNU Compiler for Java (GCJ) is a free (open source)software project and is disclosed in U.S. Pat. No. 6,110,226. These products compile Java source code or Java bytecode, a platform-independent intermediate language, to native binary executables. The GCJ compiler may generate native binaryexecutables, which do not require a virtual machine to execute program, so long as the compiled Java program does not make use of Java classes or objects, which are externally referenced or otherwise not natively compiled. In the latter case, thecompiled native binary executable requires an internal (statically-linked) or external (dynamically-linked) virtual machine, which suffers from the same drawbacks as cross-language interoperability layers and object mapping mechanisms. Alternatively,Excelsior JET for instance, generates native binary executables that generally depend on the presence of a virtual machine on the client system in order to run. However, these requirements carry the same drawbacks as common cross-languageinteroperability layers and therefore negate most of the benefits of native compilers. While the GCJ compiler does support interoperability with C++ through CNI (Cygnus.RTM. Native Interface), this means of interoperability however, is effectively limited to the GNU C++ compiler. GCJ does not support interoperability withleading platform-specific C++ compilers, such as Microsoft Visual C++.RTM. for Microsoft Windows.RTM. operating system, nor does it support the industry-standard JNI to interoperate with leading Java virtual machines. Additionally, native compilers donot translate source code to another computer language, so they do not inherently benefit from wealth of available software development tools, such as compilers, linkers, optimizers, and debuggers, or features of other popular computer languages, such asC++. A third approach has been to convert or migrate source code in one computer language to another computer language. This approach is disclosed in U.S. Pat. No. 6,453,464 (""the '464 patent""). This approach is directed toward migrating sourcecode from an aging computer language, such as for instance COBOL, to an OOP language, such as Java. However, the resulting translated source code does not fully preserve the style and spirit of the original source code, is not easily human-readable, anddoes not support translation back to the original language. Therefore, the system disclosed in the '464 patent cannot be used for bi-directional translation between OOP languages to combine the best features of both languages. A fourth approach taken has included computer language-to-computer language translation. Existing translators include Toba, C2J, and J2C, among others. These solutions, however, have severe limitations of their respective design andimplementation. For instance, they fail to: manage objects exactly like the original language, manage arrays exactly like the original language, maintain the same high-level of thread safety characteristic in the original language, and support the fullbreadth of features of the original language. Additionally, none of these approaches support nor addresses bi-directional translation. Still further, these one-way translation approaches generally require translation of the entire application at onetime, rather than providing for translation of only a file or a portion of a file. Most modern scripting languages support Object-Oriented Programming (OOP) features. Such object-oriented scripting languages include, but are not limited to, JavaScript, Ruby, Python, recent versions of Perl and PHP. Object-orientedprogramming features make such scripting languages easier to understand and their programs more maintainable. Further, to assist programmers, modern object-oriented programming languages have their own language-specific API class library. However, not all the world's programmers are proficient in scripting languages and not all the world's devices support, or efficiently support, scripting languages. For example, a developer proficient in C++ or Java may prefer to run anexisting C++ or Java program in a scripting environment. To do so, the developer would need to become proficient in the target scripting language and its associated API class library and would need to manually rewrite the existing C++ or Java program inthe target scripting language. As another example, a developer proficient in a certain scripting language, such as JavaScript, Python, Ruby, Perl or PHP, would need to rewrite the program in C++ in order to run on an embedded or mobile device that didnot support scripting languages. Further, not all scripting languages are supported on all devices that support scripting. For example, Web browsers generally only support JavaScript and not Ruby, Python, Perl or PHP. Still further, a developer may need to produce a programthat runs at peak efficiency on a device. Even though the device supports scripting languages, in order to perform at maximum speed and efficiency, the program must instead use a compiled programming language, such as C++. In this example, thedeveloper would need to be proficient in C++ and either create or rewrite the program in C++ in order to meet the project requirements. Further, there is a vast amount of source code, especially open source programs, readily or freely available on the Internet and through various other forms of distribution, such as CD-ROM and DVD-ROM. However, usually an individual program isonly available for one particular computer language or perhaps a few computer languages. It is common for software developers to come across source code, especially by searching the Internet or by examining public source code repositories, which meettheir needs except that the source code they have found is in a different computer language than their project requires. Such developers are faced with either manually porting the source code to their target computer language or limit their searchresults to only source code in their target computer language, neither option being desirable. Further, for various business and technical reasons, certain devices will lack support for a particular scripting language and scripting runtime environment. The ability to add support for a particular scripting language and scripting runtimeenvironment would be a desirable feature for consumers and vendors alike, especially if the feature could be provided entirely in software without requiring any hardware modifications. For example, the lack of support for Adobe Flash and its associatedscripting language ActionScript on the iPhone has been a cause for complaint on the part of present and prospective iPhone user alike. At present, the wide range of Adobe Flash and ActionScript language programs are not available to iPhone users. Further, the inherent nature of scripting language programs being expressed in plain text source code is highly undesirable for certain applications and certain organizations. In order to safeguard intellectual property, preserve trade secrets,and prevent tampering, especially related to computer security, online crime, and circumventing protection schemes for digital media, it would be essential that certain applications only be distributed in compiled binary form. This would either precludescripting languages for such applications, or it would necessitate manually porting existing scripting language programs to a compiled language before being externally distributed. For these reasons, it is desirable for an invention to automatically translate source code from an object-oriented scripting language to a compiled object-oriented programming language. In line with this, it is further desirable to seamlessly and automatically translate a program at runtime, such as during the process of downloading and starting the program, from a foreign, or unsupported, object-oriented scripting language toa scripting language for which the host device includes built-in support. Further, it is desirable for an invention to automatically translate source code from a compiled object-oriented programming language to an object-oriented scripting language. Still further, is desirable for an invention to automatically translate source code from an object-oriented scripting language to another object-oriented scripting language. It is further desired to provide a computer language translation system that may be coupled with associated software libraries and accurately and reliably translate source codes between higher-level productivity-oriented business applicationprogramming languages and systems programming languages. It is still further desired to provide a bi-directional computer language translation system that may accurately and reliably translate source code from a higher-level productivity-oriented business application programming language to a systemsprogramming language and back again. It is yet further desired to provide a computer language translation system that is usable with multiple computing platforms, operating systems, and operating environments. It is also desired to provide a computer language translation system that provides deterministic automated object management without a garbage collector in order to be suitable for embedded systems. It is still further desired to provide a computer language translation system that may utilize industry-standard compiler tools, such as for instance, ANSI.RTM. C++ compilers. It is yet further desired to provide a computer language translation system that will be virtual machine agnostic, specifically, that will be able to operate without a virtual machine, or conversely, if desired, able to interoperate with anindustry standard virtual machine. It is still further desired to provide a computer language translation system that adheres to industry standards for cross-language interoperability, such as JNI for interoperability between Java environments and C++ environments. It is also desired to provide a computer language translation system that can be utilized by an Internet or Intranet search engine in order to automatically translate search results comprising source code from the original computer language ofthe found source code to the preferred computer language of the user requesting the search. It is also desired to provide a computer language translation system that can be utilized by the search indexing engine of an Internet or Intranet search engine. As the search indexing engine comes across source code, the search indexing enginecan use the invention to automatically translate source code from the original computer language of the source code to a multiplicity of computer languages, and then index the source code in its original computer language as well as a multiplicity ofcomputer languages. This would allow the search engine to find more code sample in diverse computer languages regardless of the computer language of the search query itself. It is yet further desired to provide a computer language translation system that may be utilized to translate only a portion of the source code to be translated.SUMMARY OF THE INVENTION Accordingly, a bi-directional translator has been provided that translates source code from one computer language to another divergent computer language. The translated source code closely resembles the original program source code in: concept,syntax, form of expression, and formatting. The system may be utilized as either an automatic translator that automatically translates source code from one computer language to another, or may be utilized in connection with a software developmentlibrary that enables programs to be manually ported from one computer language to another. When the system is utilized to automatically translate, a software tool is provided that automatically translates programs written in for instance, the Java language to the C++ language or from or to a scripting language, such as JavaScript,Python, Ruby or Perl. The tool makes use of tables and specific language knowledge of Java and C++ or the scripting language. This tool does not require clean-up or hand editing after translation. The final translated programs may be built and run asis. Alternatively, if the system is used by a programmer who is manually porting the source code, a software development library that implements the Java language and core APIs in ANSI standard C++ syntax is provided. Manually ported C++ programs,which make use of the library, closely resemble the original programs in the Java language. Because of the nature of divergent OOP languages, such as Java and C++ or scripting languages, the divergent languages are incompatible, meaning that one word does not simply translate straight to another word. For instance, the way variablesare identified in Java is different than in C++. To achieve bi-directional translation, the system, in resolving incompatibilities performs a name adjustment that is consistently utilized throughout. Because the name adjustments are always consistent,the system may re-translate either the entire document or only small sections as desired. The system also utilizes tagged elements or tags, which are inserted by the system to control how for instance; a specific section of source code is translated. The tagged element may include a Java instruction inserted into the C++translation. In this manner, if the Java source code instruction is incompatible with any C++ source code instruction, the original is not lost, but instead is maintained in a tagged element within the C++ source code. This feature facilitatesbi-directional translation because the original language may be exactly re-created from the translation, even with incompatibility problems. Throughout this application the following definitions apply: The term ""data"" as used herein means any indicia, signals, marks, domains, symbols, symbol sets, representations, and any other physical form or forms representing information, whether permanent or temporary, whether visible, audible, acoustic,electric, magnetic, electromagnetic, or otherwise manifested. The term ""data"" as used to represent particular information in one physical form shall be deemed to encompass any and all representations of the same particular information in a differentphysical form or forms. The term ""storage"" as used herein means data storage devices, apparatus, programs, circuits, systems, subsystems, or other elements whether implemented in hardware, software, or both, and whether used to process data in analog or digital form,into which data may be entered, and from which data may be obtained, as desired. Storage can be primary and/or secondary and can store data in electromagnetic, magnetic, optical, magneto-optical chemical and/or holographic forms. The term ""processor"" as used herein means data processing devices, apparatus, programs, circuits, systems, and subsystems, whether implemented in hardware, software, or both, and whether used to process data in analog or digital form. Theprocessor can operate on data in electromagnetic, magnetic, optical, magneto-optical chemical and/or holographic forms. The terms ""communicate"", ""communicating"" and ""communications"" as used herein include both conveying data from a source to a destination, as well as delivering data to a communications medium, system or link to be conveyed to a destination. Theterm ""communication"" as used herein means the act of communicating or the data communicated, as appropriate. The terms ""coupling"", ""coupled"", ""coupled to"", and ""coupled with"" as used herein each mean a relationship between or among two or more devices, apparatus, files, programs, media, components, networks, systems, subsystems, and/or means,constituting any one or more of (a) a connection, whether direct or through one or more other devices, apparatus, files, programs, media, components, networks, systems, subsystems, or means, (b) a communications relationship, whether direct or throughone or more other devices, apparatus, files, programs, media, components, networks, systems, subsystems, or means, or (c) a functional relationship in which the operation of any one or more of the relevant devices, apparatus, files, programs, media,components, networks, systems, subsystems, or means depends, in whole or in part, on the operation of any one or more others thereof. The term ""network"" as used herein means the communications linkage used to join two or more units, such as systems, networks, links, nodes, equipment, circuits, buses, and devices and includes without limitation networks of all kinds, includingcoupling amongst components of a system, both intra-networks and inter-networks and including, but not limited to, the Internet, and is not limited to any particular such network. The terms ""computer language"" and ""computer programming language"" as used herein mean a computer programming language for accomplishing software development and/or expressing the source code of a computer program. Furthermore, a ""computerprogramming language"" may or may not be classified as object-oriented. ""Computer programming languages"" include, but are not limited to, Java, C#, Objective-C, and C++. The terms ""virtual machine (VM),"" ""virtual machine environment,"" ""managed runtime,"" and ""managed runtime environment (MRE)"" as used herein refer to an apparatus, either software or hardware, which executes bytecode. Virtual machines may alsoinclude a platform application programming interface (API) or platform classes that bytecode programs may call or otherwise make use of. Virtual machines are designed to isolate software programs from the underlying native hardware and softwareplatform, which facilitates the creation, deployment, and execution of distributed, secure, platform-independent software programs and components. Java and C# are designed for virtual machine environments, whereas C++ and Objective-C are not. The term ""bytecode"" as used herein refers to a non-native binary representation of an executable program or software component. Bytecode is designed to be executed by a virtual machine. Bytecode may also be referred to as an ""intermediatelanguage (IL)."" The term ""garbage collector"" as used herein refers to an apparatus for automated object management, where allocated memory is automatically reclaimed when it is unneeded, which is accomplished through a housekeeping process. The housekeepingprocess may further include memory compaction. The housekeeping process is generally performed nondeterministically at the primary discretion of the garbage collector. Virtual machine environments, such as those for Java and C#, include a garbagecollector. Legacy and ANSI C++ programming environments do not include a garbage collector. The term ""SourceUnit"" is the smallest unit of autonomous source code, which may be compiled, interpreted, or executed, depending on the capabilities of the source language. This generally refers to an individual source code file, such as inJava, C++, Objective-C, or C#. In C++ and some other languages, a SourceUnit may be referred to as a ""compilation unit."" The term ""Document Object Model (DOM)"" is an object-oriented programming interface for representing the different conceptual elements of a document. Furthermore, the individual elements in a DOM may be stored in a hierarchy. The term ""SourceUnit DOM"" is a specialized DOM for representing the different conceptual elements of a source code file or document. The SourceUnit DOM is only intended for representing source code files. The conceptual elements making up aSourceUnit DOM include: single line comment, multiple line comment, package statement, import statement, class definition, field definition, implementation block, implementation statement, method definition, static constructor definition, exceptionstatement, control flow statement, and text. There is only one SourceUnit DOM per SourceUnit. The SourceUnit DOM is a complete representation of the original SourceUnit, including its formatting. Alternatively, the term ""SourceUnit DOM"" may also applyto an Abstract Syntax Tree (AST) that serves the same purpose of representing the different conceptual elements of a source code file or document. The term ""tagged element"" is a note inserted by the translator that contains extra information to be preserved through the translation process. A tagged element is embedded inside specially denoted single line comment or multiple line commentelements. This extra information captures logic and other content from the original source files that typically cannot be preserved in translation but through such tagged elements allows such logic and content to be preserved in translated results. The term ""keyword"" means a word that always has the same meaning and cannot be used for any other purpose, i.e., as identifiers. The term ""class"" is a type in an object-oriented programming language. A class may have methods, data fields, and inner-classes (classes within classes), which may all be generically referred to as ""class members."" The term ""class"" also canrefer to an ""interface."" The term ""object"" is an instance of a class. The term ""method"" is a function or procedure that a particular class may do. A method may or may not be provided with variable parameters, and it may or may not return a value. A method is always associated with a particular class, and it maybe referred to as a ""class member."" The term ""method"" also applies to constructors and destructors. The term ""constructor"" is a function or procedure that will be used to initialize an object, which an instance of a particular class. A constructor may or may not be provided with variable parameters, and it may not return a value. Aconstructor is always associated with a particular class, and it may be referred to as a ""class member."" A class must have at least one explicit or implicit constructor in order to instantiate instances of itself. The term ""destructor"" is a function or procedure that will be used to destruct an object, which an instance of a particular class. A destructor may not be provided with variable parameters, and it may not return a value. A destructor is alwaysassociated with a particular class, and it may be referred to as a ""class member."" A class may have only one destructor, which itself is optional. In Java, a destructor is called a ""finalizer."" The term ""data field"" is a variable that a particular class contains. A data field may be a numeric value, a Boolean value, an object reference, or an interface reference, or an array reference. A data field is always associated with aparticular class, and it may be referred to as a ""class member."" The term ""interface"" is a class that declares one or more methods, but it does not define (implement) any of these methods. Instead, other classes which implement a particular interface must themselves define (implement) all of the interface'smethods. The term ""class declaration"" is the declaration of a new class (or interface) type. A class declaration is sometimes referred to as a ""class interface."" It describes the constructors, destructor (finalizer), methods, data fields, andinner-classes (a class within a class) that make up a particular class. Constructors, destructor, methods, data fields, and inner-classes of a particular class may be referred to generically as ""class members."" A class declaration defines the accesscontrol for each of its class members, be they constructors, destructor, methods, data fields, or inner-classes. A class declaration also details which class this class inherits from which includes its superclass and any interfaces it implements. Certain computer languages like C++ allow separating class declarations from class implementations, whereas other languages like Java and C# combine both the class declaration and class implementation into the class definition. A public classdeclaration makes a particular class accessible so that other (external) classes can create or interact with instances of the class. In turn, other (external) classes come to depend on the class declaration, which necessitates that the class declarationremains consistent. The term ""class implementation"" is the implementation of a newly declared class type. It implements its constructors, destructor, methods, static data fields, and inner-classes. Certain computer languages like C++ allow separating classdeclarations from class implementations, whereas other language like Java and C# combine both the class declaration and class implementation into the class definition. The class implementation is not directly accessible to other (external) classes butonly the class declaration is. This means that the internal class implementation may potentially be changed without adversely affecting other classes which depend on its class declaration. The term ""class definition"" is the definition (implementation) of a new class type. The exact meaning of this term differs from computer language to computer language. For Java and C#, this refers to the combined class declaration and classimplementation. In C++, this refers only to the class implementation. In one advantageous embodiment a computer language translator is provided that includes translating software executing on a computer having a storage. The translating software is provided for translating a first OOP computer language sourcecode to a second OOP computer language source code. The translating software comprises an emulated Application Programming Interface library including a table accessible by said translating software on the computer. The API library has data indicativeof types of data manipulations between the first computer language source code and the second computer language source code. The table includes second computer language equivalent functions callable by the second computer language. The translator isprovided such that the translating software identifies the type of data manipulation the first computer language source code performs and accesses the table of the API library and correlates the type of data manipulation the first computer languagesource code performs to second computer language source code. The translator is further provided such that the translating software generates second computer language source code based in part upon identified equivalent functions in the second computerlanguage. In another advantageous embodiment a method is provided for translating a first OOP computer language source code to a second OOP computer language source code comprising the steps of providing a computer with a storage, the computer havingtranslation software executing thereon. The method further comprises the steps of providing an emulated Application Programming Interface library having data indicative of types of data manipulations between the first computer language source code andthe second computer language source code. The method further comprises the steps of providing a table associated with the API library including second computer language equivalent functions callable by said second computer language. The method stillfurther comprises the steps of identifying the type of data manipulation the first computer language source code performs and accessing the table and correlating the type of data manipulation the first computer language source code performs to secondcomputer language source code. The method also comprises the steps of generating second computer language source code based in part upon identified equivalent functions in the second computer language. The invention and its particular features and advantages will become more apparent from the following detailed description considered with reference to the accompanying drawings. BRIEF DESCRIPTION OF THE DRAWINGS FIG. 1 is a block diagram illustrating an advantageous embodiment of the present invention. FIG. 2A is a block diagram according to FIG. 1 illustrating an advantageous embodiment of the present invention. FIG. 2B is a block diagram according to FIG. 1 illustrating an advantageous embodiment of the present invention. FIG. 3 is a block diagram illustrating some steps involved in bi-directional translation according to another advantageous embodiment of the present invention. FIG. 4 is a flow diagram illustrating another advantageous embodiment of the present invention. FIG. 5 is a flow diagram according to FIG. 4 illustrating another advantageous embodiment of the present invention. FIG. 6 is a flow diagram according to FIG. 4 illustrating another advantageous embodiment of the present invention. FIG. 7 is a flow diagram according to FIG. 6 illustrating another advantageous embodiment of the present invention. FIG. 8 is a flow diagram according to FIG. 7 illustrating another advantageous embodiment of the present invention. FIG. 9 is a flow diagram according to FIG. 7 illustrating another advantageous embodiment of the present invention. FIG. 10 is a flow diagram according to FIG. 7 illustrating another advantageous embodiment of the present invention. FIG. 11 is a flow diagram according to FIG. 10 illustrating another advantageous embodiment of the present invention. FIG. 12 is a flow diagram according to FIGS. 9 and 11 illustrating another advantageous embodiment of the present invention. FIG. 13 is a flow diagram according to FIG. 11 illustrating another advantageous embodiment of the present invention. FIG. 14 is a flow diagram according to FIG. 13 illustrating another advantageous embodiment of the present invention.DETAILED DESCRIPTION OF THE INVENTION FIG. 1 illustrates an advantageous embodiment of translation system 100. Translation system 100 is shown including, first computer language source code 102, computer 106, translator 108, library 110 and second computer language source code 104. First computer language source code 102 may comprise any computer language however; in one advantageous embodiment comprise an OOP language such as for instance, Java, C#, C++, Objective-C or scripting language, such as JavaScript, Python, Ruby,Perl and/or PHP. Computer 106 may also comprise any computer capable of receiving first computer language source code 102. Translator 108 in an advantageous embodiment comprises software, executing on computer 106 to received and process first computerlanguage source code 102. While translator 108 executes on computer 106, it is not necessary that translator 108 reside on computer 106. For instance, translator 108 may comprise software residing on another computer (not shown) to which computer 106is connected over, for instance, a network. The network connection may comprise for instance, a hard wired and/or wireless network, e.g. employing bus connections, parallel cable, serial cable, coaxial cable, fiber optic, twisted wire pair, USB cable,infrared link, radio frequency link, microwave link, satellite link and/or the like. Also provided in FIG. 1 is library 110 which is coupled to and accessible by computer 106. In one advantageous embodiment, library 110 comprises data indicative of relationships between the first computer language source code 102 and the secondcomputer language source code 104. In another advantageous embodiment, library 110 may comprise data for correlating particular functions of the first computer language source code 102 to the second computer language source code 104. In still anotheradvantageous embodiment library 110 may comprise, for instance, a database. Once translator 108 has analyzed first computer language source code 102, translator 108 then generates second computer language source code 104. Again, second computer language source code 104 may comprise any computer language such as forinstance, an OOP language including Java, C#, C++, Objective-C or a scripting language, such as JavaScript, Python, Ruby, Perl and/or PHP. Translation system 100 may be operated in various modes of operation including, fully automated, manual and/orcombinations thereof. As illustrated in FIG. 1, translator 108 generates second computer language source code 104. For instance, when first computer language source code 102 comprises Java and second computer language source code 104 comprises C++, there is a C++implementation of the Java language. There is true translation from, in this example Java to C++. This means that there is no requirement for interoperability between Java and C++ and therefore, no need to utilize a virtual machine after translation. It should further be noted that the arrows indicated from first computer language source code 102 to computer 106 and from second computer language source code 104 to computer 106 are shown bi-directional. This illustrates the bi-directionalityof translator 108. For instance, first computer language source code 102 may be input to computer 106 and be translated to second computer language source code 104. Subsequently, second computer language source code 104 may then be input to computer106 and be re-translated back to first computer language source code 102. Notably, as illustrated in FIG. 1, the re-translated first computer language source code is depicted as the same as the first computer language source code 102. This is possiblebecause translator 108 translates first computer language source code 102 independent of the context of in which it is used. In this manner, the translation of various elements of the source code is always consistent and therefore reversible because ofthe direct correlation between various elements of the first computer language source code 102 to the second computer language source code 104. FIG. 2A illustrates one advantageous embodiment of the present invention that expands translator 108 into analyzer 114 and generator 116. In this embodiment the translation process is divided into two steps: (1) analysis and (2) generation. First computer language source code 102 is input to translator 108, which has as a first block, analyzer 114. Analyzer 114 is also coupled to library 110 which, as previously discussed, comprises data indicative of relationships between thefirst computer language source code 102 and the second computer language source code 104. Analyzer 114 will analyze the function of the first computer language source code 102 and then correlate the function to second computer language source code 104. In one advantageous embodiment, analyzer 114 will logically traverse or cycle through first computer language source code 102 in order to build class declarations and/or class definitions. Analysis encompasses traversing all the elements of a particular SourceUnit DOM in order to produce high-level programming entities. For converting Java to C++ for instance, such high-level programming entities include the main public class andany supporting classes. These classes may, in turn, be made up of methods, fields, static constructors, and inner-classes. In another advantageous embodiment, analysis may also entail some language-specific pre-generation work, such as organizinghigh-level programming entities differently for certain target languages, such as C++. Once analyzer 114 has built the class declarations and/or class definitions, these are sent to generator 116 for generation of second computer language source code 104. Generation is the process of producing source code in the target languagefrom the high-level programming entities, such as public classes, produced from the analysis step. Generation may further re-organize high-level programming entities for correctness in the target language. Generation may still further entail addingembedded tagged elements where necessary so as to preserve the full semantic meaning of the original language and to facilitate bidirectional translation, if desired. One problem that the generator may encounter during generation is a conflict between keywords between the first computer language source code 102 and the second computer language source code 104. For instance, identifier names in the sourcelanguage may conflict with keywords in destination language. Such conflicts must be resolved in a consistent manner and preserve the syntactical correctness and readability of the translated result. Name resolution may require name adjustment, which isa mild form of name mangling. Identifier names which conflict with keywords or other features of the destination language must be adjusted. In such a case, the name is mildly mangled with the best effort being made to preserve the name as readable aspossible. More common standard conforming identifier names are usually mangled less than uncommon nonstandard identifiers. This strategy is weighted toward preserving the readability of content which is already deemed readable due to its standardsconformance. In an alternative embodiment, FIG. 2B illustrates another expanded view of translator 108 that includes: parser 112, analyzer 114, and generator 116. The translation process according to FIG. 2B may be divided into three steps: (1) parsing, (2)analysis, (3) generation. First computer language source code 102 is input to parser 112. Parser 112 is provided to parse first computer language source code 102 into parsed elements prior to transmission to analyzer 114 for building of class declarations and/or classdefinitions. The parser is essentially provided to turn the document into a hierarchy of elements including, for instance but not limited to: comments (such as inserting a tagged element), class definitions, variable declarations, and/or method calls. Parsing entails breaking each original language source code file down into corresponding elements in a SourceUnit DOM. The remaining elements are similar to those discussed in connection with FIG. 2A and will not be repeated here. FIG. 3 illustrates the process 200 of converting original source files to a target language and translation back to the original language. As a first step, a source code file is generated in the original computer language 205. This originalcomputer language may be any computer language as previously discussed in connection with FIG. 1. Once the source code in the original computer language is generated, the source code file in the original computer language is stored 210. This may belocal storage, for instance on the computer where the original code was generated or over a network. In addition, the storage may be permanent, semi-permanent or temporary. For instance, the original source code may be stored on a magnetic or opticaldrive and/or disk, or may only be resident in RAM. The next step is translation of source code file in original computer language to source code file in target computer language 215. This process would include for instance, the processes variously described in connection with FIGS. 1-2B. Oncethe translation process is completed, the resulting source code file in the target computer language may be (1) compiled into a binary executable program; (2) run; (3) debugged; and (4) profiled 220. To accomplish this step, any number of commercialcompilers may be utilized, for instance, Java and C# may be compiled to bytecode while C++ and Objective-C may be compiled to native code. The steps of running the program, debugging and profiling will be minimized due to the translation step. Finally,the resulting source code file in the target language is modified (as necessary) and stored 225. The result is a highly accurate translation of the original source code file to the target source code file that will function as seamlessly as the original source code file, preserving the syntax and function of the original source code file. The process 200 of converting original source files to a target language is reversible as illustrated in FIG. 3. The process is reversed by the translation of the source code file in the target computer language back to the original computer language230. It should be noted however, the any modifications made to the source code file will be reflected in the re-translated source code. Once the target language source code file is re-translated to the original source code language, the resultingsource code file in the original computer language may be (1) compiled into a binary executable program; (2) run; (3) debugged; and (4) profiled 235. As previously stated, any number of commercial compilers may be utilized to accomplish this step. Ascan be seen from FIG. 3, the process 200 has returned to the step of storing the source code file in the original computer language 210. This bi-directional translation process 200 is possible in part, because the translation from the original source code to the target source code is accomplished without regard to the context. The translation of elements is always consistent,and thereby reversible. For instance, keywords and identifiers are always resolved in a consistent manner and preserve the syntactical correctness and readability of the translated result. FIG. 4 is a flow diagram illustrating the steps taken in one advantageous embodiment by translation system 300 in translating source code from an original computer language to a target computer language. Translation system 300 provides thesignificant benefits of: maintaining the logic, expression, and formatting of the original source code files through translation, which in turn, facilitates re-translation back to the original computer language. The process may for instance, beuser-initiated or initiated as a batch process and after initiation is fully automated, requiring no further user involvement. Further, FIG. 4 details the various hierarchical array types and hierarchical array references types and their relationship to one another and other objects in the system. The array types support storing both one-dimensional andmulti-dimensional storage of array elements. In addition, the hierarchical array reference types fully support inheritance for themselves and the elements they contain. In one advantageous embodiment, element count is read-only and is fixed when thearray is created. One problem associated with reference types is that external classes for instance, in C++ are stored in their own files called (""header files""). If one class makes use of another class, it must include the other class' header file before itdeclares its own class. A problem arises when the classes refer to each other creating a circular dependency. However, translation system 300 obviates this problem by declaring reference types in their own files. A reference type file then only needsto include the header file of its superclass and implemented interfaces. A superclass is a parent of the class that extends from it, and subclasses (or child classes) can never be their own parent thereby preventing the circular dependency problem. Another advantage to this embodiment of the present invention is that the second computer language source code is utilized to implement types of data manipulations of the first computer language source code. When translating from Java or C# toC++ or Objective-C, this provides the benefit of eliminating the need for a virtual machine because there is implementation of the original language's (i.e., Java or C#) platform classes in the target language (i.e., C++ or Objective-C). In another advantageous embodiment of the present invention, no garbage collector is required to automatically manage objects. Rather, translation system 300 automatically provides for object management making translation system 300 suitablefor use with embedded systems. As an initial step, the user (or the script file of a batch process) specifies the following: directory path of source code file(s), directory path of pre-translated source code files (if any), and file types to generate in target language 302. Of course, this initial step assumes that, the source code files in the original language (i.e., Java or C#) 304 have already been generated. In addition, pre-translated software class library (i.e., native implementation of Java platform classes, or C#and .NET platform classes in target language) 306, and pre-translated class declaration file(s) in target language 308 have been provided. The next step is that the user (or the batch process) starts the translation process 310 followed by generation of the list of packages from the specified directory path of source code files 312. As used herein, source code projects are made upof one or more packages, which in turn variously comprise: classes, fields, methods, inner classes, blocks, statements and/or combinations thereof. A source code project includes all the source code files related to a particular software applicationprogram. Translation system 300 then iterates through the packages 314 so as to generate a package importation file(s) in the target language 316, which in turn results in a generated package importation file in the target language 318. The next stepis to generate a list of source file(s) from the specified directory path(s) of source code files 320. Translation system 300 then iterates through each source code file 322. At this point, translation system 300 resolves whether the source code file exists 324. If the source code file does not exist, translation system 300 will notify the userthat the source code file does not exist 326 and will return to allowing the user to specify the directory path 302. If however, the source code file does exist, translation system 300 proceeds to parse source file into tree of source code elements, including formatting, using an event-driven parser such as, for instance, Simple API for XML (SAX) 328. Thishigh level parsing of the source code file results in the generation of source code document (SourceUnit DOM) 330. The parsing step is essentially provided to turn the source code file into a hierarchy of elements and is discussed in more detail inconnection with FIG. 2B. Next, translation system 300 performs an analysis of the source code by analyzing the source code element tree in the source code document into class definitions 332. The next step is to analyze imported pre-translated class declaration file(s)into class declarations 334. At this point, translation system 300 has logically traversed or gone through all of the parsed elements to build class definitions and class declarations to be used for generation of the target source code. In the buildingof the class definitions and class declarations, some preliminary broad pre-translation to the target language may also take place. This analysis has also been previously discussed in connection with FIG. 2A. We next move to the actual generation of the target source code. As an initial step, translation system 300 generates a class importation file in the target language 336, which results in a generated class importation file in the targetlanguage 338. The next step is to generate a class reference type definition file in the target language 340, which also results in a generated class reference type file in the target language 342. Following this step is to generate a class declarationfile in the target language 360, which too results in a generated class declaration file in the target language 344. The process of generating the class declaration file is described in more detail in connection with FIG. 5. Finally, translation system300 generates a class implementation file in the target language 400, which results in a generated class implementation file in the target language 346. This step is also described in greater detail in connection with FIG. 6. This generation step hasalso been discussed in connection with FIG. 2A. This completes the translation process of the specified source file such that translation system 300 proceeds to the next source file 348 and/or the next package 350, and returns to iterating through the packages 314. The process will berepeated until all packages have been translated. FIG. 5 is an expanded view of the step of generating a class declaration file in the target language 360. As an initial step, analysis of class definitions in the original language 362 is performed, followed by generation of statements forreferencing external classes in the target language 364. The next step is to iterate through the class definitions in the original language 366. For Java and C#, this includes for instance, one public class and zero or more private implementationclasses. Once this step is completed, the system may generate static field declarations 368. The system then iterates through the method definitions 370. In this context, method refers to static initializer, constructors, destructor (finalizer), andmethods. Again, once this step is completed, the system may generate method declaration(s) in the target language 372. If there are additional method definitions 374 and/or additional class definitions 376, the system will continue to iterate throughthose; if not the system will complete this step and move on to generating a class implementation file in the target language 400 as shown in FIG. 4. FIG. 6 is an expanded view of the step of generating a class implementation file in the target language 400. Initially, analysis of class definitions in the original language 402 is performed. For Java and C#, this includes for instance, onepublic class and zero or more private implementation classes. This is followed by generation of statements for referencing external classes in the target language 404. This corresponds to ""import"" statements in Java and C#, ""#import"" and ""#include""statements in Objective-C, and ""#include"" and ""using"" statements in C++. The system next iterates through class definitions in the original language 406 and then generates static field definitions 408. The system then proceeds to iterate through methoddefinitions 410. Again, in this context, method refers to static initializer, constructors, destructor (finalizer), and methods. The system may then generate out-of-line classes corresponding to anonymous inner-classes 412. In Java, anonymousinner-classes are defined inline within individual statements. These anonymous inner-classes are produced, in one advantageous embodiment, during analysis by analyzing the statements making up a method definition. The system next proceeds to generatestatements in the target language 414. Again, in one preferred embodiment, references to anonymous inner-classes in individual statements are replaced with references to the corresponding generated out-of-line class names. If there are additionalmethod definitions 416 and/or additional class definitions in the original language 418, the system will continue to iterate through those. If there are none left, the system will complete this step and proceed to determining if there is another sourcefile 348 as shown in FIG. 4. FIG. 7 is an expanded view of the step of generating statements in the target language 414. FIG. 7 generally describes one advantageous embodiment of the process for translating a statement in the original language to the source language usingsimulated keywords and embedded tagged elements. This process enables results to be for instance, translated back to original language. The system starts with a statement in the original language 420. Initially, the system parses the statement into sub-statements 422 and then iterates through the sub-statements 424. The system then determines if the sub-statement requires areference type or a referenced type 426. This step is described further in connection with FIG. 8. If it is determined that a reference type is required, the system proceeds to parse the reference type name identifier 428, and replace the referencetype name identifier with an adjusted name for the target language 430. This step is described further in connection with FIG. 9. Once this step is completed, the system proceeds to parse the sub-statement into expressions 432. Alternatively, inconnection with determining if the sub-statement requires a reference type or a referenced type 426, if the system determines that a referenced type is required, the system will also proceed to parse the sub-statement into expressions 432. Once thesub-statements have been parsed into expressions, the system iterates through the expressions 434 and parses any type name identifier in the expression 436. At this point the system determines if the identifier name is compatible with the targetlanguage 438. If it is not, the system proceeds to replace the identifier with an adjusted name 440. This step is described further in connection with FIG. 10. Once the identifier is replaced with an adjusted name, or it is determined that theidentifier name is compatible with the target language, the system proceeds to determine if the expression corresponds to a simulated keyword 442. If it is determined that the expression does correspond to a keyword, the expression is replaced with asimulated keyword 444. Once the expression is replaced with a simulated keyword or it is determined that the expression does not correspond to a simulated keyword, the system proceeds to determine if the translation is fully expressible in the targetlanguage 446. If the translation is not fully expressible in the target language, the system will proceed to embed tagged elements or a tag 448 in the translated language. Once the tagged element is embedded or it is determined that the translation isfully expressible in the target language, the system proceeds to the next expression 450 and/or the next sub-statement 452 to repeat the above-described process until all expressions and sub-statements are translated. If it is determined that there areno more expressions or sub-statements, the system proceeds back to the next step of determining if there are additional statements in the method definition that contains the statement. If it is determined that there are no more statements, the systemproceeds back to the next step of determining if there are additional method definitions 416 as illustrated in FIG. 6. The following is a table in extended BNF notation illustrating an example of a potential format of embedded content, which cannot be expressed in the target language and is therefore embedded as tagged elements within the comment sections: TABLE-US-00001 Syntax EmbeddedContent ::= EmbeddedComment+ (Expression+ EmbeddedComment+)? Expression ::= expression in target language related to embedded content EmbeddedComment ::= CommentBeginSymbol ""//"" TaggedElements CommentEndSymbolTaggedElements ::= TaggedElement+ TaggedElement ::= (""<"" Namespace "":"" ElementName "" "" ElementAttributes "">"") | (""</"" Namespace "":"" ElementName "" "" ElementAttributes* "">"") Namespace ::= namespace for embedded tags (i.e., ""pie"") ElementName::= name of embedded element (i.e., ""loopscope"") ElementAttributes ::= attributes for embedded element CommentBeginSymbol ::= language-specific symbol or keyword (""/*"" for C++, C#, Java) CommentEndSymbol ::= language-specific symbol or keyword (""*/"" forC++, C#, Java) Source Code in Original Translated Source Code in Target Language (Java) Language (ANSI C++, Visual C++ 6.0) for (int index = 0; index /*//<pie:loopscope>*/{ < 10; index ++) /*//</pie:loopscope>*/ { for (pi_int index.sub.--= 0; index.sub.-- index *= 2; < 10; index.sub.-- ++) } { int index = 10; index.sub.-- *= 2; } /*//<pie:loopscope>*/{ /*//</pie:loopscope>*/ pi_int index.sub.-- = 10; The following is a table illustrating an example of simulated keywords used to provide corresponding features and forms of expression of the original language in the target language. Simulated keywords fully preserve all details of theexpression of the original language so that the translated results in the target language can be accurately translated back to the original language, producing identical or substantially identical results to the original expressions in the originallanguage. TABLE-US-00002 Expression in Original Language Simulated Keyword Expression in (Java) Target Language (ANSI C++) (className)objectInstance pi_cast(className, *objectInstance) (className)this pi_cast(className, this) objectInstance instanceofpi_instanceof(*objectInstance, className className) this instanceof className pi_instanceof(this, className) throws className pi_throws(className) throws className1, className2, pi_throwsbegin(className1) . . . className9 pi_throwsalso(className2) ... pi_throwsalso(className9) pi_throwsend( ) switch (expression) { pi_beginswitch(type, expression) } (as used to end a switch block) pi_endswitch( ) case value: pi_case(value) default: pi_default( ) Null pi_null synchronized (as used within pi_synchronizedmethod definitions) interface interfaceName class pi_interfaceclass interfaceName Boolean pi_boolean FIG. 8 is an expanded view of the step of determining if the sub-statement requires a reference type or a referenced type 426. FIG. 8 generally describes the process of determining if the statement requires a reference type or a referencedtype. In this advantageous embodiment, the process is demonstrated by the example of translating a statement or expression in the Java language to the C++ language. However, it is contemplated that this process may be modified for applicable withconversion of any computer language. The system starts with a statement or expression 454. A determination is then made as to whether the target language requires separate types for references 456. If not, the referenced type is used 466. If however, the target language doesrequire separate types for references, the system proceeds to determine if the statement or expression is a variable declaration statement 458. If not, the reference type is used 464. If however, it is determined that the statement or expression is avariable declaration statement, the system proceeds to determine if it is cast or an instance of expression 460. If not, the referenced type is used 466. If however, it is determined that it is cast or an instance of expression, the system proceeds todetermine if the parameter type is an array 462. If not, the referenced type is used 466. If so, the reference type is used 464. The system then proceeds according to FIG. 7 as previous discussed. FIG. 9 is an expanded view of the step of replacing the reference type name identifier with an adjusted name for the target language 430. Generally, in this step the identifier name is adjusted for the target language. If the variable type isnot an array or is not a primitive, the name is further adjusted to be a reference type for the target language. In this step, the system begins with a reference type name identifier in the source language 468. It is then determined if the type name is a fundamental type in the source language 470. If not, then the class name identifier is adjusted forthe target language 472, which is described in more detail in connection with FIG. 12. Once this is completed, it is determined if the name is an array reference 478. If not, then the system will proceed to append a character to the resultantidentifier 482. This character may be for instance, any alphanumeric character depending on the computer language. For example, an uppercase ""R"" may be effectively utilized in connection with the Java language because it is uncommon for Java variabletype names to end with an uppercase ""R"" and it further indicates ""Reference"" to the user. Other suffixes however, may be effectively utilized in connection with other computer languages. Once the character is appended, the system completes this step. If on the other hand, it is determined that the type name is a fundamental type in the source language according to step 470, then a primitive type name is translated to the target language 474. The system may, in one advantageous embodiment,reference a table of primitive type names in the original language and target language 476 to facilitate this step. Once this is completed, it is determined if the name is an array reference 480. If not, then the system completes this step. If however, it is determined that the name is an array reference 478 and/or 480, the system will then proceed to determine the array dimensions 484. If it is determined that there is one dimension, two characters are appended to the resultantidentifier 488. Again, in one advantageous embodiment, uppercase ""AR"" may be effectively used because it is uncommon for Java variable types to end with uppercase ""AR"" and it may indicate for instance, ""Array Reference"" to the user. Alternatively, ifit is determined that there are two dimensions, three characters are appended to the resultant identifier 486. For instance, uppercase ""AAR"" may be utilized and indicate for instance, ""Array of Array References"" to the user. It is however contemplatedthat other suffixes may be effectively utilized in connection with other computer languages. Once these characters are appended, the system completes this step. FIG. 10 is an expanded view of the step of replacing the identifier with an adjusted name 440. FIG. 10 generally describes the process of adjusting referenced type name identifiers in the source language to a suitable name in the targetlanguage. The process of Identifier Name Adjustment is a mild form of name mangling that produces a fully human-readable name. This step starts with a referenced type name identifier in the source language 490 and proceeds to determine if the type name is a fundamental type in the source language 492. If not, the class name identifier is adjusted for the targetlanguage 494. This step is described in greater detail in connection with FIG. 11. If however, the type name is a fundamental type in the source language, the system proceeds to translate the primitive type name to the target language 496. Again, inone advantageous embodiment, a reference table of primitive type names in the original language and target language 498 may be used to facilitate this step. FIG. 11 is an expanded view of the step of adjusting a class name identifier for the target language 494. FIG. 11 generally describes the process of adjusting composite unparsed identifiers into package names, class names, method names, andvariable names and identifiers in the source language to a suitable name in the target language. An identifier in the original language 500 is analyzed to determine if the identifier name is qualified 502. For clarity, a qualified name contains one or more identifier name separator tokens, for instance, Java and C# use the period "".""character (i.e., java.lang.Object or System.object is qualified, but Object or object is not). If it is determined that the identifier name is qualified, the system proceeds to determine if the identifier name is an imported class 504, and in oneadvantageous embodiment may utilize a list of imported classes 506 to facilitate this determination. If the identifier name is an imported class, the system proceeds to adjust the class name identifier for the target language 506, which is discussed ingreater detail in connection with FIG. 12. Alternatively, if the identifier name is not an imported class, the system proceeds to determining if the identifier is a method or a data field identifier 508. If it is determined to be a method identifier,the method name identifier is adjusted for the target language 510, which is again discussed in greater detail in connection with FIG. 12. However, if the identifier name is determined to be a data field, the data field name identifier is adjusted forthe target language 512, which is discussed in greater detail in connection with FIG. 13. Returning now to the step of determining if the identifier name is qualified 502, if it is determined to be qualified, the system proceeds to determine if the identifier is a fully qualified imported class 514. If so, the package/namespace ofthe identifier is parsed 516, and then the package or namespace of the identifier for the target language is adjusted 518, which is again described in greater detail in connection with FIG. 12. Once this step is completed or in the event the identifieris not a fully qualified imported class, the system proceeds to parse the class name identifier and method or data field identifier 520. It should also be noted that the class name identifier here may also comprise an inner-class. The class nameidentifier for the target language is then adjusted 522 as further described in connection with FIG. 12. Next it is determined whether an identifier is supplied after the class name 524. If not, this step is completed. If it is determined that anidentifier is supplied after the class name, then the system proceeds to determine if the identifier is a method or a data field identifier 508 as previously discussed. FIG. 12 is an expanded view of the step of adjusting the name identifier for the target language. There are various steps in the previous drawings that reference this process including: adjusting the class name identifier 472; adjusting themethod name identifier 510; and adjusting the package name identifier 518. In this process, an identifier name is generally parsed into name segments, which are individually and independently adjusted for the target language so that the adjusted name isuniversal. This provides the benefit of allowing individual classes to be translated as modified without requiring retranslation of all related source code files in the entire project. It also facilitates automation because no human interaction isnecessary to determine or specify named aliases. An identifier name in the original computer language 526 is parsed into name segments 528. The system then iterates through the name segments 530 and further parses the identifier name segment in the original computer language 532. It is thendetermined if the name segment is a keyword in the target language 534. If the name segment is determined to be a keyword in the target language, the system will proceed to append an underscore (""_"") to the name segment 536 and proceeds to the next namesegment 538. If however, the name segment is determined to not be a keyword in the target language, the system proceeds to determine if the name segment terminates or ends with an underscore (""_"") 540. If so, the system proceeds to append an underscore(""_"") to the name segment 542 and proceeds to the next name segment 538. If however, it is determined that the name segment does not terminate with an underscore (""_""), the system proceeds to determine whether the name segment ends with a selectedcharacter, such as for instance, with an uppercase ""R"" 544. If not, the system proceeds to the next name segment 538. If however, it is determined that the name segment ends with a selected character, an underscore (""_"") is inserted before the lastcharacter in the identifier name 546, after which the system proceeds to the next name segment 538. FIG. 13 is an expanded view of the step of adjusting the data field name identifier for the target language 512. FIG. 13 generally describes the process of resolving conflicting syntactical rules between the original computer language and thetarget computer language. This process is a demonstration of one advantageous embodiment of the present invention providing an example of translating a class data field identifier name in a source language, such as Java, to a target language, such asC++. It should however be noted that this is merely an example specific to the computer languages used in the example and is equally applicable to any number of various computer languages. This process begins with a class data field identifier name in the original computer language 548. It is then determined whether the source language supports both a method named ""X"" and a data field named ""X"" in the same class declaration 550. If so, the system proceeds to determine if the target language supports both a method named ""X"" and a data field named ""X"" in the same class declaration 552. If so, this process is completed. If not however, the field name identifier for the targetlanguage is adjusted 554, which is discussed in greater detail in connection with FIG. 14, after which the process is completed. Returning now to determining whether the source language supports both a method named ""X"" and a data field named ""X"" in thesame class declaration 550, if not, then the system determines if the target language supports both a method named ""X"" and a data field named ""X"" in the same class declaration 556. If not, the process is completed. If however it does support both amethod named ""X"" and a data field named ""X"" in the same class declaration, then the system translates the adjusted field name to the original name in the target language 558, after which the process is completed. FIG. 14 is an expanded view of the step of adjusting the field name identifier for the target language 554. FIG. 14 starts with a data field name identifier or variable name identifier in the original language 560. It is then determined if thename ends with an underscore (""_"") 562. If not, the system proceeds to append an underscore (""_"") to the name segment 564. If however, it is determined that the name ends with an underscore (""_""), the system proceeds to append the text to a nameindicating that it is a field name which ends with an underscore 566. Although the invention has been described with reference to a particular arrangement of parts, features and the like, these are not intended to exhaust all possible arrangements or features, and indeed many other modifications and variationswill be ascertainable to those of skill in the art."
37|http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=81&p=2&f=G&l=50&d=PTXT&S1=(python.CLTX.+or+python.DCTX.)&OS=ACLM/python&RS=ACLM/python|Methods and systems for dynamically generating installation configuration files for software|The present invention provides methods and systems for dynamically generating configuration files used in installing software distributions and software installation testing. In particular, the present invention employs a framework comprising an API to discover and monitor an inventory of distributions, a set of templates for the configuration files, and plugins that may be selectively invoked to customize the configuration files. When performing installation testing, a server will access the distribution inventory and select appropriate templates that are to be part of the test. The server will then automatically generate the installation configuration files from the templates. The server may also execute one or more plugins that customize the configuration files as desired. Small client applications run on the target machines of the installation tests and are used to download the configuration files and the distributions. The present invention may also employ a scheduling service to coordinate the operations of the server and target machines.|"1. A method comprising: receiving, by a server comprising hardware, a request for installation of a distribution of an operating system on a target machine; identifying, bythe server, a template for installation of the distribution; and generating by the server, based on the template and a test plan, an installation configuration file for the distribution. 2. The method of claim 1, wherein the interface comprises a command line interface and wherein receiving the request comprises receiving a request via the command line interface. 3. The method of claim 1, wherein the server executes an extensible markup language (XML) remote procedure call (RPC) handler. 4. The method of claim 1, wherein the server executes a pykickstart utility to generate the installation configuration file. 5. The method of claim 1, wherein the server executes a utility to generate a kickstart file for the operating system. 6. The method of claim 1, wherein the server executes a plugin to customize the installation configuration file. 7. The method of claim 1, wherein the server executes a Python utility. 8. The method of claim 1, wherein the server stores a composeinfo file that specifies distributions accessible to the server. 9. The method of claim 1, wherein the server stores a treeinfo file that specifies distributions accessible to the server. 10. A system comprising: a repository comprising hardware to store a distribution of an operating system; and a server comprising hardware to: receive a request for installation of the distribution on a target machine, identify a template forinstallation of the distribution, and generate, based on the template and a test plan, an installation configuration file for the distribution. 11. The system of claim 10, wherein the server is configured to generate kickstart files. 12. The system of claim 10, wherein the target machine executes a Python application. 13. The system of claim 10, wherein the server executes a scheduler to schedule installations on the target machine. 14. The system of claim 10, wherein the server is configured to provide an application programming interface to receive information about distributions stored by the repository. 15. The system of claim 14, wherein the server is configured to receive a Pungi composeinfo file. 16. The system of claim 14, wherein the server is configured to receive an Anaconda treeinfo file. 17. The system of claim 14, wherein the server is configured to execute a script to scan the repository. 18. The system of claim 10, wherein the server is configured to execute a set of plugins that customize the installation configuration files. Description FIELD OF THE INVENTION The present invention relates to software provisioning.BACKGROUND OF THE INVENTION Today, there are several automation frameworks currently deployed that support software provisioning, for example, for installation testing of software. Each framework encounters similar obstacles, such as test scheduling, resultsstorage/reporting, environment initialization and test case design. Often times, the implementations to overcome similar problems are divergent. Most automation frameworks must address the issue of system initialization. A common method for addressing this on Anaconda-based Linux distributions is by performing a fresh product installation using a set of hand crafted kickstart files. While this method works fairly well once established, it suffers from several problems. First, before any system is made available, a kickstart template must be created for each applicable test release. To obtain this file, every applicable test release must be installed and the resulting /root/anaconda-ks.cfg file can then beused as the kickstart template for all future installs of that release for that test system. This is a time consuming processing. Second, as the number of systems in the test pool increases, the number of kickstart files to maintain grows significantly. This translates to hand-maintaining a large number of kickstart template files. Thus, when a situation arises where aninstallation workaround is required, the number of kickstart files requiring updates is significant. Accordingly, it would be desirable to provide a tool that makes installation testing simpler for the end-user. It would also be desirable to provide a tool that helps automate installation testing. BRIEF DESCRIPTION OF THE DRAWINGS The accompanying drawings, which are incorporated in and constitute a part of this specification, illustrate embodiments of the invention and together with the description, serve to explain the principles of the invention. In the figures: FIG. 1 illustrates an exemplary system in which the present invention may be employed; and FIG. 2 illustrates an exemplary process flow for conducting installation testing in accordance with the present invention.DESCRIPTION OF THE EMBODIMENTS The present invention provides methods and systems for dynamically generating installation configuration files, such as kickstart files for Linux distributions, which may be used for installing software or for software installation testing. Insome embodiments, the present invention is implemented for generating kickstart files for Anaconda-based Linux distributions. In particular, the present invention employs a framework comprising an API to discover and monitor an inventory ofdistributions, a set of templates for the configuration files, and plugins that may be selectively invoked to customize the configuration files. When performing installation testing, a server will receive a test request, access the distribution inventory, and select appropriate templates that are to be part of the test. The server will then automatically generate the installationconfiguration files from a template. In some instances, the generated configuration files may require customization. Accordingly, the server may execute one or more plugins that modify the configuration files as desired. Small client applications runon the target machines of the installation tests and work with the server to download the configuration files and the distributions. The present invention may also employ a scheduling service to coordinate the operations of the server and targetmachines. The present invention may be applied to installation and installation testing of any form of software, such as Windows systems, UNIX systems, and Linux systems. For purposes of illustration, the present invention will now be explained withreference to implementation to Linux systems, such as Fedora and Red Hat Enterprise Linux by Red Hat, Inc. Accordingly, the description will first provide some general information about Linux installations. Next, FIG. 1 is presented to explain an exemplary system of the present invention. Finally, FIG. 2 is provided to illustrate a general processflow for installation testing used in the present invention. In the figures, wherever possible, the same reference numbers will be used throughout to refer to the same or like parts. Turning now to the subject of Linux installations, many system administrators use what is known as the ""kickstart"" installation method. Kickstart files are files that specify the intended configuration of the software being provisioned. Kickstart files can be kept on a server and can be read by individual computers during the installation. This installation method allows the use of a single or relatively few standard kickstart files to install Linux on multiple machines, making itideal for network and system administrators. The kickstart file is a simple text file, containing a list of items, each identified by a keyword. In general, a kickstart file can be edited with any text editor or word processor that can save files as ASCII text. Typically, kickstart filesspecify parameters related to: language selection; mouse configuration; keyboard selection; boot loader installation; disk partitioning; network configuration; NIS, LDAP, Kerberos, Hesiod, and Samba authentication; firewall configuration; and packageselection. One skilled in the art will recognize that the present invention may be applied to non-kickstart files in Linux provisioning. For example, configuration files, such as AutoYAST Answer files used in Novell SuSe Linux and Sun Solaris Jumpstartfiles, may also be used by the present invention. Kickstart files can be made available over a network using protocols, such as NFS, FTP, or HTTP, to support network-based installations. In the present invention, the network-based approach is employed to conduct installation testing on one ormore networked target machines. If desired, however, the present invention may utilize kickstart installations using a local CD-ROM, local DVD, or a local hard drive. Reference will now be made in detail to the exemplary embodiments of the invention,which are illustrated in the accompanying drawings. Referring now to FIG. 1, an exemplary system 100 that is consistent with the present invention is shown. The system 100 may comprise a server 102, a code repository 104 which provides access to distribution trees 106 and 108, a set ofinstallation templates 110, a set of exception plugins 112, clients 114 running on target machines 116, a scheduler 118, and a configuration database 120, which comprises a distribution tree list 122 and template list 124. Each of these components willnow be further described. Server (from herein referred to as a ""SNAKE"" server for Smart Network Automated Kickstart Environment) 102 is responsible for: serving as an extensible markup language remote procedure call (XMLRPC) handler; retrieving install distribution trees106 and 108; hosting kickstart templates 110 and plugins 112; and generating installation configuration files, i.e., kickstart files. SNAKE server 102 may be implemented as software, such as Python code, running on conventional server hardware or someother suitable computing device. Such devices are well known to those skilled in the art. In order to control its operations, SNAKE server 102 may provide a command line interface that allows a user to enter various commands, such as commands for triggering the generation of kickstart files for an installation or installation test. Alternatively, with its XMLRPC handler, SNAKE server 102 may support RPCs from remote devices, such as clients 114. RPCs that may be supported are RPCs for: listing templates 110; listing distribution trees 106 or 108; generating one or more kickstartfiles; generating the command line interface, and registering one or more of target machines 116. Of course, SNAKE server 102 may be implemented with other types of interfaces, such as a graphical user interface. The primary function andresponsibilities of server 102 will now be further described. In order to retrieve one or more of installation trees 106 and 108, server 102 may implement an API. Accordingly, as distributions are written and stored at code repository 104, code repository 104 (or other device) may provide an informationfile via the API. For example, any product built by pungi, will write out a .composeinfo file that indicates what deliverables are associated with that product. Pungi is a well known open source program that spins Linux distribution trees and ""isos""(disk images of an ISO 9660 file system for CD-ROMs). Other tools for creating distribution trees and isos may also be employed by the present invention. The contents of a sample .composeinfo file are shown below: TABLE-US-00001 tree: 6.91/Prime/i386/os tree: 6.91/Prime/x86_64/os tree: 6.91/Prime/ppc/os dvdset: 6.91/Prime/i386/iso/F-6.91-i386-DVD.iso dvdset: 6.91/Prime/x86_64/iso/F-6.91-x86_64-DVD.iso dvdset: 6.91/Prime/ppc/iso/F-6.91-ppc-DVD.iso dvdset:6.91/source/iso/F-6.91-source-DVD.iso This indicates that the compose distribution supplies 3 trees and several DVD images. For additional details on the tree, server 102 may follow the path noted and examine the contents of the .treeinfo file generated by anaconda. Anaconda is awell known open source installer for Red Hat Linux and Fedora Core. Anaconda is capable of using a kickstart file to automatically configure the installation, allowing users to run it with minimal supervision. Of course, other installers similar toanaconda may be employed by the present invention. The contents of a sample .treeinfo file are shown below: TABLE-US-00002 [general] family = Fedora timestamp = 1172549418.35 variant = Prime totaldiscs = 1 version = 6.91 discnum = 1 packagedir = Fedora arch = i386 [images-i586] kernel = images/pxeboot/vmlinuz initrd = images/pxeboot/initrd.imgboot.iso = images/boot.iso diskboot.img = images/diskboot.img [images-xen] kernel = images/xen/vmlinuz initrd = images/xen/initrd.img Alternatively, server 102 may execute various scripts to scan nfs mounted directories in order to determine the type of product and locate bootable images on its shared network file system. Typically, these scripts may provide what is known asa .discinfo file, which provides of the same information as the .treeinfo file noted above. Server 102 may host templates 110 and plugins 112 using known technology. For example, server 102 may be coupled to one or more databases (not shown) via a local network or wide area network. Alternatively, server 102 may be coupled to a localstorage network to host templates 110 and plugins 112. Server 102 may implement various access mechanisms to protect or segregate templates 110 and plugins 112. For example, in an environment where multiple users or entities are performing installations and testing, server 102 may support multipletemplate and plugin repositories. This feature allows server 102 to host templates and plugins for multiple organizations and users, yet still provides a security mechanism if desired. For example, the templates and plugins for a company ""A"" may bekept private from other users. Alternatively, templates and plugins for a company ""B"" may be public or accessible to others. The present invention may employ a wide variety of these types of features using well known technology. In order to generate kickstart files, SNAKE server 102 may employ what is known as the pykickstart utility. Pykickstart is software that is able to accurately distinguish and generate valid grammar for the kickstart language from templates 110. Of course, any software that is capable of generating configuration files, such as kickstart files, from a template may be used by the present invention. The other components shown in FIG. 1 will now be described. Code repository 104 is responsible for hosting distribution trees 106 and 108. Code repository 104 may be implemented using well known components of hardware and software. Distributions 106 and 108 are bundles of software that are already compiled and configured. Distributions 106 and 108 may be in the form of formats such as rpm, deb, tgz, msi, exe, etc. For Linux, distributions 106 and 108 are bundles ofsoftware that comprise the Linux kernel, the non-kernel parts of the operating system, and assorted other software. Distributions 106 and 108 may take a variety of forms, from fully-featured desktop and server operating systems to minimal environments. Installation templates 110 are pre-formatted, generic files from which kickstart files can be generated. Templates 110 may be of several types, such as minimal, everything, default, etc. An example of a minimal template is shown below: TABLE-US-00003 from defaults import Defaults def ks(**context): `""Install the default package set.""` ks=Defaults( ) ks.packages.default = True return ks Exception plugins 112 comprise program code for customizing kickstart files for cases when special circumstances are required. For example, Fedora Core 6 (FC6) introduced IPv6 support in its installer. A plugin may be used to enable or disableuse of IPv6. Any such type of circumstance may be accounted for by the present invention. Other circumstances for plugins 112 are known to those skilled in the art. Client 114 assists SNAKE server 102 in performing installations. Client 114 is installed on target machines 116 and establishes communications with SNAKE server 102. Client 114 then downloads the distributions bootable installation images andthe kickstart files from the SNAKE server 102. In some embodiments, client 114 is written in Python code to accommodate a variety of operating systems, machine architectures, etc. Target machines 116 represent the particular machines to which software provisioning is directed. Target machines 116 may represent a wide variety of devices, such as a personal computer, a server, etc. Although FIG. 1 shows relatively few number of target machines, the present invention is capable of managing a wide range environments, such as datacenters with thousands of machines or server pools with just a few machines. Scheduler 118 assists in coordinating installation provisioning on target machines 116. For example, scheduler 118 may access a database of registered target machines 116, for example, on database 120 (not shown). Scheduler 118 may then beconfigured to find applicable subsets of target machines 116 to schedule software installations against one or more of templates 110. Configuration database 120 serves as data storage for hosting the data used by SNAKE server 102. For example, as shown, configuration database 120 will typically comprise a distribution tree list 122 and a template list 124. Distribution tree list 122 provides an inventory of distributions 106 and 108 that are hosted by SNAKE server 102. Accordingly, tree list 122 will comprise information about the nature and location of distributions, such those stored by coderepository 104. This information may include, for example, a name of the tree, a location, version information, and the like. Template list 124 provides an inventory of templates 110 that are hosted by SNAKE server 102. Accordingly, template list 124 will comprise information about the nature and location of the templates hosted by server 102. For example, thisinformation may include a name of the template, a location, a version, an architecture, and the like. Those skilled in the art should recognize that configuration database 120 may employ a variety of data structures, such as relational database tables,and object oriented data structures. Therefore, use of the word ""list"" above is merely explanatory and not meant to limit the data structure used to store the list. Reference is now made to FIG. 2, which illustrates the process flows of the present invention. As shown, in phase 200, a new distribution is submitted to code repository 104. For example, a user or developer (not shown) may create the newdistribution using the Pungi and Anaconda tools to spin this new distribution on to code repository 104. In phase 202, server 102 receives information about the new distribution and updates its tree list 122. For example, server 102 may access the .composeinfo file, which was generated by the Pungi tool. Server 102 may also follows the path notedin .composeinfo file and examine the contents of the .treeinfo file generated by anaconda for further information. Server 102 then updates its tree list 122. Server 102 may record all or some of the information in these files in tree list 122. In phase 204, server 102 receives a request for a software installation or installation test. For example, server 102 may receive the request via its command line interface or via its XMLRPC handler. The request may come in various forms, suchas a file or script, and may include other information, such as test parameters and the like. Typically, the request will specify a distribution (or multiple distributions) and information indicating one or more desired targets of the installation ortest. The desired targets may be specified several ways, such as by processor architecture, network interfaces, file system, etc. In phase 206, server 102 locates the distribution or distributions of the request and selects the appropriate templates 110 for the request. For example, server 102 may refer to its tree list 122 to determine the location of the distribution atcode repository 104. In addition, server 102 may refer to template list 124 and determine which of templates 110 should be used for the requested installation. Alternatively, server 102 may execute a script for scanning the directories of networkedfile systems. Server 102 may employ various criteria to select templates 110. Examples of criteria that may be used include: the identity of the user or entity requesting the installation or test; information in the request; and the availability of testmachines 116. In phase 208, server 102 generates the installation configuration files, e.g., kickstart files based on the selected template 110. For example, server 102 may employ the pykickstart utility to generate kickstart files from templates 110. Of note, server 102 may generate any number of kickstart files from templates 110. For example, for installation testing, server 102 may be configured to generate a range of kickstart files to test that a distribution can install across avariety of different types of target machines 116. The range of scope of the kickstart files may be specified manually (for example, via the command line interface or RPC), information in the request, or from a test plan or test script running on server102. In phase 210, server 102 may optionally customize the kickstart files. In the present invention, server 102 may customize the kickstart files by executing one or more of plugins 112. Server 102 may simply iterate through all of plugins 112 andrely on conditional logic within the plugins 112 to determine if they should be executed. Alternatively, server 102 may include a utility or program that assists it in selecting plugins 112. Such mechanisms are well known to those skilled in the art. Should one wish to disable support of IPv6 for all installs of Fedora Core 6 or newer, the following plugin could be executed to customize kickstart files: TABLE-US-00004 def kernel_args_hook(args,**context): if context[`ks`].version >= FC6: args.append(`noipv6`) return arg In phase 212, the requested distribution and associated kickstart files are provided to target machines 116. For example, a user may be running clients 114 on target machines 116 and may use RPCs to request download of boot media and kickstartfiles from server 102. Upon receiving these files, clients 114 may then configure the installation of the requested distribution based on the kickstart file. Alternatively, server 102 may ""push"" distributions and kickstart files to perform the installation or test. For example, clients 114 may register their target machines 116 with server 102. Server 102 may then initiate communications withclients 114 and send kickstart and distribution files to target machines 116. As another alternative, scheduler 118 may work with both server 102 and clients 114 to schedule installation on target machines 116. Upon request, scheduler 118 may find applicable subsets of target machines 116 to schedule softwareinstallations against one or more of templates 110. Other embodiments of the invention will be apparent to those skilled in the art from consideration of the specification and practice of the invention disclosed herein. It is intended that the specification and examples be considered asexemplary only, with a true scope and spirit of the invention being indicated by the following claims."
38|http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=95&p=2&f=G&l=50&d=PTXT&S1=(python.CLTX.+or+python.DCTX.)&OS=ACLM/python&RS=ACLM/python|Record based code structure|The compiled code of a computer program is stored in multiple pieces within a database. Each piece is optionally stored within a separate data record. Execution of the computer program includes using database queries to retrieve pieces of the compiled code for execution. The database and associated database management logic are used to provide numerous advantages in execution and management of the computer program. For example, in some embodiments, database queries are used to help facilitate program flow logic.|"1. A system comprising: a computing device; operating system logic configured to run on the computing device and stored on a non-transitory computer readable media of thecomputing device; a database stored on a non-transitory computer readable media and including data records configured to store compiled code of a computer program; code management logic configured for modifying the compiled code and further configuredto provision an application to the computing device by sending the database to the computing device via a network; database management logic configured for accessing the database; and code execution logic configured to retrieve the compiled code fromthe data records by executing one or more queries on the database management logic, and to execute the retrieved code on the operating system logic. 2. The system of claim 1, wherein at least part of the compiled code is stored as a function. 3. The system of claim 1, wherein at least part of the compiled code is configured to control a device external to the database. 4. The system of claim 1, wherein the compiled code includes compiled python code, compiled Microsoft .NET Common Intermediate Language code, Perl, PHP, Ruby, or compiled Java code. 5. The system of claim 1, wherein the database further includes data records configured to store non-compiled code. 6. The system of claim 1, wherein the database further includes data records configured to store source code of the compiled code. 7. The system of claim 1, wherein the database further includes data records configured to store hypertext markup language, a script, or extended markup language. 8. The system of claim 1, wherein the code execution logic is further configured to execute a computer program by making a plurality of queries on the database and to execute a plurality of compiled code returned as a result of these queries. 9. The system of claim 8, wherein a program flow of the computer program is dependent on the queries. 10. The system of claim 1, wherein the code execution logic is further configured to determine the queries, the queries being based on conditional program flow logic. 11. The system of claim 1, wherein the code management logic is configured to be accessed via a browser. 12. The system of claim 1, wherein the code management logic is configured to edit source code within the database at a level of individual records. 13. The system of claim 1, wherein the code management logic is configured to edit and recompile the code on a record-by-record basis. 14. The system of claim 1, wherein the code management logic is remote from the computing device. 15. The system of claim 1, further comprising code compilation logic configured to generate the compiled code from source code. 16. The system of claim 15, wherein the code execution logic is further configured to execute a database query to determine if part of the compiled code is available in the database, and to use the code compilation logic to generate the part ofthe compiled code if the part of the compiled code is not available in the database. 17. The system of claim 16, wherein the code execution logic is further configured to cache a copy of the generated part of the compiled code in the database. 18. A system comprising: a computing device; operating system logic configured to run on the computing device and stored on a non-transitory computer readable media of the computing device; a database stored on a non-transitory computerreadable media and including data records configured to store compiled code of a computer program; code compilation logic configured to operate alternatively in a production mode and a development mode, a greater amount of the compiled code beingrecompiled in the production mode relative to the development mode after modification of the code; database management logic configured for accessing the database; and code execution logic configured to retrieve the compiled code from the data recordsby executing one or more queries on the database management logic, and to execute the retrieved code on the operating system logic. 19. The system of claim 18, wherein the code compilation logic is configured to automatically compile code prior to storage in the database. 20. A system comprising: a computing device; operating system logic configured to run on the computing device and stored on a non-transitory computer readable media of the computing device; a database stored on a non-transitory computerreadable media and including data records configured to store compiled code of a computer program; code management logic configured for modifying the compiled code and further configured to index the data records based on program flow logic in sourcecode; database management logic configured for accessing the database; and code execution logic configured to retrieve the compiled code from the data records by executing one or more queries on the database management logic, and to execute theretrieved code on the operating system logic. 21. A method comprising: receiving, from a computing device, a request to execute a computer program; executing a first query to identify a first database record, of a database, in which a subset of a compiled code of the computer program isstored; modifying the compiled code and adding the modified compiled code to the database; provisioning an application to the computing device by sending the database to the computing device via a network; retrieving first code from the identifiedfirst database record as a result of the first query; providing the retrieved first code to an operating system for execution; generating a second query based on a result of the execution of the retrieved first code; using the generated second queryto identify a second database record, of the database, in which compiled code of the computer program is stored; retrieving the compiled code from the second database record as a result of the second query; and providing the retrieved compiled code tothe operating system for execution. 22. The method of claim 21, wherein the request is received over a computing network. 23. The method of claim 21, wherein the second query is based on conditional program flow logic of the computer program. 24. The method of claim 21, wherein the compiled code in the second database record consists of a compiled function. 25. The method of claim 21, further comprising determining that a part of the compiled code is not available in the database, generating the unavailable part of the compiled code, and storing the generated part in the database. 26. The method of claim 21 wherein source code is stored in the database. 27. A system comprising: a first computing device; operating system logic configured to run on the first computing device and stored on a non-transitory computer readable media of the first computing device; a database stored on anon-transitory computer readable media of a second computing device and including data records configured to store source code of a computer program; database management logic configured for accessing the database; code compilation logic configured torun on the first computing device and to retrieve the source code from the data records by executing one or more queries on the database management logic, and to compile the retrieved source code on the operating system logic; and code management logicconfigured for modifying the compiled code and further configured to provision an application to the first computing device by sending the database to the first computing device via a network. Description BACKGROUND 1. Field of the Invention The invention is in the field of computing systems, and more specifically in the fields of computer programming and provisioning. 2. Related Art In a typical computing model source code is generated by a programmer using an editor. This source code may be configured to be interpreted at the time it is executed or compiled into executable code using a compiler. Compiled code typicallyexecutes more quickly than interpreted code because the compiling process includes parsing and syntax checking prior to execution. Compiling the code also places the code in a form (e.g., object code) that may be directly executable using an operatingsystem. The compiled code is stored using a filing system, typically provided with an operating system configured to execute the compiled code. For example, the compiled code may be stored in an "".exe"" file for execution within the Windows operatingsystem. The compiled code may be linked to other files containing executable code, data or scripts. This linking may occur prior to or at the time the code is executed. When the code is executed the file system is used to identify the file withinwhich the code is stored and this file is opened and processed by the operating system. There are several disadvantages to this computing model. For example, modification of the compiled code typically involves recompiling an entire source code or file thereof. If a single function, among many functions, within source code, ismodified, then the entire source code, on a file-by-file basis, is recompiled. Further, specific permissions and specific software (e.g., an editor) are required to modify the source code. This can be cumbersome when the editor and code are ondifferent computing devices. Databases and database programs configured to manage the databases are commonly used to store and access data. Sometimes this data is used by computer programs external to database programs. For example, an external program may use a databaseprogram to retrieve data that is then operated on by the external program. Database programs may also include ""database stored procedures"" which are functions prepared by a user of the database program to operate on a database. Database storedprocedures are limited to operating on stored data and are differentiated from other types of computer programs in that these procedures are run under the control of (e.g., within) the database program rather than under direct control of an externaloperating system.SUMMARY Various embodiments of the invention comprise a computing architecture in which executable code, for execution external to a database program, is stored within records of a database. The executable code is retrieved from the database at thetime of execution. This executable code typically includes compiled code that is ready for execution on an operating system. In comparison to the prior art, the executable code is managed and accessed via the database program rather than merely via afile system. Storage of executable code within the records of a database provides a variety of advantages, some of which are provided as examples herein. For example, the code may be easier to manage in a database than a file system. The executable codecan be stored with a greater degree of granularity than would normally be practical using a file system. In some embodiments, executable code is stored at a granularity such that individual functions are located in different data records of thedatabase. In some cases this allows for the executable code to be managed, modified or otherwise manipulated at the function level rather than at the file level. During execution of a computer program, database queries are used to retrieve the stored code from the database. The retrieved code is then executed external to the database and supported by the operating system. The code may be executed onepart at a time, each part being separately retrieved from the database. Queries are optionally used to facilitate conditional program flow. For example, a CASE statement that uses a label to direct program flow between a number of alternative paths maybe implemented by a database query that uses the label as a query parameter. Various embodiments of the invention include a system comprising: a computing device; operating system logic configured to run on the computing device and stored on a computer readable media of the computing device; a database stored on acomputer readable media and including data records configured to store compiled code of a computer program; database management logic configured for accessing the database; and code execution logic configured to retrieve the compiled code from the datarecords by executing one or more queries on the database management logic, and to execute the retrieved code on the operating system logic. Various embodiments of the invention include a method comprising: receiving a request to execute a computer program; executing a first query to identify a first database record, of a database, in which a subset of compiled code of the computerprogram is stored. retrieving first code from the identified first database record as a result of the first query; providing the retrieved first code to an operating system for execution; generating a second query based on a result of the execution ofthe retrieved first code; using the generated second query to identify a second database record, of the database, in which compiled code of the computer program is stored; retrieving the compiled code from the second database record as a result of thesecond query; and providing the retrieved compiled code to the operating system for execution. Various embodiments of the invention include a method comprising: receiving source code of a computer program, the source code comprising a plurality of functions; compiling the plurality of functions, the compiled functions being configured forexecution on an operating system; storing each of the compiled plurality of functions in a separate database record; and indexing each of the separate database records using an identifier of the function stored in the database record, the identifiersbeing configured to select members of the plurality of functions according to program flow logic. BRIEF DESCRIPTION OF THE DRAWINGS FIG. 1 illustrates a computing system, according to various embodiments of the invention. FIG. 2 illustrates a data structure, according to various embodiments of the invention. FIG. 3 illustrates a distributed computing system, according to various embodiments of the invention. FIG. 4 illustrates methods of executing a computer program, according to various embodiments of the invention. FIG. 5 illustrates methods of creating and modifying a computer program, according to various embodiments of the invention.DETAILED DESCRIPTION In various embodiments, the invention includes a computing device on which a computer program is stored within a database, systems and methods of storing and modifying the computer program, systems and methods of executing the computer program,and other features discussed herein. The stored computer program includes compiled code as well as optionally data, scripts, mark-up language, images, source code, or the like. The computer program is optionally stored at a granularity whereinindividual functions are store in separate data records. The computer program is executed by retrieving the stored compiled code from the database at the time of execution. In some instances the computer program is part of an internet based applicationconfigured to be accessed, modified and/or executed though a browser. The compiled code is object code or byte code that has been parsed and converted from a human-readable source code form so as to be more efficiently executed by a software interpreter. Byte code may be executed by a virtual machine (e.g.,interpreter) or it may be further compiled to machine code. Using byte code a computer program may be executed in two phases, first compiling source code into byte code, and then passing the byte code to a virtual machine. Such virtual machines areportable and exist for popular programming languages such as C, Java, Python, PHP (Hypertext Preprocessor), Forth and Tcl (Tool Command Language). Other examples of byte code include code of the BCPL programming language, p-code of UCSD Pascal, Scheme48, CLISP, CMUCL, Microsoft .NET Common Intermediate Language, among others. Object code is a representation of source code that has been generated by a compiler or assembler. This code may include binary instructions (machine code), data for use bythe code, program symbols, relocation information, debugging information, and/or the like. The compiling of object code or byte code typically includes performing syntax checks on source code and parsing the source code at least one time to generate theobject or byte code. FIG. 1 illustrates a Computing System 100, according to various embodiments of the invention. Computing System 100 is configured for the preparation, storage and/or execution of computer programs. As is further described herein, ComputingSystem 100 is optionally a distributed system comprising a plurality of discrete devices configured to communicate together. Computing System 100 comprises at least one Computing Device 110. Computing Device 110 includes hardware such as a processor,memory and input/output configured to execute a computer program. In various embodiments Computing Device 110 comprises a server, a personal computer (PC), a workstation, a portable computing device, or the like. Computing Device 110 is optionally connected to other computing devices via a Network 120. Network 120 may include the internet, a wide area network, a local area network, or the like. For example, in some embodiments Computing Device 110includes a server configured to execute a computer program, the output of which is communicated over the internet and presented to a user within a browser. Network 120 may also be configured to facilitate communication between various distributedelements of Computing System 100. Computing System 100 further comprises Operating System Logic 130. Operating System Logic 130 is optionally stored on a computer readable media within Computing Device 110 and is configured to run on Computing Device 110 so as to support theexecution of object code or byte code on Computing Device 110. Operating System Logic 130 is optionally further configured to support a file system on Computing Device 110. Operating System Logic 130 may include, for example, LINUX, UNIX, BSD Unix, MacOS X, HPUX, Solaris, Microsoft Windows, or the like. Computing System 100 further comprises a Database 140. Database 140 is typically a relational database stored on computer readable media and may be stored on Computing Device 110 or on some other computing device within Computing System 100. Database 140 comprises data records configured to store compiled code of a computer program. Data records within Database 140 are optionally also configured to store data on which the computer will operate, configuration data related to the computerprogram, non-compiled computing instructions, and/or the like. For example, non-compiled computing instructions stored in data records of Database 140 may include scripts, mark-up language instructions, source code, code configured to be interpreted ina text format, or the like. Compiled and non-compiled computing instructions may be stored in the same and/or different data records. In some embodiments, Computing System 100 comprises an instance of Database 140 configured to store compiled code anda similar database configured to store related source code. The logical division of compiled code among different data records may be similar to the division of source code among database records. Further details of Database 140 are described elsewhereherein, for example with respect to FIG. 2. Database 140 is typically managed by Database Management Logic 150 installed on the same computing device as Database 140. Database Management Logic 150 is configured to access (e.g., read or write) records within Database 140 using queries. Database Management Logic 150 may also be configured to control access to Database 140, to define tables of data records within Database 140, to log operations on Database 140, and/or to perform other functions commonly available from database managementtools. Database 140 optionally is configured to store compiled code of more than one computer program. Computing System 100 further includes Code Execution Logic 160. Code Execution Logic 160 is configured to retrieve the compiled code from the data records by executing one or more queries through Database Management Logic 150, and to executethe retrieved code using Operating System Logic 130. Code Execution Logic 160 may be stored on Computing Device 110 or on some other computing device within Computing System 100. More specifically, Code Execution Logic 160 is configured to formulate queries that are configured to retrieve a next required stored piece of compiled code. For example, when a computer program is first executed, Code Execution Logic 160 maybe used to formulate a query configured to identify a data record within Database 140 that includes code of an entry point of the computer program. This query may include an identifier of the program as well as a parameter indicating that the entrypoint is required. The results of this query comprise the entry point code which is then passed to Operating System Logic 130 for execution. Code Execution Logic 160 is then used to formulate a second query configured to retrieve the next code to beretrieved from Database 140 for execution on Operating System Logic 130. The second query may be formulated after the first query is formulated and/or may be formulated after the first code is executed. The second query may be formulated shortly after the first query if the program flow following the code retrieved by the first query is known. The program flow is the order in which code will be executed. Program flow may be varied using, forexample, conditional branching statements within the computer program. These conditional branching statements include, for example, IF statements, WHILE statements, CASE statements, or the like. If the computer program includes a conditional branchingstatement, the contents of the second query may be dependent on results of executing the code retrieved using the first query. In some embodiments, therefore, it may not be possible to formulate the second query until after the code of the first queryis finished executing. Sometimes conditional branching statements include a label to which program flow should jump. In systems of the prior art, this label may be converted to a pointer. In some embodiments, the label is used as a parameter in the second query. Within the query, this label is used by Data Management Logic 150 to identify the data record in which the next code to be executed is stored. As a result of this feature, the querying capabilities of Database Management Logic 150 may be used to controlprogram flow within the executed program. This may result in several advantages. For example, a new option (program flow destination) may be added to a conditional branching statement by adding an appropriate data record to Database 140 and indexingthe added data record using a label to be included in a query by Code Execution Logic 160. In various embodiments, parameters included in queries are received by Code Execution Logic 160 from a user, from a command line, from a configuration file, froman examination of available hardware, retrieved from a database, web request data, and/or another computer program. Code Execution Logic 160 may be configured to formulate and execute further queries, following the second query, having similar characteristics. This process may be repeated until program termination. Computing System 100 optionally further includes Code Compilation Logic 170 configured to generate the compiled code from source code. Code Compilation Logic 170 is optionally a standard compiler configured for compiling source code to byte orobject code. Code Compilation Logic 170 is alternatively a customized compiler configured to compile source code to byte or object code, and to output the source code in a piecemeal form including pieces of compiled code that are of appropriate scopefor storage in Database 140. For example, Compilation Logic 170 may divide the compiled code into parts at the function (procedure) level, a functional level, by class definition, or into other logical elements. In some embodiments, the compiled codeis divided into parts based on program flow within the computer program. In these embodiments, the compiled code may be divided at points where jumps to labels within the code are made. In some embodiments, Code Compilation Logic 170 is configured toautomatically compile received source code and then store the compiled code in Database 140. Code Compilation Logic 170 may be stored in Computing Device 110 or some other computing device of Computing System 100. In some embodiments, Code CompletionLogic 170 is configured to store definition code for a class in a data record, or alternatively store each class method of a class in a separate data record. Computing System 100 optionally further includes Code Management Logic 180 configured for modifying and otherwise manipulating the compiled code. In some embodiments Code Management Logic 180 is configured for a user to access source code,retrieve the accessed source code, edit the source code, compile the source code using Code Compilation Logic 170, and/or store the compiled source code in Database 140. Code Management Logic 180 typically uses Database Management Logic 150 foraccessing, retrieving, and storing compiled code in Database 140. Database Management Logic 150 optionally further uses Database Management Logic 150 (or an instance thereof) to access source code stored in Database 140 or another database. Code Management Logic 180 is optionally configured for use within a web browser. For example, Code Management Logic 180 may be configured to communicate with Database Management Logic 150 and/or Code Compilation Logic 170 via the internet. Insome embodiments, Code Management Logic 180 is configured to access both compiled code and source code using one or more instances of Database Management Logic 150. For example, if the source code is stored in a database, Code Management Logic 180 mayuse queries to access this source code. The source code may be stored in a single record or stored in multiple records in a piecemeal fashion. In embodiments wherein the source code is stored in multiple records, Code Management Logic 180 is optionallyconfigured to either present one piece of source code to a user at a time or several pieces of source code to a user at the same time. When several pieces of source code are presented to the user at the same time, the results of queries to the databaseincluding the source code may be appended together such that the source code is presented as a continuous body of human-readable text. Code Management Logic 180 is optionally configured to present the source code to a user within an editing environmentso that the source code can be modified by the user. If the source code is edited, Code Management Logic 180 is configured to store the edited source code. This storage may be in a file or in a database. Code Management Logic 180 is further configured to compile the edited source code and storethe compiled source code in Database 140. The source code may be compiled in its entirety or in a piecemeal fashion. For example, if only one piece of source code was retrieved from a database and edited, then only this piece of source code may berecompiled and stored, in the compiled form, in Database 140. FIG. 2 illustrates a Data Structure 200 as may be included in Database 140, according to various embodiments of the invention. Data Structure 200 comprises a plurality of Records 210, individually labeled 210A, 210B, . . . 210N. DataStructure 200 may include any number of Records 210. Each of Records 210 comprises a plurality of Data Fields 220, individually labeled 220A, 220B, . . . 220N. Each of Records 210 may include more or fewer Fields 220 than illustrated in FIG. 2. TheseFields 220 are accessible, readable and writable using queries executed by Database Management Logic 150. Typically, several instances of Data Structure 200 are included in Database 140. Each of Data Structure 200 is optionally stored in a differentfile. The order of Data Fields 220 illustrated in FIG. 2 may be varied in alternative embodiments. In an exemplary embodiment, a Field 220A is configured to store a record index value. The index value is typically a unique identifier configured to identify a particular data record. The index value is optionally used as a label to controlprogram flow. A Field 220B is configured to store a piece of executable code or source code of a computer program. As discussed elsewhere herein, this code may be stored on a line-by-line basis, on a function basis, on a functional basis, on a basisbased on program flow, or some other basis for dividing the computer program into separate pieces. An optional Field 220C is configured to store a data or function type. This type may be the type of a value (or object) expected by the code stored in Field 220B, or the type of a value (or object) returned by the code stored in Field 220B. An optional Field 220D is configured to store data on which the code stored in Field 220B is configured to operate on. For example, Data Field 220D may include constants for use by the stored code. Records 210 may include a wide variety of additional fields, represented in FIG. 2 by Field 220N. One or more Fields 220N may include fields configured to store: further labels configured to control program flow, a label (or index vale) of asubsequent piece of code, a version identifier of the code stored in Field 22B, configuration information, mapping information, scheduling information, a human readable description or explanation of the code, organization information for an editor, orthe like. Database 140 is typically stored in one or more tables each including an instance of Data Structure 200. These tables are optionally combined using a JOIN instruction or the like. For example, in some embodiments code is store in a firstdatabase table that includes function types, function names, function parameters and default data, a second table that includes source code for each instance of a function, and a third table that includes compiled byte code (or the like) of each functioninstance. FIG. 3 illustrates distributed embodiments of Computing System 100. In these embodiments Computing System 100 is divided into, for example, a Management Server 305 and a Database Server 310. Management Server 305 includes Operating SystemLogic 130, Code Execution Logic 160, and optionally Code Compilation Logic 170 and Code Management Logic 180. Database Server 310 includes Database 140 and Database Management Logic 150. Management Server 305 and Database Server 310 are configured tocommunicate with each other through part of Network 120, for example a Local Area Network 120A. Management Server 305 is optionally configured to communicate with more than one instance of Database server 310. Each of these instances may be configuredto support one or more different computer programs. Management Server 305 is further configured to communicate with one or more Clients 315, referred to herein as Client 315A, Client 315B, Client 315C, etc. This communication may be through another part of Network 120, for example Internet 120B. In some embodiments, Management Server 305 is configured to be accessed by users of clients via an internet Browser 320, e.g., Internet Explorer or Firefox. This access may include execution of computer programs stored in Database 140 and/or developmentand modification of these computer programs. FIG. 4 illustrates methods of executing a computer program, according to various embodiments of the invention. As described elsewhere herein, the computer program is executed by retrieving executable code from a database, and executing thisretrieved code on an operating system external to the database. These methods may be performed using Computing System 100, optionally in response to communications received from Clients 315. The steps illustrated in FIG. 4 may be performed inalternative orders. In a Receive Request Step 410 a request to execute a computer program is received by Computing System 100. This request may be received from another computing device, from a user of Management Server 305 or from a user of one of Clients 315. In some embodiments the request is received via Browser 320, includes a universal resource locator (URL), and/or is communicated via HTTP, is communicated via TCP/IP, and/or is provided using a POST operation. In addition to information identifying thecomputer program, the request optionally includes other data such as security information, configuration data, version information, uploaded file data, an image, video, or the like. In an Execute Query Step 415 a query is provided to Database Management Logic 150. This query is configured to retrieve a subset of the compiled code of the computer program from one of Records 210 within Database 140. The query may be apredetermined query or may be configured in response to data received as part of the request. In a Retrieve Code Step 420 the execution of the query executed in Execute Query Step 415 results in the retrieval of a first piece of code from Database 140. This first piece of code is a subset of the code of the computer program. Asdiscussed elsewhere herein, the retrieved code may be a single function, a single functional unit, a block of code between conditional branches in a program flow, a single line of code, or other division of the total code of the computer program. If the retrieval of code in Retrieve Code Step 420 fails, e.g., if the code is not available, then in an optional Generate Code Step 425 the compiled code is generated from source code using Code Compilation Logic 170. This generated code isthen stored in one of Records 210 of Database 140. Generate Code Step 425 may include all or a subset of the total code of the computer program. If all of the code is generated, then different parts of the generated code are stored in different Records210. In an optional Store Compiled Code Step 430 any code generated in Generate Code Step 425 is stored in one or more Records 210 of Database 140 using Database Management Logic 150. Retrieve Code Step 420 is then attempted again. This storage mayoccur in an original copy of Database 140 or a cached copy of Database 140. A cached copy is optionally created by Code Execution Logic 160 or other elements of Computing System 100. In a Provide Code Step 435, the executable code retrieved in Retrieve Code Step 420 is provided to Operating System Logic 130 for execution. This execution typically is not dependent of Database Management Logic 150. For example, asillustrated in FIG. 3, Operating System Logic 130 and Database Management Logic 150 are optionally included on different computing devices. The code is, thus, optionally executed on Operating System Logic 130 remote from Database Management Logic 150. In a Generate Query Step 440, a second query is generated. This query is configured to retrieve further code of the computer program from Database 140. The second query is optionally based on a result of the execution of the retrieved firstcode. For example, the execution of the retrieved first code may generate a value that determines program flow, e.g., the object of a subsequent IF or CASE statement. This value may then be included in the second query as a parameter. In a Use Query Step 445, the generated second query is used to identify a second of Records 210 of Database 140. This second of Records 210 may include compiled code of the computer program, other executable code, non-compiled code, data,scripts, mark-up language, images, source code, and/or the like. In a Receive Code Step 450, executable code is received from the second database record as a result of the second query. This code is received by a computing device including Operating System Logic 130, for example Management Server 305. Theexecutable code is optionally received via Network 120. In a Provide Code Step 455, the executable code received in Receive Code Step 445 is provided to Operating System Logic 130 for execution. This execution is optionally independent of Database Management Logic 150, although the execution maygenerate a result that is later used to access Database 140 using Database Management Logic 150. As such, the Steps Generate Query 440 through Provide Code 455 may be repeated to retrieve and execute multiple pieces of code from Database 140. Thisprocess may continue until the computer program is terminated. FIG. 5 illustrates methods of creating and modifying a computer program, according to various embodiments of the invention. In these methods source code is received and compiled. The compiled code is stored in an indexed manner in multiplepieces within Records 210. The method optionally includes further steps in which the source code or other data are stored, the stored compiled code is modified, the Database Management Logic 150 is used to provide additional features, and/or thedatabase computer program is provisioned by supplying a copy of Database 140. The steps illustrated in FIG. 5 may be performed in alternative orders. In a Receive Source Code Step 510, the source code of a computer program is received by Computing System 100. The computer program may be received from a storage device, from another computing device via Network 120, or from a user enteringtext. The received source code typically includes a plurality of functions. In a Compile Step 515, the source code received in Receive source Code Step 510 is compiled using Code Compilation Logic 170. This step may include generating a single block of compiled code or generating multiple pieces of compiled codedivided as discussed elsewhere herein. For example, Code Compilation logic 170 may be used to divide the compiled code into pieces that can be separately stored in Records 210 of Database 140. For example, in some embodiments, Code Compilation logic170 is used to produce separate pieces of compiled code based on functions or program flow of the source code. The compiled code generated in Compile Step 515 is configured for execution on Operating System Logic 130 and is typically in byte code,object code, machine code, and/or the like. In a Store Step 520, the compiled code generated in Compile Step 515 is stored in Records 210 of Database 140. Each piece of the compiled code is optionally stored in a separate member of Records 210. If the code was generated in multiplepieces in Compile Step 515 then these pieces can typically be stored directly. However, if Compile Step 515 results in a single block of compiled code, then Store Step 520 includes dividing this block into separate pieces. This division may beperformed using Code Management Logic 180 and typically includes dividing the code up on one or more of the basis discussed elsewhere herein. Store Step 520 optionally includes storing further information, in addition to compiled code. For example. Store Step 520 may include storing other executable code, configuration code, data to be operated on by the code, type information, orany of the other information discussed herein. In an Index Step 525, the members of Records 210 in which compiled code are stored are indexed. The indexing process is typically performed using Code Management Logic 180 and/or Database Management Logic 150. The indexing is configured forthe identification and retrieval of the stored compiled code and optionally other information. Each separately stored piece of code is typically associated with a unique index or set of indexes. Thus, each piece of code may be identified using theindexing. In some embodiments, Index Step 525 includes adding labels (or other identifiers) meaningful to program flow to Records 210. For example, a label added in Index Step 525 may identify a piece of code as a program flow destination following aconditional statement. In an optional Store Source Step 530, the source code received in Receive Source Code Step 510 is stored. The source code is optionally stored in pieces with the compiled code in Database 140, or in pieces in a separate database having astructure similar to that of Database 140, e.g., where Field 220 is used to store source code rather than compiled code. Alternatively, Store Source Step 530 may include storing the source code in a conventional text file. In an optional Store Configuration Data Step 535, configuration data is stored in Database 140. This configuration data is configured for providing a user with alternative configurations of the computer program represented by the receivedsource code. For example, in some embodiments, more than one set of configuration data is stored in Database 140, each set in a different data record. A query executed using Database Management Logic 150 may then be used to retrieve a configurationdesired by a user or appropriate for a specific hardware target, or the like. In an optional Modify Step 540, compiled code within Records 210 is modified. This modification process may include altering the stored source code or receiving new source code, compiling the altered or new source code, and replacing compiledcode stored in one or more of Records 210 with the new compiled source code. Modify Step 540 may be performed using Code Management Logic 180 to modify the source code, Code Compilation Logic 170 to compile the source code, and Database Management Logic150 to store the new compiled code in one or more of Records 210. Modify Step 540 is optionally performed on one piece of the compiled code at a time. For example, the modification may be made to compiled code stored in only one or a subset of Records 210. Other compiled code, of the same computer program,need not necessarily be recompiled. As such, the modification and recompiling may be limited to a single piece of code separated from other code on the basis of function, functionality, program flow, or the like. In some embodiments Code CompilationLogic 170 is configured to operate in a production mode and a development mode. A greater amount of the compiled code is recompiled in the production mode relative to the development mode, after modification of the code. In an optional Version Management Step 545, version control of the stored compiled code, and other parts of the computer program are performed using logging capabilities of Database Management Logic 150. For example, in some embodiments,Database Management Logic 150 includes a logging feature configured to log changes in Database 140. This feature may be used to track changes in the computer program. Likewise, Database Management Logic 150 may have a rollback feature configured toreturn the database to a previous state. This feature may be used to restore previous versions of code. In some embodiments, Database Management Logic 150 is configured to keep multiple copies of Database 140 or individual Records 210 and to trackthese copies using version information. In an optional Control Access Step 550, access control features of Database Management Logic 150 are used to control access to the computer program or features thereof. For example, Database Management Logic 150 may be configured to controlaccess to particular Records 210 or sets thereof within Database 140 (or control access to Database 140 in its entirety). This access control can be used to prevent a user from accessing pieces of compiled code associated with specific functionality,specific data, images, or any other aspect of the computer program. In an optional Provision Step 555, the computer program is provisioned to a computing device by providing a copy of Database 140 to that computing device. This provisioning may occur over Network 120. The step takes advantage of the fact that,in some embodiments, Database 140 is portable. Several embodiments are specifically illustrated and/or described herein. However, it will be appreciated that modifications and variations are covered by the above teachings and within the scope of the appended claims without departing fromthe spirit and intended scope thereof. For example, the various logic discussed herein may comprise hardware, firmware and/or software stored on a computer readable media. Different parts of a computer program are optionally stored within differenttables of Database 140. For example, where a computer program comprises multiple source files and/or object files, each of these may be stored in a separate table. The compiled code discussed herein is optionally configured for execution within abrowser. The various embodiments discussed herein may be applied to web or non-web applications. The compiled code discussed here may be executed on a virtual machine. Likewise, various components of Computing System 100 may include virtual machines. The embodiments discussed herein are illustrative of the present invention. As these embodiments of the present invention are described with reference to illustrations, various modifications or adaptations of the methods and or specificstructures described may become apparent to those skilled in the art. All such modifications, adaptations, or variations that rely upon the teachings of the present invention, and through which these teachings have advanced the art, are considered to bewithin the spirit and scope of the present invention. Hence, these descriptions and drawings should not be considered in a limiting sense, as it is understood that the present invention is in no way limited to only the embodiments illustrated."
39|http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=92&p=2&f=G&l=50&d=PTXT&S1=(python.CLTX.+or+python.DCTX.)&OS=ACLM/python&RS=ACLM/python|Procedurally expressing graphic objects for web pages|A graphics object can be expressed using procedural language embedded in a markup language document. In a embodiment, a drawing space is specified in markup language. A drawing command to arbitrarily draw a graphics object into the drawing space is specified in procedural language. Interpretation of the markup and procedural language commands results in the rendering of the arbitrary graphics object. In another embodiment, there is a browser comprising a rendering engine, an interpreter, and parser. The rendering engine is configured to interpret a markup language instruction that specifies a drawing space as well as drawing commands in procedural language for drawing an arbitrary graphic object into the drawing space. The parser can then parse the drawing commands and convert them into an execution tree of tree objects.|
40|http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=77&p=2&f=G&l=50&d=PTXT&S1=(python.CLTX.+or+python.DCTX.)&OS=ACLM/python&RS=ACLM/python|Hierarchically scoped resettable variables in graphical modeling environments|The illustrative embodiments of this invention are directed to a method, a medium and a system for realizing resettable hierarchically scoped variables in a graphical modeling environment on a computing device. The method includes creating at least one resettable variable in a model within the graphical modeling environment, wherein the resettable variable is hierarchically scoped. The resettable variable is reset to a preset value before or during a subsequent invocation of a part of the model that contains the resettable variable. The graphical modeling environment may be a state diagramming environment or the graphical modeling environment may be a time-based graphical modeling environment.|
41|http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=79&p=2&f=G&l=50&d=PTXT&S1=(python.CLTX.+or+python.DCTX.)&OS=ACLM/python&RS=ACLM/python|Documentation generation from a computer readable symbolic representation|Generation of documentation from a computer readable symbolic representation is described. In an embodiment, a reified version of an input is obtained as coded objects. The input is readable by a programmed computer for execution, and is in an applied form of a symbolic representation of knowledge for a defined domain of knowledge. The reified version is a coded form of the applied form, wherein the coded objects are in a dynamic language. A content sequence library is accessed by the programmed computer responsive to the coded objects to extract content for a document plan. A reasoning library is then accessed by the programmed computer responsive to the content extracted to provide a sequenced organization of phrase structure for the content extracted. A natural language representation of the input is output from a realization of the sequenced organization of phrase structure.|"1. A method executed by a processor for documentation generation, comprising: reifying input into coded objects in a dynamic language; data mining a content-reasoninglibrary to provide meaning of the coded objects; wherein the data mining includes determining relationships of the coded objects to one another to provide the meaning; wherein the content-reasoning library includes a symbolic representation ofknowledge for a defined domain; realizing the meaning as a document object model; accessing an interface library for converting the document object model into a document; and outputting the document. 2. The method according to claim 1, wherein: the input is a computer program; and the defined domain is an instruction set used for execution of the computer program. 3. The method according to claim 1, wherein: the input is a netlist; and the defined domain is circuits described using a hardware description language. 4. The method according to claim 1, wherein the data mining includes: using a document plan to parse the meaning of the coded objects into a sectionalized structure; and extracting content from the content-reasoning library for sections of thesectionalized structure. 5. The method according to claim 4, wherein the realizing the meaning includes populating sections of the document plan with the content in a sequenced organization of phrase structure. 6. The method according to claim 1, wherein the document includes text and graphics. 7. A method executed by a processor for documentation generation, comprising: obtaining a reified version of an input as coded objects; wherein the input is in an applied form of a symbolic representation of knowledge for a defined domain ofknowledge; wherein the reified version is a coded form of the applied form; wherein the coded objects are in a dynamic language; storing the reified version; first accessing a content sequence library responsive to the coded objects to extractcontent for a document plan; second accessing a reasoning library responsive to the content extracted to provide a sequenced organization of phrase structure for the content extracted; and outputting a natural language representation of the input froma realization of the sequenced organization of phrase structure. 8. The method according to claim 7, wherein the obtaining of the reified version includes: obtaining an instruction set as the defined domain of knowledge; reifying the instruction set to provide a lexicon of coded objects from which the codedobjects are selectable; and reifying the input by selection of the coded objects therefor from the lexicon of coded objects. 9. The method according to claim 8, wherein: the instruction set is for a processor; and the input is a computer program including instructions from the instruction set for execution by the processor. 10. The method according to claim 7, wherein the obtaining of the reified version includes: obtaining a circuits library as the defined domain of knowledge; reifying the circuits library to provide a lexicon of coded objects from which thecoded objects are selectable; and reifying the input by selection of the coded objects therefor from the lexicon of coded objects. 11. The method according to claim 10, wherein: the circuits library is expressed in a hardware description language; and the input is a netlist expressed in the hardware description language. 12. The method according to claim 7, wherein the dynamic language is an object-oriented dynamic binding language. 13. The method according to claim 12, wherein: the coded objects are selected responsive to the input from a lexicon for the defined domain of knowledge; and the lexicon is expressed as lists and associated sub-lists of terms withcorresponding object codes from which the coded objects are selected. 14. The method according to claim 12, wherein the dynamic language is selected from a group consisting of Lisp, Python, Ruby, and Perl. 15. The method according to claim 7, wherein the first accessing includes data mining of the content sequence library responsive to the coded objects. 16. The method according to claim 15, wherein the content sequence library stores in symbolic form a set of objects for the defined domain of knowledge in structures of nodes with reference listings therefor. 17. The method according to claim 16, wherein the structures of nodes are selected from a group consisting of tree and list structures. 18. The method according to claim 7, wherein the second accessing includes: iterating over the content extracted for interpreting meaning of the coded objects to provide an interpreted meaning; producing actions responsive to the interpretedmeaning of the coded objects; and producing inferences responsive to the actions for expressing relationships as between the coded objects; wherein the relationships are determined for providing the natural language representation. 19. The method according to claim 18, wherein the natural language representation is a set of rules for interpreting symbolic objects. 20. A non-transitory, non-signal machine-readable medium having stored thereon information representing instructions that, when executed by general purpose programmed computer, cause the programmed computer to perform operations as aspecial-purpose programmed computer comprising: reifying input into coded objects in a dynamic language; data mining a content-reasoning library to provide meaning of the coded objects; wherein the data mining includes determining relationships of thecoded objects to one another to provide the meaning; wherein the content-reasoning library includes a symbolic representation of knowledge for a defined domain; realizing the meaning as a document object model; accessing an interface library forconverting the document object model into a document; and outputting the document. Description FIELD OF THE INVENTION An embodiment of the invention relates to documentation generation. More particularly, an embodiment of the invention relates to automated generation of documentation from a computer readable symbolic representation.BACKGROUND OF THE INVENTION For some time, people have performed critical interpretation of ancient documents. Seeking an explanation from ancient documents is generally referred to exegesis. The exposition of the meaning or purposes of an ancient document by painstakingdetailed examination is generally a time consuming processes. More recently, translation from one language to another has been made easier by computer- or web-implemented translators. In these translators, words or phrases in one natural language can be associated with words or phrases in another naturallanguage. However, the accuracy of such translations may be negatively impacted due to the wide variety of knowledge and expressions of that knowledge. While computer- or web-implemented translation is for translation from a natural language to another natural language, translations of computer language are common in the computer industry. Translation from one high-level computer language toanother high-level computer language may be performed by a source-to-source translator. Furthermore, computer programs known as compilers convert source code written in a high-level computer language into object code written in a low-level computerlanguage. Compilers generally involve very detailed syntax and rules for the source code, and thus the range of expression is more narrowly defined than in natural language-to-natural language translation. However, computer programs, among other forms of computer readable listings, are generally more difficult for humans to easily understand in comparison to natural language expression. For example, unless source code is substantially manuallyremarked by a programmer, it may be difficult for another programmer who is not the originator of the source code to understand the meaning expressed. In other words, the subsequent programmer may have to perform a painstaking detailed examination,which is generally a time-consuming process, in order to understand the meaning expressed in such source code. Additionally, it may be a time-consuming process to generate documentation to explain how the source code operates. For example, technical writers tasked with developing documentation for programs may not be computer programmers, and thus theexchange between programmer and technical writer to produce documentation for a program may be substantially time consuming. Accordingly, it would be desirable and useful to provide means that speeds up the process for converting a computer readable listing into a more natural language description of the expression of the listing.SUMMARY OF THE INVENTION One or more embodiments generally relate to the generation of documentation from a computer readable symbolic representation. An embodiment relates generally to a method for documentation generation. In such an embodiment, a reified version of an input is obtained as coded objects. The input is in an applied form of a symbolic representation of knowledge for adefined domain of knowledge. The reified version is a coded form of the applied form, wherein the coded objects are in a dynamic language. The reified version is stored. A content sequence library is accessed responsive to the coded objects to extractcontent for a document plan. A reasoning library is then accessed responsive to the content extracted to provide a sequenced organization of phrase structure for the content extracted. A natural language representation of the input is output from arealization of the sequenced organization of phrase structure. Another embodiment relates generally to a method for documentation generation. In such an embodiment, input is reified into coded objects in a dynamic language. A content-reasoning library is data mined to provide meaning of the coded objects,wherein the data mining includes determining relationships of the coded objects to one another to provide the meaning and the content-reasoning library includes a symbolic representation of knowledge for a defined domain. The meaning is realized as adocument object model. An interface library is accessed for converting the document object model into a document. The document is output. Yet another embodiment is a non-transitory machine-readable medium having stored thereon information representing instructions that, when executed by general purposed programmed computer, cause the programmed computer to perform operations as aspecial-purpose programmed computer. In such an embodiment, the performed operations include: reifying input into coded objects in a dynamic language; and data mining a content-reasoning library to provide meaning of the coded objects. The data miningincludes determining relationships of the coded objects to one another to provide the meaning. The content-reasoning library includes a symbolic representation of knowledge for a defined domain. The performed operations further include: realizing themeaning as a document object model; accessing an interface library for converting the document object model into a document; and outputting the document. BRIEF DESCRIPTION OF THE DRAWINGS Accompanying drawing(s) show exemplary embodiment(s) in accordance with one or more aspects of the invention; however, the accompanying drawing(s) should not be taken to limit the invention to the embodiment(s) shown, but are for explanation andunderstanding only. FIG. 1 is a flow diagram depicting an exemplary embodiment of a document generation flow. FIG. 2 is a flow diagram depicting an exemplary embodiment of the document generation flow of FIG. 1 for the example of circuit design input. FIG. 3 is a block diagram depicting an exemplary embodiment of a structure for Lisp code, such as may be stored in the code library of the document generation flow of FIG. 1. FIG. 4 is a flow diagram depicting an exemplary embodiment of a reification flow. FIG. 5 is a block diagram of an exemplary embodiment of a computer system in which the document generation process as described herein may be implemented.DETAILED DESCRIPTION OF THE DRAWINGS Reference will now be made in detail to embodiments, examples of which are illustrated in the accompanying drawings. In the following detailed description, numerous specific details are set forth in order to provide a thorough understanding ofthe following described embodiments. It should be apparent, however, to one skilled in the art, that the embodiments described below may be practiced without all the specific details given below. Moreover, the embodiments are not intended to beexhaustive or to limit the invention to the precise forms disclosed, and modifications and variations are possible in light of the following teachings or may be acquired from practice of the invention. The embodiments were chosen and described in orderto best explain principles and practical applications of the invention to enable others skilled in the art to utilize the invention in various embodiments and with various modifications as are suited to the particular use contemplated. In otherinstances, well-known methods, procedures, components, circuits, and networks have not been described in detail so as not to unnecessarily obscure the described embodiments. For purposes of explanation, specific nomenclature is set forth to provide a thorough understanding of the various inventive concepts disclosed herein. However, the terminology used herein is for the purpose of describing particular embodimentsonly and is not intended to be limiting of the invention. As used herein, the singular forms ""a"", ""an,"" and ""the"" are intended to include the plural forms as well, unless the context clearly indicates otherwise. As used herein, the term ""if"" may beconstrued to mean ""when"" or ""upon"" or ""in response to determining"" or ""in response to detecting,"" depending on the context. Similarly, the phrase ""if it is determined"" or ""if [a stated condition or event] is detected"" may be construed to mean ""upondetermining"" or ""in response to determining"" or ""upon detecting [the stated condition or event]"" or ""in response to detecting [the stated condition or event],"" depending on the context. It will also be understood that the term ""and/or"" as used hereinrefers to and encompasses any and all possible combinations of one or more of the associated listed items. It will be further understood that the terms ""includes"" and/or ""including,"" when used in this specification, specify the presence of statedfeatures, integers, steps, operations, elements, and/or components, but do not preclude the presence or addition of one or more other features, integers, steps, operations, elements, components, and/or groups thereof. It will also be understood that,although the terms first, second, etc. may be used herein to describe various elements, these elements should not be limited by these terms, as these terms are only used to distinguish one element from another. Some portions of the detailed descriptions that follow are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means usedby those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here, and generally, conceived to be a self-consistent sequence of steps leading to a desired result. Thesteps are those involving physical manipulations of physical quantities. Usually, though not necessarily, these quantities take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared, and otherwisemanipulated. It has proven convenient at times, principally for reasons of common usage, to refer to these signals as bits, values, elements, symbols, characters, terms, numbers, or the like. It should be borne in mind, however, that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise asapparent from the following discussion, it is appreciated that throughout the description, discussions utilizing terms such as ""processing"" or ""computing"" or ""calculating"" or ""determining"" or ""displaying"" or the like, refer to the action and processes ofa computer system, or similar electronic computing device, that manipulates and transforms data represented as physical (electronic) quantities within the computer system's registers and memories into other data similarly represented as physicalquantities within the computer system memories or registers or other such information storage, transmission or display devices. Inventive concepts described herein may be embodied as apparatus, method, system, or computer program product. Accordingly, one or more of such embodiments may take the form of an entirely hardware embodiment, an entirely software embodiment(including firmware, resident software, and micro-code, among others) or an embodiment combining software and hardware, and for clarity any and all of these embodiments may generally be referred to herein as a ""circuit,"" ""module,"" ""system,"" or othersuitable terms. Furthermore, such embodiments may be of the form of a computer program product on a computer-usable storage medium having computer-usable program code in the medium. Any suitable computer-usable or computer-readable medium may be utilized for input, such as input 102 of FIGS. 1 and 2 described below for example. The computer-usable or computer-readable medium may be, for example but not limited to, anelectronic, magnetic, optical, electromagnetic, infrared, or semiconductor system, apparatus, device, or propagation medium. More specific examples (a non-exhaustive list) of the computer-readable medium would include the following: an electricalconnection having one or more wires, a portable computer diskette, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), an optical fiber, a portable compact disc read-onlymemory (CD-ROM), an optical storage device, a transmission media such as those supporting the Internet or an intranet, or a magnetic storage device. The computer-usable or computer-readable medium could even be paper or another suitable medium uponwhich the program is printed, as the program can be electronically captured, via, for instance, optical scanning of the paper or other medium, then compiled, interpreted, or otherwise processed in a suitable manner, if necessary, and then stored in acomputer memory. In the context of this document, a computer-usable or computer-readable medium may be any medium that can contain, store, communicate, propagate, or transport the program for use by or in connection with the instruction executionsystem, apparatus, or device. The computer usable program code may be transmitted using any appropriate medium, including but not limited to the Internet, wireline, optical fiber cable, radio frequency (RF) or other means. It should be understood thatoutput provided, such as output document 116 of FIGS. 1 and 2 described below for example, may be in any medium, for example but not limited to electronic, magnetic, optical, electromagnetic, infrared, ink, or the like for displaying, projecting,printing, embossing, transmitting, beaming, or the like. Computer program code for carrying out operations in accordance with inventive concepts described herein may be written in an object-oriented dynamic binding programming language such as Lisp, Python, Ruby, Perl, or the like. The program codemay execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario, the remotecomputer may be connected to the user's computer through a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider). Systems and methods described herein may relate to an apparatus for performing the operations associated therewith. This apparatus may be specially constructed for the required purposes, or it may comprise a general-purpose computer selectivelyactivated or reconfigured by a computer program stored in the computer. Notwithstanding, the algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general-purpose systems may be used with programs in accordance with the teachings herein, or it mayprove convenient to construct a more specialized apparatus to perform the operations. In addition, even if the following description is with reference to a programming language, it should be appreciated that any of a variety of programming languages maybe used to implement the teachings as described herein. The embodiments are described below with reference to flowchart illustrations and/or block diagrams of methods, apparatus (including systems) and computer program products. It will be understood that each block of the flowchart illustrationsand/or block diagrams, and combinations of blocks in the flowchart illustrations and/or block diagrams, may be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purposecomputer, special purpose computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means forimplementing the functions/acts specified in the flowchart and/or block diagram block or blocks. These computer program instructions may also be stored in a computer-readable memory that can direct a computer or other programmable data processingapparatus to function in a particular manner, such that the instructions stored in the computer-readable memory produce an article of manufacture including instruction means which implement the function/act specified in the flowchart and/or block diagramblock or blocks. The computer program instructions may also be loaded onto a computer or other programmable data processing apparatus to cause a series of operational steps to be performed on the computer or other programmable apparatus to produce acomputer implemented process such that the instructions which execute on the computer or other programmable apparatus provide steps for implementing the functions/acts specified in the flowchart and/or block diagram block or blocks. The flowcharts and block diagrams in the Figures illustrate the architecture, functionality, and operation of possible implementations of apparatuses (including systems), methods and computer program products according to various embodiments. In this regard, each block in the flowchart or block diagrams may represent a module, segment, or portion of code, which comprises one or more executable instructions for implementing the specified logical function(s). It should also be noted that, insome alternative implementations, the functions noted in the block may occur out of the order noted in the figures. For example, two blocks shown in succession may, in fact, be executed substantially concurrently, or the blocks may sometimes be executedin the reverse order, depending upon the functionality involved. It will also be noted that each block of the block diagrams and/or flowchart illustration, and combinations of blocks in the block diagrams and/or flowchart illustration, can beimplemented by special purpose hardware-based systems which perform the specified functions or acts, or combinations of special purpose hardware and computer instructions. It should be noted that although the flow charts provided herein show a specific order of method steps, it is understood that the order of these steps may differ from what is depicted. Also two or more steps may be performed concurrently orwith partial concurrence. Such variation will depend on the software and hardware systems chosen and on designer choice. It is understood that all such variations are within the scope of the invention. Likewise, software and web implementations of theinvention could be accomplished with programming techniques with rule based logic and other logic to accomplish the various database searching steps, correlation steps, comparison steps and decision steps. It should also be noted that the word""component"" as used herein and in the claims is intended to encompass implementations using one or more lines of software code, and/or hardware implementations, and/or equipment for receiving manual inputs. FIG. 1 is a flow diagram depicting an exemplary embodiment of a document generation flow 100. From start 101 to stop 117, flow 100 is generally an automated process for generating a manual, pamphlet, data sheet, book, user guide, or otherdocumentation responsive to an input and optionally selected communication goals. It should be understood that FIG. 1, as well as FIG. 2 herein, is capable of being described as a system and a method. At 102, an input is received or obtained. Input 102 may be a computer program or other listing that is readable by a programmed computer for execution. In the embodiment described herein, input 102 is textual. However, optionally, aninterpreter (not shown) or other information retrieval device capable of converting or otherwise interpreting text from graphics, audio, video, or pictorial information may be used to provide input 102 as text. Accordingly, it should be understood thata programmed computer capable of reading input 102 as text may be configured or programmed as described herein to infer meaning from input 102 in order to generate for output documentation in a natural language, namely conversion of the meaning asexpressed in a computer readable form into a natural language form of such expression. In the embodiment described herein, such output documentation, such as document 116, includes text and optionally graphics. However, in other embodiments suchdocumentation, such as document 116, may include any of text, pictures, graphics, video, audio, or any combination thereof depending on the resources made available for natural language expression. Document 116 output thus may vary in content dependingon the application for such document, as well as may vary in how such content is expressed. However, for purposes of clarity by way of example and not limitation, it shall be assumed that input 102 is completely textual, and that document 116 includestext and may include graphics. At 103, input 102 is reified to coded objects. Reification, as used herein, philosophically may be thought of as treating an abstraction of a materially or perceptually real thing for a reasonably narrow domain of knowledge, where suchabstraction is in a code form, as if the abstraction itself is the real thing. In an embodiment, such reification may be performed manually, as described below herein with reference to FIG. 4, by a person reifier 103. Generating, with a programmedcomputer, a reified version of input 102 as objects may be performed as an artificial intelligence coding of input 102. Thus, optionally, such reification may be performed by an artificial intelligence reifier 103. An artificial intelligence reifier103 may be implemented in more frequently and widely used deployments, and as such an artificial intelligence reifier 103 may for example be hosted as a web service, such as via an automated web bot form, a knowledge-acquisition form configured to""interview"" a domain knowledge user, or other artificial intelligence form. Because input 102 is readable by a programmed computer for execution, input 102 has a defined structure and syntax that may be readily understood by a programmed computer. Thus, input 102 may be thought of as an applied form of a symbolic representation of knowledge for a defined domain of knowledge. In other words, input 102 may be a virtual representation of an actual thing. In short, reification of input 102 byreifier 103 is coding of an applied form to provide a coded form of input 102, which as indicated above may be a completely textual input 102. Furthermore, the domain of knowledge associated with input 102 should be a well defined and reasonably boundeddomain, as described below in additional detail. A result of reification by reifier 103 is stored at 104. Output of reifier 103 may be provided to code library 104 for storage. In other words, the coded form of input 102 is stored at code library 104. The coded objects of code library 104may be in a dynamic language. More particularly, the dynamic language may be an object-oriented dynamic binding language. Examples of such dynamic language include Lisp, Python, Ruby, and Perl. However, any object-oriented dynamic binding language maybe used. Input 102 may, though need not be, a manual input as illustratively depicted. Optionally, input 102 may be readable in whole or in part by a programmed computer for automatic or semiautomatic input. However, if input 102 is readable by aprogrammed computer, the reification process is more easily automated. Once a code library 104 is more fully developed for a defined domain of knowledge, such code library 104 may be reused for other inputs within such domain. For purposes of clarityby way of example and not limitation, it shall be assumed that input 102 is readable by a programmed computer for execution. Examples of input 102 may be a library of circuits described using a hardware description language, an instruction set for aprocessor, or other well defined and reasonably bounded domain of knowledge. Thus, for example, it should be understood that as people produce circuit designs, computer programs, or other artifacts within a domain of knowledge, input 102 may be the formof an application within a defined domain of knowledge, namely a subset of a defined domain of knowledge. However, initially input 102 may be more akin to a lexicon for a defined domain of knowledge. Thus, for example, an instruction set for a processor may be the initial defined domain of knowledge, in contrast to an application using instructions from such instruction set. Such an instruction set could then be reified to provide a lexiconof coded objects for such instruction set, from which coded objects could subsequently be selected for such an application input, such as a computer program executable by such processor, to be reified. In another example, a library of circuits described using a hardware description language (""HDL""), such as Verilog, VHDL, and the like, may be the defined domain of knowledge, in contrast to an application using circuits from such circuitlibrary. Such a circuit library could then be reified to provide a lexicon of coded objects therefor, from which coded objects could subsequently be selected for such an application input, such as a circuit design capable of being placed and/or routedby a programmed computer, to be reified. In such an embodiment, input may be expressed as one or more netlists in an HDL or other circuit description language. It should be understood that input 102 is not limited to circuit libraries, or processor instruction sets, or applications of those inputs. Other examples of input 102 include but are not limited to other types of computer programs, spreadsheettables, and other symbolic representations of an applied form of knowledge for a defined domain of knowledge that can be codified into objects. For purposes of an initial construction of code library 104 for a defined domain of knowledge, input 102 may represent a lexicon of knowledge of such domain. However, in contrast to reification of natural language with artificial intelligenceproviding a translation of ""common sense"", the domain of knowledge is more narrowly tailored in this application. For example, the structure associated with an instruction set for a microprocessor has a limited number of instructions and combinations ofinstructions as well as contexts for those constructions in which a microprocessor will execute. Likewise, within a library of circuits, there may be a limited number of types of circuits that may be accessible. However, input 102 may be any of avariety of combinations of those circuits. Additionally, it should be appreciated that as the new circuits or new instructions are developed, code library 104 may progressively grow. In other words, as new developments occur within a defined domain ofknowledge, those new developments may be reified into coded objects for addition to code library 104. Accordingly, it should be understood that once a defined domain of knowledge is reified to objects for storage in code library 104, then other artifacts within that defined domain may be more readily generated, leveraging the existence of suchcode library 104. However, it should be understood that an initial reification of a defined domain of knowledge may be useful. For example, a reified version may be used to count the number and type of objects in an input 102. For the example of input102 being a circuit design described using a Hardware Description Language or other textual-based circuit description, a reified version may be used to report about the number, name, and types of ports in such circuit design. It should be understoodthat understanding ""common-sense"" or ""context"" is not necessary for such reification. In other words, for generation rather than parsing, reification as described herein may generally be thought of as a ""context-free"" analog to Avram Noam Chomsky'shierarchy for language. From stored reified coded objects obtained in code library 104 for an input 102, a document plan by a document planner may be invoked at 105. Optionally, at 106, communication goals may be selected for input to document planner 105. Communication goals input 106 may affect the structure of the document plan. A document plan may be thought of as the form of the type of document to be produced as document 116. For example, a manual would have a different format than a data sheet, and a user guide may have detailed outline, whereas a quick-startreference guide may have a general outline. For purposes of clarity by way of example and not limitation, it shall be assumed that document planner 105 is generally configured for an outline for a user guide; however, it should be understood that othertypes of documents may likewise be implemented by document planner 105. A content-reasoning library 107 may be accessed for populating, such as with text and/or graphics, a document plan. Content-reasoning library 107 includes a symbolic representation of knowledge for a defined domain. At 105, coded objects obtained from code library 104 by a computer programmed with a document planner may be used to access a content sequence library 108 of content-reasoning library 107. More particularly, a programmed computer may accesscontent sequence library 108 responsive to coded objects obtained from code library 104 to extract content for a document plan of document planner 105. Such content would be populated within the outline of document planner 105. In other words, codedobjects would be distributed within a document plan by document planner 105, and content associated with those coded objects obtained from content sequence library 108 would accordingly be likewise distributed throughout such document plan by documentplanner 105. One form of accessing content sequence library 108, as well as reasoning library 109 also of content-reasoning library 107, may be via data mining. Data mining may be used to determine relationships of coded objects obtained from code library104 to one another to provide or infer meaning. Examples of communication goals 106 with respect to for example an instruction set may be to list all the instructions of the instruction set and to indicate how many instructions there are. Another communication goal may be to provide adefinition in natural language for each of those instructions and to indicate how those instructions are processed. These would be examples of communication goals that may be provided at 106 for an instruction set; however, it should be understood thatthe communication goals selected may vary depending on the application, including without limitation the document plan. For example, content selected may be the actual definitions of instructions and the break out of instructions by type, as well asinstruction dependencies or other associations, which might be included in a glossary in a document, and thus subject to the document plan. Thus, document planner 105 may be thought of as building a data structure. A document plan may be a tree or a list, a combination thereof, or other data structure. Accordingly, content sequence library 108 may store in symbolic form structuresof nodes with reference listings, definitions, or dictionaries for a set of objects for a defined domain of knowledge. The structures of nodes in content sequence library 108 may be ported in whole or in part to form a data structure for documentplanner 105. Thus a populated document plan of document planner 105 may generally be thought of as a sequence of symbols, where the symbols are effectively representations of communication goals, with support for effectively concatenating or generallylinking the sequence with content obtained from content sequence library 108. At 111, a document plan or data structure from document planner 105 is merged into a microplanner, where microplanner 111 has access to reasoning library 109 of content-reasoning library 107. Accordingly, it should be understood that a unifiedcontent-reasoning library 107 may be implemented; however, breaking-out sequencing from reasoning may provide more clarity with respect to understanding document generation flow 100. After sequencing coded objects with respect to document planner 105and obtaining content therefor, meaning of those objects may be provided by microplanner 111 using reasoning library 109. At 111, reasoning library 109 is accessed by a programmed computer with a microplanner responsive to content extracted from content sequence library 108 and populated in a data structure of document planner 105 to provide sequenced organizationof phrase structure for such content extracted within such data structure. It should be understood that the phrase structure is not limited to merely accessing literal text and/or graphics; rather, the generation may further involve function calls,operations on variables, and other means for convening meaning. Thus, whereas the content sequence library 108 may be data mined responsive to coded objects in document planner 105 to directly pull content, microplanner 111 access of reasoning library109 is data mining with iteration. In other words, microplanner illiterates over objects within data structures produced by document planner 105, evaluating each item according to rules defined in reasoning library 109. Those skilled in the art willrecognize this processing as an example of the Interpreter Design Pattern. The actions performed by reasoning library 109 are that of rule-based interpretation of objects in data structures produced by document planner 105, for the purpose of producinga sequence organization that offers natural language phrase structure in a narrow knowledge domain of interest. Thus, iterating over content extracted from content sequence library 108, meaning of coded objects obtained from code library 104 in a datastructure of document planner 105 may be interpreted by microplanner 111 to provide an interpreted meaning therefor. From the interpreted meaning, actions may be produced by microplanner 111 responsive to the interpreted meaning of such coded objects, and inferences responsive to such actions for expressing relationships as between the coded objects may beproduced by microplanner 111. The relationships may be determined for providing a natural language representation of the meaning. Such natural language representation at this stage may be a set of rules for interpreting symbolic objects, including anydata contained or associated with such symbolic objects. Again, the natural language representation may be expressed using text and/or graphics in this example. Graphics may be generated as text, responsive to interpretation as described above. Inthis embodiment, ""natural language representation"" for graphics may be interpretation of data objects output from document planner 105 by microplanner 111, by making calls to a graphics drawing routine. This places commands to render text thatrepresents graphic objects interstitially with document text, by the realizer 112. So the form of representation of graphics is program code in microplanner 111, and as text in output from realizer 112. It should be appreciated that if code library 104 is written in Lisp, where lines of code are data, it may be syntactically easier if content-reasoning library 107, namely content sequence library 108 and reasoning library 109, is likewisewritten in Lisp. This provides a clearer linkage between coded objects and their meaning which may be dependent upon syntactic relationships. In other words, inferring meaning of reified objects is more directly linked if for example Lisp is used inboth libraries 104 and 107. In an embodiment, Common Lisp, American National Standard X3.226, may be used. Even though the example of Lisp was used, it should be understood that other object-oriented dynamic binding computer program languages may beused. Furthermore, even though it may be useful to have libraries 104 and 107 written in the same object-oriented dynamic binding computer program language, such libraries may be written in different object-oriented dynamic binding computer programlanguages. In short, flow 100 may effectively implement a program-writing program or system. Thus, microplanner 111 iterates over organized content in a data structure obtained from document planner 105 for inferring meaning. Microplanner 111 creates phrase structure within the sections of document planner 105 in a natural languageformat. In short, a programmed computer accesses reasoning library 109 responsive to content extracted from content sequence library 108 to provide a sequence organization of phrase structure for such content extracted. It should be understood thatwhat is organized in a tree or list or combination thereof in document planner 105 is the reified object information. By iteratively data mining responsive to reified object information, a natural language description of meaning in input 102 may beproduced. At 112, realization from microplanner 111 output is performed. Realization may be performed by a programmed computer with realizer 112. Realizer 112 may access an interface library 110 for such realization. An example of an interface library110 that may be used is LaTex and image processing may be preformed by a LaTeX program as image processor 115. However, other document realization software and libraries may be used, such as from Adobe, and Microsoft, among other desktop publishingsoftware vendors. Realizing meaning by realizer 112 is effectively converting output from microplanner 111 into a document object model. An interface library 110 is accessed to convert the document object model into a document. Output 113 from realization at112 is effectively ""surface"" realization of a document. Thus, realization at 112 is effectively taking the iterated result from microplanner 111 and rendering it as text and/or graphics in the form of a natural language representation of input 102,namely a natural language representation from a realization of the sequence organization of phrase structure obtained from microplanner 111. Output 113 from realizer 112 may be stored in storage 114 for image processing by a predefined image processor 115. Image processor 115 may render an image of text and/or graphics for producing a document 116. Such document 116 may be in anyof a variety of formats, including without limitation LaTex, Postscript, or Adobe pdf, among others. After which, at 117, flow 100 may be stopped. To recapitulate, real world human knowledge for a defined domain of knowledge is input. The information input is reified into coded objects. The reification is the process of converting the input into symbols in a programming language, wherethe programming language is an object-oriented dynamic binding language. To support a natural language text graphics generation, a three layer model is used, namely a document planner, a predefined microplanner, and a predefined surface realizer. Inconnection with such three-layer model, there are containers or libraries for respectively storing content and reasoning for inferring what symbols mean, as well as or storing interfaces. A reasoning library is program code that reads the symbols andmakes inferences regarding the symbols. There is an interface library for realizing a natural language output. A reasoning library may include data mining capability; however, any algorithm capable of looking at the meaning of a relationship betweenobjects may be implemented. In other words, it should be understood that data mining may be more powerful than needed for some applications, and thus a simpler algorithm for inferring meaning based on the relationship between objects may be used. FIG. 2 is a flow diagram depicting an exemplary embodiment of document generation flow 200. Document generation flow 200 is for the example of circuit design input 102. As many of the components of document generation 200 and documentgeneration flow 100 of FIG. 1 are the same, description of same elements is not repeated. Again in this example, input 102 is a circuit design. At 201, the circuit design is converted to a netlist, such as in VHDL, Verilog, or other HDL. Netlist 201 is input to an HDL to code parser at 202. For purposes of clarity by way ofexample and not limitation, it shall assumed that predefined parser 202 for a Verilog to Lisp conversion; however, it should be appreciated that other hardware description languages as well as other object-oriented dynamic binding computer languages maybe used. The parsed Lisp code obtained at 202 is reified to Lisp objects by reifier 103. Such Lisp objects reified at 103 are stored as Lisp code in code library 104. The remainder of flow 200 follows from the previous description of documentgeneration flow 100 of FIG. 1, and thus is not repeated. FIG. 3 is a block diagram depicting an exemplary embodiment of a structure 300 for Lisp code, such as may be stored in code library 104. At a highest level 301, a description of every element, such as for example every instruction, of a set ina symbolic form as a list, including pointers to associated lists may be used. Thus, in the example of Verilog, each Verilog element may be described as a Lisp element and each of those Lisp elements may be symbolically expressed as objects. Theobjects may have relationships to other objects, and such other objects may appear in other lists. Accordingly, pointers to associated lists may be used. Thus associated lists 302-1 through 302-N, for N a positive integer greater than 1, generallydepict N sublist to list 301. Even though this is shown as a hierarchal structure of lists, where two or more levels may be implemented, it should be understood that a single list, and thus a single level, for some applications may be used. Theassociated lists may be lists of lists with relationships and contexts of objects to one another. It should be understood that structure 300 may be thought of generally as a linked-pointer representation of data represented by symbols in Lisp. FIG. 4 is a flow diagram depicting an exemplary embodiment of a reification flow 400. From start 401 to stop 415, reification flow is described as a manual process; however, it should be understood that such process may be automated in whole orin part with computer program coding or scripting. Furthermore, even though the description of FIG. 4 is generally in terms of Lisp coding, it should be understood that other object-oriented dynamic binding computer program languages may be used. At 402, a defined domain of knowledge is identified and obtained for reification. At 403, symbols for the structure of the domain of knowledge are created. At 404, the symbols are written as lists for a structure of lists, namely structuredlists. At 405, symbols for classification of knowledge content regarding the structure are created. At 406, a classification list associated with each structured list is encoded. At 407, key classification symbols to be matched with literal text arechosen. At 408, a symbol of the symbols chosen at 407 is selected, and it is determined whether such selected symbol is to have literal text associated with it. This is done at 408 for each of the symbols chosen at 407; however, for purposes of clarityand not limitation, only single symbols are described as processed in operations 408 through 412 of flow 400. If a symbol selected at 408 is not to have literal text associated with it, then at 409 such symbol is added to a collection of lists without literal text associations. In other words, at 409 lists or list line items without literal textassociations are collected. If, however, at 408 a selected symbol is to have literal text associated with it, then at 410 such literal text is written for such selected symbol, namely a classification symbol, as a list. At 411, such lists with literal text associationsare collected. At 412, lists from collections at 409 and 411 are joined. Such joining may entail concatenating Lisp code from 409 and 411 as text. At 413, all lists from collections at 409 and 411, and joined lists from 412 are provided as a collected outputlist. Such collected output list may be stored at 414. Storage 414 may be code library 104 of FIGS. 1 and 2. FIG. 5 is a block diagram of an exemplary embodiment of a computer system 500. Computer system 500 may include a programmed computer 510 coupled to one or more display devices 501, such as Cathode Ray Tube (""CRT"") displays, plasma displays,Liquid Crystal Displays (""LCD""), and to one or more input devices 506, such as a keyboard and a cursor pointing device. Other known configurations of a computer system may be used. Programmed computer 510 may be programmed with a known operating system, which may be Mac OS, Java Virtual Machine, Linux, Solaris, Unix, or a Windows operating system, among other known platforms. Programmed computer 510 includes a centralprocessing unit (CPU) 504, memory 505, and an input/output (""I/O"") interface 502. CPU 504 may be a type of microprocessor known in the art, such as available from ARM, IBM, Intel, and Advanced Micro Devices for example. Support circuits (not shown) mayinclude conventional cache, power supplies, clock circuits, data registers, and the like. Memory 505 may be directly coupled to CPU 504 or coupled through I/O interface 502. At least a portion of an operating system may be disposed in memory 505. Memory 505 may include one or more of the following: random access memory, read only memory, magneto-resistive read/write memory, optical read/write memory, cache memory, magnetic read/write memory, and the like, as well as signal-bearing media asdescribed below. I/O interface 502 may include chip set chips, graphics processors, and daughter cards, among other known circuits. An example of a daughter card may include a network interface card (""NIC""), a display interface card, a modem card, and aUniversal Serial Bus (""USB"") interface card, among other known circuits. Thus, I/O interface 502 may be coupled to a conventional keyboard, network, mouse, display printer, and interface circuitry adapted to receive and transmit data, such as data filesand the like. Programmed computer 510 may be coupled to a number of client computers, server computers, or any combination thereof via a conventional network infrastructure, such as a company's Intranet and/or the Internet, for example, allowingdistributed use for interface generation. Memory 505 may store all or portions of one or more programs or data to implement processes in accordance with one or more aspects of the invention to provide flows 100, 200, or 300, namely ""program product(s)"" 520. Additionally, those skilledin the art will appreciate that one or more aspects of the invention may be implemented in hardware, software, or a combination of hardware and software. Such implementations may include a number of processors independently executing various programsand dedicated hardware or programmable hardware. One or more program(s) of the program product(s) 520, as well as documents thereof, may define functions of embodiments in accordance with one or more aspects of the invention and can be contained on a variety of non-transitory signal-bearingmedia, such as computer-readable media having code, which include, but are not limited to: (i) information permanently stored on non-writable storage media (e.g., read-only memory devices within a computer such as CD-ROM or DVD-ROM disks readable by aCD-ROM drive or a DVD drive); or (ii) alterable information stored on writable storage media (e.g., floppy disks within a diskette drive or hard-disk drive or read/writable CD or read/writable DVD). The above embodiments specifically include informationdownloaded from the Internet and other networks. Such non-transitory signal-bearing media, when carrying computer-readable instructions that direct functions of one or more aspects of the invention, represent embodiments of the invention. It should be understand that using symbolic processing to infer meaning for a suitably narrow knowledge domain has been described. As described herein, documents may be generated in natural language, optionally with illustrations, responsive tospecific input. By avoiding context, real-world modeling and human perception forms of artificial intelligence, a symbol-only processing system may be implemented to provide document output that is coherent and seemingly intelligently produced. Furthermore, such coherence and production quality is enhanced by having narrow domains of knowledge, such as for example instruction sets, circuit design, computer programs, or other narrow well-defined knowledge domains. While the foregoing describes exemplary embodiment(s) in accordance with one or more aspects of the invention, other and further embodiment(s) in accordance with the one or more aspects of the invention may be devised without departing from thescope thereof, which is determined by the claim(s) that follow and equivalents thereof. Claim(s) listing steps do not imply any order of the steps. Trademarks are the property of their respective owners."
42|http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=62&p=2&f=G&l=50&d=PTXT&S1=(python.CLTX.+or+python.DCTX.)&OS=ACLM/python&RS=ACLM/python|Intelligent offline caching of non-navigated content based on usage metrics|A request for a navigated content associated with a browsing session can be received. The navigated content can be an electronic artifact which can be presented within an interface during the browsing session. The navigated content can be associated with a data source. The interface can be associated with a computing device. A usage metric associated with the navigated content can be collected. The usage metric can be a frequency and/or a duration measurement. The usage metric can be determined to be equivalent to a threshold value of a usage ruleset and can automatically persist within an offline cache the navigated content. A non-navigated content within the offline cache can be programmatically stored. The non-navigated content can be an electronic artifact linked to the navigated content wherein the non-navigated content is not presented within the interface during the browsing session.|"1. A system for usage-based offline caching comprising: a caching engine able to: determine usage metrics for navigated content within an online browsing session; cache thenavigated content and non-navigated content in an offline cache of a first client device during the online browsing session based on the usage metrics for the navigated content, wherein non-navigated content is content which is not presented during theonline browsing session but linked to the navigated content, wherein browsing content on the first client device triggers non-navigated content to be cached by the caching engine within an offline cache for a second client device; and store thenavigated content and the non-navigated content in a data store, wherein the data store is capable of persisting at least one of a usage ruleset, a navigated content, and a non-navigated content, wherein the navigated content and non-navigated content isan electronic artifact, wherein the usage ruleset is at least one of a threshold value and a caching action; a usage monitor able to track a metric associated with the navigated content within the online browsing session; a synchronization componentconfigured to dynamically update at least one delta associated with the navigated content and the non-navigated content between the data store and the offline cache; and a metric analyzer able to determine whether a metric associated with at least oneof the navigated content and the non-navigated content is equivalent to the at least one of the threshold values associated with the usage ruleset, wherein the caching engine, the usage monitor, the synchronization component, and the metric analyzercomprise program instructions stored in a non-transitory storage medium. 2. The system of claim 1, wherein the electronic artifact is at least one of a document, a Web page, an image, and a video stream. 3. The system of claim 1, wherein the caching action is a heuristic offline caching. 4. The system of claim 1, wherein the caching action is at least one of a recursive retrieval of a navigated content and a non-navigated content from the data store. 5. The system of claim 1, wherein the system is associated with at least one of a C++, C, Practical Extraction and Reporting Language (PERL), Python, and PHP Hypertext Preprocessor (PHP). 6. An apparatus including an interface for usage-based offline caching comprising: a tangible memory storing at least one computer program product; a processor operable to execute the computer program product to cause the interface window tobe displayed by the display hardware; and the computer program product when executed by the processor being operable to: determine usage metrics for navigated content within an online browsing session; cache the navigated content and non-navigatedcontent in an offline cache of a first client device during the online browsing session based on the usage metrics for the navigated content, wherein non-navigated content is content which is not presented during the online browsing session but linked tothe navigated content, wherein browsing content on the first client device triggers non-navigated content to be cached by the caching engine within an offline cache for a second client device; store the navigated content and the non-navigated content ina data store, wherein the data store is capable of persisting at least one of a usage ruleset, a navigated content, and a non-navigated content, wherein the navigated content and non-navigated content is an electronic artifact, wherein the usage rulesetis at least one of a threshold value and a caching action; track a metric associated with the navigated content within the online browsing session; dynamically update at least one delta associated with the navigated content and the non-navigatedcontent between the data store and the offline cache; and determine whether a metric associated with at least one of the navigated content and the non-navigated content is equivalent to the at least one of the threshold values associated with the usageruleset. 7. The apparatus of claim 6, wherein the usage metric comprises a hit, a page view, a visit, and a bounce rate. Description BACKGROUND The present invention relates to the field of browsing and, more particularly, to intelligent offline caching of non-navigated content based on usage metrics. Mobile workers such as consultants and/or sales teams can be frequently required to work in environments where network connectivity is limited. For example, consultants often work on engagements which involve access to sensitive data andtherefore security prohibits Internet access. In these instances, the worker can be subject to severe information access restrictions. That is, access to resources such as product sites, information articles, and online reference material can beunavailable. Consequently, the worker ability can be hindered which can result in worker frustration and decreased productivity. Current solutions to address these limitations require the worker to manually select certain resources (e.g., Web sites, Web pages) that are relevant to the worker. The worker must then enable offline access to the resources. That is, theworker must recognize useful resources prior to limited connectivity scenarios. In many instances, important resources (e.g., Web sites) can be overlooked and not stored for offline access. For example, a worker can often forget to enable offlineaccess for critical Web pages visited several days ago. Further, the current solution requires specific knowledge of relevant resources which can be unknown to the worker.BRIEF SUMMARY One aspect of the present invention can include a system, an apparatus, a computer program product, and a method for intelligent offline caching of non-navigated content based on usage metrics. A request for a navigated content associated witha browsing session can be received. The navigated content can be an electronic artifact which can be presented within an interface during the browsing session. The navigated content can be associated with a data source. The interface can be associatedwith a computing device. A usage metric associated with the navigated content can be collected. The usage metric can be a frequency and/or a duration measurement. The usage metric can be determined to be equivalent to a threshold value of a usageruleset and can automatically persist within an offline cache the navigated content. A non-navigated content within the offline cache can be programmatically stored. The non-navigated content can be an electronic artifact linked to the navigatedcontent wherein the non-navigated content is not presented within the interface during the browsing session Another aspect of the present invention can include an apparatus, a computer program product, a method and a system for intelligent offline caching of non-navigated content based on usage metrics. A caching engine can be able to determinerelevant navigated and non-navigated content within a browsing session. The browsing session can be an online browsing session and an offline browsing session. A data store can be capable of persisting a usage ruleset, a navigated content, and anon-navigated content. The navigated content and non-navigated content can be an electronic artifact. The usage ruleset can be a threshold value and a caching action. BRIEF DESCRIPTION OF THE SEVERAL VIEWS OF THE DRAWINGS FIG. 1 is a schematic diagram illustrating a method for intelligent offline caching of non-navigated content based on usage metrics in accordance with an embodiment of the inventive arrangements disclosed herein. FIG. 2 is a schematic diagram illustrating a system for intelligent offline caching of non-navigated content based on usage metrics in accordance with an embodiment of the inventive arrangements disclosed herein. FIG. 3 is a schematic diagram illustrating an interface for intelligent offline caching of non-navigated content based on usage metrics in accordance with an embodiment of the inventive arrangements disclosed herein.DETAILED DESCRIPTION The present disclosure is a solution for intelligent offline caching of non-navigated content based on usage metrics. In the solution, usage patterns within a browsing session can be monitored to determine resources (e.g., content) which can berelevant to a user. For example, Web browsing behavior can be analyzed to determine Web pages of importance to a user based on frequency of visits. When usage patterns match a usage rule of a usage ruleset, offline caching of the resource can beperformed. It should be appreciated that the solution can enable offline caching of navigated content and non-navigated content. Navigated content can be content which can be manually requested and presented during a browsing session. Non-navigatedcontent can be content which is not presented during the browsing session but linked to the navigated content. As will be appreciated by one skilled in the art, aspects of the present invention may be embodied as a system, method or computer program product. Accordingly, aspects of the present invention may take the form of an entirely hardwareembodiment, an entirely software embodiment (including firmware, resident software, micro-code, etc.) or an embodiment combining software and hardware aspects that may all generally be referred to herein as a ""circuit,"" ""module"" or ""system."" Furthermore,aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium(s) having computer readable program code embodied thereon. Any combination of one or more computer readable medium(s) may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be, for example,but not limited to, an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system, apparatus, or device, or any suitable combination of the foregoing. More specific examples (a non-exhaustive list) of the computer readable storagemedium would include the following: an electrical connection having one or more wires, a portable computer diskette, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory),an optical fiber, a portable compact disc read-only memory (CD-ROM), an optical storage device, a magnetic storage device, or any suitable combination of the foregoing. In the context of this document, a computer readable storage medium may be anytangible medium that can contain, or store a program for use by or in connection with an instruction execution system, apparatus, or device. A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein, for example, in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms,including, but not limited to, electro-magnetic, optical, or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate, propagate, ortransport a program for use by or in connection with an instruction execution system, apparatus, or device. Program code embodied on a computer readable medium may be transmitted using any appropriate medium, including but not limited to wireless, wireline, optical fiber cable, RF, etc., or any suitable combination of the foregoing. Computer programcode for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages, including an object oriented programming language such as Java, Smalltalk, C++ or the like and conventionalprocedural programming languages, such as the ""C"" programming language or similar programming languages. The program code may execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user'scomputer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through any type of network, including a local area network (LAN) or a wide areanetwork (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider). Aspects of the present invention are described below with reference to flowchart illustrations and/or block diagrams of methods, apparatus (systems) and computer program products according to embodiments of the invention. It will be understoodthat each block of the flowchart illustrations and/or block diagrams, and combinations of blocks in the flowchart illustrations and/or block diagrams, can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer, special purpose computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via theprocessor of the computer or other programmable data processing apparatus, create means for implementing the functions/acts specified in the flowchart and/or block diagram block or blocks. These computer program instructions may also be stored in a computer readable medium that can direct a computer, other programmable data processing apparatus, or other devices to function in a particular manner, such that the instructions storedin the computer readable medium produce an article of manufacture including instructions which implement the function/act specified in the flowchart and/or block diagram block or blocks. The computer program instructions may also be loaded onto a computer, other programmable data processing apparatus, or other devices to cause a series of operational steps to be performed on the computer, other programmable apparatus or otherdevices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions/acts specified in the flowchart and/or block diagram block orblocks. FIG. 1 is a schematic diagram illustrating a method 100 for intelligent offline caching of online content based on usage metrics in accordance with an embodiment of the inventive arrangements disclosed herein. Method 100 can be present in thecontext of system 200 and/or interface 305. In method 100, usage behavior from a browser session can be utilized to persist relevant content in an offline cache. For example, a user can navigate to a Web page several times during a browsing session. The browser session can be associated with an interface (e.g., Web browser) of a computing device (e.g., laptop). Usage metrics can be collected during the browser session and evaluated against a usage ruleset to determine navigated and non-navigatedcontent of interest. For instance, the number of visits to a Web page can be compared against a threshold value to ascertain the content relevance. Based on the ruleset evaluation, a caching action can be performed. The caching action can persist navigated content and non-navigated content. The cached content can be retrieved and/or presented within an interface during an offline session. An offline session can be a browser session of a computing devicehaving limited and/or no connectivity to a data source associated with the navigated and/or non-navigated content. For example, when a computing device lacks network access to the Internet, an offline session can be established to browse intelligentlycached content within an offline cache. As used herein, navigated content can be content presented within an interface during the browser session. Non-navigated content can be content associated with the navigated content but not presented within the interface during the browsingsession. Navigated and/or non-navigated content can include dynamic and/or static content. For example, non-navigated content can be an ADOBE FLASH application embedded within a Web page. Method 100 can be performed in real-time and/or near real-time. In step 105, a browser session can be initiated. The browser session can include, but is not limited to, Web browsing session, a co-browsing session, a Web conference session, and a desktop sharing session. The browser session can beautomatically and/or manually initiated. For example, the browser session can be established when a Web browser application is executed. In step 110, a navigated content is identified. Navigated content can be identified through traditional and/orproprietary mechanisms including, but not limited to, an automatic navigation action, a manual navigation action, and the like. In one instance, the navigated content can be determined from a manually initiated navigation action. For example, a usercan navigate to a content utilizing a Uniform Resource Locator (URL) inputted within a Web browser address bar. In step 115, usage metric for navigated content can be collected. Usage metrics can include a frequency measurement, duration metrics, and the like. For instance, the duration a user browses a Web page can be collected to determine thelikelihood a user is interested in the navigated content. In step 120, a usage metric evaluation can be performed against a usage ruleset to determine content relevance. Evaluation can conform to traditional and/or proprietary metric analysis and/orevaluation protocols. In one embodiment, usage metrics can be evaluated against one or more values within a usage ruleset. For example, a usage rule can be created to automatically cache non-navigated content associated with a Web page that a user hasvisited more than five times. In step 125, if the usage metric is equivalent to threshold value, the method can continue to step 130, else return to step 110. The threshold value can be a single value, multiple values, and the like. It should be understood that thethreshold value can be arbitrarily complex permitting sophisticated content relevance determination to be achieved. In step 130, the navigated content can be offline cached. The navigated content can be offline cached in one or more traditional and/orproprietary models. For example, the navigated content can be stored within a browser cache. In step 135, if a non-navigated content associated with the navigated content exists, the method can continue to step 137, else return to step 110. In step 137, an evaluation for offline caching of non-navigated content is performed against theusage ruleset. The evaluation can be similar and/or dissimilar to the navigated content evaluation in step 125. In one instance, keyword data can be analyzed to determine the expected relevance of non-navigated content. In the instance, when a keywordfrequency is equivalent to a frequency value, the non-navigated content can be automatically cached. In one embodiment, non-navigated content can be automatically cached without being evaluated via a ruleset. In step 140, the non-navigated content can be cached in an offline storage. The non-navigated content can be linked to the navigated content enabling seamless browsing through navigated and non-navigated content during an offline session. Theoffline storage can be a storage component associated a computing device. That is, when computing device is not communicatively linked to a source associated with navigated content, navigated and non-navigated content can be transparently retrieved fromthe offline cache and presented within an interface. In step 145, if more navigated content is available, the method can return to step 110, else continue to step 150. In step 150, the browser session can be terminated and the method can end. Drawings presented herein are for illustrative purposes only and should not be construed to limit the invention in any regard. It should be appreciated the method 100 can be performed continuously during a browser session. That is, content canbe transparently persisted during user browsing actions (e.g., selecting a hyperlink). The method can be performed in parallel, in serial, and the like. It should be understood that method 100 can be interactive or non-interactive based on one or moreconfiguration options. In one instance, one or more portions of a content can be automatically persisted offline. For example, when a user interacts with a portion of navigated content, the navigated content and associated non-navigated content can be automaticallypersisted offline utilizing method 100. In another instance, method 100 can be triggered via one or more user interface actions. In the instance, a copy/paste action can trigger steps 130-145 to be transparently performed. In yet another instance,method 100 can be performed upon a browser bookmark. For example, Web browser bookmarks can be automatically parsed and relevant non-navigated content can be offline cached. FIG. 2 is a schematic diagram illustrating a system 200 for intelligent offline caching of non-navigated content based on usage metrics in accordance with an embodiment of the inventive arrangements disclosed herein. System 200 can be presentin the context of method 100 and/or interface 305. In system 200, a caching engine 240 can permit the automated offline caching of content 232 based on usage patterns. That is, navigated content 260 and non-navigated content 262 can be stored withinoffline cache based on navigated content 260 metrics. In one embodiment, engine 240 can be a component of Web server 230. In the embodiment, engine 240 can be a functionality of a Hypertext Transport Protocol (HTTP) engine. In another embodiment,engine 240 can be an element of an interface 212 associated with device 210. In the embodiment, engine 240 can be a functionality of a Web browser executing within device 210. It should be appreciated that engine 240 can be a networked element of a computing environment. That is, in system 200, engine 240 can be communicatively linked with server 230 and can be independent of server 230. Engine 240 can be acomponent of a distributed computing system, networked computing system, and the like. In one embodiment, engine 240 can reside within device 210. In the embodiment, engine 240 can be a locally executing offline caching service (e.g., caching proxy)able to intelligently cache navigated 260 and non-navigated content 262. System 200 can represent one embodiment enabling the heuristic offline caching of user relevant content utilizing usage metrics. System 200 can include, but is not limited to, computing device 210, Web server 230, network 280, and the like. System 200 can be communicatively linked via network 280. System 200 configuration can vary based on implementation details, component abilities, component limitations, and the like. In one instance, system 200 can be a ""drop-in"" solution able toextend an existing infrastructure. For example, system 200 functionality can be a feature of a Web browser plug-in. In another instance, system 200 can be a functionality of an application programming interface (API). It should be appreciated that system 200 can illustrate an online state and an offline state. An online state can include computing device 210 communicatively linked to server 230 and/or content 232. During the online state, navigated content260 can be communicated and presented within interface 212. An online state can be associated with a traditional online browsing session. Usage metrics 262 collected from content 260 during the online state can be communicated to engine 240. Anoffline state can include computing device 210 lacking a communicative link to server 230 and/or content 232. For example, an offline state can include a scenario where a low bandwidth connection is inadequate to retrieve content 232 within a suitabletime frame. An offline state can be associated with a traditional offline browsing session. In an offline state, usage metrics 264 can be continually collected and can be communicated during an online state, enabling cache 214 contents to evolve basedon user behavior. In one instance, the system 200 can perform during a partial and/or complete communication failure. For example, when a network connection fails, offline cache 214 can be automatically utilized to retrieve and present navigated content 260 andnon-navigated content 262. Web server 230 can be a hardware/software component for conveying a content 232 to a computing device 210. Server 230 can include, but is not limited to, content 232, usage metric 264, usage ruleset 236, caching engine 240, data store 250, andthe like. Web server 230 can include traditional and/or proprietary Web server technologies and/or functionality. For example, server 230 can be an APACHE HTTP Web server. In one instance, server 230 can be an IBM WEBSPHERE server. Content 232 can be an electronic artifact associated with a content provider (e.g., server 230). Content 232 can include, but is not limited to, a document, a Web page, an application, an image, a video stream, and the like. Content 232 canconform to traditional and/or proprietary formats including, but not limited to, Hypertext Markup Language (HTML), Extensible Markup Language (XML), and the like. Content 232 can include navigated content 260 and non-navigated content 262. Navigatedcontent 260 can include content presented within interface 212 resulting from a navigation action. Non-navigated content 262 can be associated with navigated content 260 and can be presented within interface 212 during an offline state. For instance,non-navigated content 262 can be stored within offline cache 214 during an online state and presented during an offline state within an offline browser session. Usage metric 264 can be one or more measurements indicating a usage pattern associated with a content 232. Usage metric 264 can include, but is not limited to, browsing duration, browsing frequency, click path, and the like. For instance,metric 264 can include metrics such as hits, page views, visits, bounce rates, and the like. In one embodiment, usage metric 264 can include traditional Web analytic information, including, but not limited to, click analytics, lifecycle analytics andthe like. Metric 264 can conform to traditional and/or proprietary formats. In one embodiment, metric 264 can be encrypted during communication from device 210 to engine 240 and decrypted upon analysis. It should be appreciated that metric 264 can becommunicated during an online browsing session and/or an offline browsing session. Usage ruleset 236 can be one or more rules for performing intelligent offline caching based on usage metric 264. Ruleset 236 can include, but is not limited to, an identifier, a name, a threshold value, a caching action, an owner, an expirationvalue, and the like. In one embodiment, ruleset 236 can include a threshold value which can be compared to one or more usage metrics 264. Ruleset 236 can be automatically and/or manually established. In one instance, ruleset 236 can be heuristicallygenerated based on historic rulesets, rulesets associated with different owners, and the like. Ruleset 236 can be stored within engine 240, data store 250, cache 214, and the like. Caching engine 240 can be a hardware/software component for performing usage metric driven offline content caching. Engine 240 can include, but is not limited to, usage monitor 242, synchronization component 244, metric analyzer 246, and thelike. Engine 240 functionality can include, but is not limited to, browsing usage analysis, metric collection, content synchronization, and the like. In one instance, engine 240 can be a component of content management system. It should be appreciatedthat engine 240 can operate during an online and offline browsing session. It should be appreciated that, engine 240 components can be distributed throughout one or more components of system 200. Usage monitor 242 can be a hardware/software entity for collecting usage behavior during a browsing session. Usage metrics 234 can be obtained utilizing traditional and/or proprietary mechanisms. In one instance, monitor 242 can track userinput device data to determine relevant content. In the instance, monitor 242 can detect special browser events initiated by a user action. For example, monitor 242 can detect a rollover event to determine interaction with a content. In anotherinstance, user input can be utilized to identify non-navigated content 262 of interest. For example, keyboard input can be utilized to identify keywords which can be employed to persist non-navigated content 262. In one instance, usage metrics 234 canbe collected during an offline browsing session. In the instance, metrics 234 can be analyzed to determine relevant content which can be automatically synchronized to the offline cache 214. Metric analyzer 246 can be a hardware/software element able to evaluate usage metric 264 to determine relevant content 232. Analyzer 246 can utilize traditional and/or proprietary analysis protocols. In one instance, analyzer 246 can processmetric 264 and evaluate results against metric ruleset 236. In the instance, analyzer 246 can assess metric results against one or more threshold values within ruleset 236. For example, analyzer can evaluate a frequency metric against a rule withinruleset 236. Based on analyzer 234 evaluation, a caching action can be executed. For example, when a metric is greater than a threshold value within ruleset 236, non-navigated content 262 can be offline cached. Synchronization component 244 is a hardware/software element for persisting navigated content 260 and/or non-navigated content 262 within offline cache 214. Component 244 can utilize traditional and/or proprietary mechanisms to synchronizecontent within offline cache 214. For example, Asynchronous JavaScript and Extensible Markup Language (AJAX) methods can be employed to update cache 214 in real-time. In one instance, component 244 can update cache 214 via delta encoding. In theinstance, a delta can be identified and communicated to synchronize content 260, 262. In one embodiment, offline index 252 can be maintained by component 244 to enable real-time content synchronicity. In the embodiment, synchronization state of content232 can be tracked in real-time utilizing an offline entry 254. In one embodiment, component can permit synchronization across multiple computing devices. For example, browsing content on a mobile phone can trigger non-navigated content 262 to becached within an offline cache 214 of a laptop. In one embodiment, component 244 can be an external tool communicatively linked to engine 240. For example, component 244 can be a WGET utility able to recursively download Web-based content. Configuration setting 248 can be one or more options for establishing the behavior of system 200 and/or engine 240. Setting 248 can include, but is not limited to, content 232 settings, usage monitor 242 options, synchronization component 244parameters, metric analyzer 246 settings, offline index 252 options, and the like. Setting 248 can be utilized to configure update frequency, metric analysis algorithms, encryption, privacy settings, and the like. In one instance, setting 248 can beconfigured through interface 212. Offline index 252 can be a dataset for managing content 232 synchronization with offline cache 214. Index 252 can include, but is not limited to, a content identifier, a synchronization state, a timestamp, an expiration value, a computingdevice identifier, and the like. Offline index 252 can be stored within data store 250, offline cache 214, and the like. In one instance, index 252 can be a portion of a database table residing within a database. In another instance, index 252 can bea data file stored within offline cache 214. It should be appreciated that offline index 252 can be an optional entity. Computing device 210 can be a hardware/software entity for executing a browsing session within an interface 212. Device 210 can include, but is not limited to a desktop computer, a laptop computer, a tablet computing device, a portable mediaplayer, a portable digital assistant (PDA), a mobile phone, and the like. Device 210 can be communicatively linked to offline cache 214, interface 212, and the like. Device 210 can include multiple computing devices 210, multiple interfaces 212,multiple offline caches 214, and the like. That is, system 200 can be utilized to intelligently persist navigated content 260 and/or non-navigated content 262 across multiple system and/or components. Interface 212 can be a hardware/software element for performing user interface actions within a browsing session. Interface 212 functionality can include, but is not limited to, content 232 presentation, configuration management, and the like. In one instance, interface 212 can be a Web browser including, but not limited to, MOZILLA FIREFOX, APPLE SAFARI, KONQUEROR, GOOGLE CHROME, and the like. Interface 212 can be a graphical user interface able to present navigated content 260 andnon-navigated content 262 during an offline browser session. Offline cache 214 can be a data store able to persist navigated and non-navigated content 262. Cache 214 can conform to traditional and/or non-traditional data storage formats. Cache 214 can include, but is not limited to, random access memory(RAM), read-only memory (ROM), flash memory, and the like. In one embodiment, cache 214 can be associated with a browser cache. In another embodiment, cache 214 can be independent of a browser cache and/or device 210. For example, offline cache 214can be a removable storage device such as a flash memory drive. Data store 250 can be a hardware/software component able to store unscheduled list 232. Data store 250 can be a Storage Area Network (SAN), Network Attached Storage (NAS), and the like. Data store 250 can conform to a relational databasemanagement system (RDBMS), object oriented database management system (OODBMS), and the like. Data store 250 can be communicatively linked to server 230 in one or more traditional and/or proprietary mechanisms. Network 280 can be an electrical and/or computer network connecting one or more system 200 components. Network 280 can include, but is not limited to, twisted pair cabling, optical fiber, coaxial cable, and the like. Network 280 can includeany combination of wired and/or wireless components. Network 280 topologies can include, but is not limited to, bus, star, mesh, and the like. Network 280 types can include, but is not limited to, Local Area Network (LAN), Wide Area Network (WAN),Virtual Private Network (VPN) and the like. Drawings presented herein are for illustrative purposes only and should not be construed to limit the invention in any regard. System 200 functionality can extend to traditional and non-traditional content and/or resources including, but notlimited to, social networking sites (e.g., user profile pages), files, directory structures, and the like. For example, system 200 can cache a File Transfer Protocol (FTP) directory structure associated with a user home directory. In one embodiment,system 200 can include partial mirroring of Web sites, permitting seamless navigation of content during an offline state. In one instance, the system 200 can be configured to persist only non-navigated content 262. FIG. 3 is a schematic diagram illustrating an interface 305 for intelligent offline caching of online content based on usage metrics in accordance with an embodiment of the inventive arrangements disclosed herein. Interface 305 can be presentin the context of method 100 and/or system 200. In interface 305, offline caching configuration options 310-316 can be presented and/or configured. In one instance, configuration options 310-316 can be a screen of a configuration process. Forinstance, interface 305 can be a screen of a configuration wizard. Interface 305 can be associated with a client browsing interface, server configuration interface, and the like. In one instance, interface 305 can be associated with system 200 (e.g.,interface 212). Interface 305 can include but is not limited to, offline caching options 310, ruleset parameters 312, filtering options 314, cache configuration parameters 316, and the like. In offline caching options 310, automated caching based onusage parameters can be configured. In one instance, options 310 can include persisting historically browsed content. For example, a user can specify the last ten visited Web sites can be automatically cached. In another instance, options 310 caninclude caching depth parameters enabling flexible offline content storage. For example, offline caching can be limited to three hyperlinks in depth. In ruleset parameter 312, one or more rulesets can be utilized to extend offline caching functionality and/or usage pattern triggers. In parameter 312, an external ruleset file can be specified. For example, a file selection dialog can bepresented enabling selection of one or more rulesets residing within a computing device. In one instance, the ruleset can conform to an Extensible Markup Language format. In another instance, the ruleset can conform to a flat text file. In filtering options 314, one or more filtering lists can be specified. In options 314, a whitelist and/or a blacklist can be selected. Filtering lists within option 314 can conform to traditional and/or proprietary formats. In oneembodiment, whitelist and blacklist can be a plain text formatted file. In one instance, selection of filtering lists can be enabled or disabled through a check box interface element. In cache configuration parameters 316, cache administration options can be presented and/or manipulated. In one instance, parameters can include revision options, cache size settings, and the like. In one embodiment, the disclosure can beconfigured to store multiple revisions of a content within an offline cache. In the embodiment, a revision option can be easily enabled or disabled via a check box interface element. In one embodiment, cache size can be configured within parameters316. Cache size can be automatically determined and/or manually specified. In one instance, cache size can be limited to a quantity of megabytes. For instance, a user can specify the cache not to exceed one gigabyte in size. Drawings presented herein are for illustrative purposes only and should not be construed to limit the invention in any regard. Interface 305 can include, but is not limited to, a graphical user interface (GUI), voice user interface (VUI),mixed-mode interface, text-based interface, and the like. It should be appreciated that interface 305 can include additional options for specifying caching behavior, content presentation, and the like. Configuration options 310-316 can be associatedwith a file menu, context menu, and the like. Interface 305 can include graphical user interface elements including, but not limited to, input boxes, check boxes, radio dialogs, and the like. The flowchart and block diagrams in the FIGS. 1-3 illustrate the architecture, functionality, and operation of possible implementations of systems, methods and computer program products according to various embodiments of the present invention. In this regard, each block in the flowchart or block diagrams may represent a module, segment, or portion of code, which comprises one or more executable instructions for implementing the specified logical function(s). It should also be noted that, insome alternative implementations, the functions noted in the block may occur out of the order noted in the figures. For example, two blocks shown in succession may, in fact, be executed substantially concurrently, or the blocks may sometimes be executedin the reverse order, depending upon the functionality involved. It will also be noted that each block of the block diagrams and/or flowchart illustration, and combinations of blocks in the block diagrams and/or flowchart illustration, can beimplemented by special purpose hardware-based systems that perform the specified functions or acts, or combinations of special purpose hardware and computer instructions."
43|http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=76&p=2&f=G&l=50&d=PTXT&S1=(python.CLTX.+or+python.DCTX.)&OS=ACLM/python&RS=ACLM/python|Automated customer incident report management in a social networking system|A social networking system is configured to generate node graphs to handle specific types of customer incident reports. The node graphs comprise data structures that include nodes connected in acyclic graphs. Each node includes a node handler and optionally a user interface widget. Activating a node graph causes a subset of the nodes in the node graph to execute their node handlers. The executing node handlers generate a customer incident resolution that may include information gathering, manual review, and communications to users and third-party systems. Generation of the customer incident resolution through the node graphs allows the social networking system to handle customer incidents consistently, efficiently, and in a scalable manner.|"1. A method comprising: receiving, from an administrative user a node graph, the node graph comprising a plurality of nodes and connectivity information indicatingconnections between the plurality of nodes, each node comprising a handler; receiving, from a user device, a customer incident report comprising customer incident data; responsive to receiving the customer incident report, activating the node graph,where activating the node graph comprises activating a first node in the node graph by performing the steps: executing the handler of the first node; and based on the execution of the handler of the first node, activating a next node in the node graphand providing output data from the first node to the next node; and generating a customer incident resolution using the activated node graph; wherein at least one node in the node graph further comprises a user interface widget, the user interfacewidget comprising a user interface definition; wherein activation of the first node further comprises: sending, to the user device, a user interface configuration, wherein the user interface configuration comprises information that is used by the userdevice to display a user interface, and wherein the user interface configuration is based on information from a user interface widget in the first node; receiving user input data from the user device; and providing the received user input data as inputto the first node. 2. The method of claim 1, wherein activating a first node in the node graph comprises providing the customer incident data as input to the first node. 3. The method of claim 1, wherein activating a first node in the node graph comprises providing operational data as input to the first node. 4. The method of claim 3, wherein the operational data includes transactional data related to a purchase made by a user of a social networking system, wherein the transactional data is provided by a third-party system. 5. The method of claim 1, wherein the user interface configuration comprises HTML and JAVASCRIPT. 6. The method of claim 1, wherein the user interface configuration comprises FLASH. 7. The method of claim 1, wherein the handler of the first node comprises a PYTHON script. 8. The method of claim 1, wherein the handler of the first node comprises a PHP script. 9. The method of claim 1, wherein the handler of the first node comprises a JAVA program. 10. The method of claim 1, wherein the operational data includes social data related to a user of a social networking system. 11. The method of claim 1, wherein generating a customer incident resolution comprises executing a node handler to send a communication to the user device. 12. The method of claim 1, wherein generating a customer incident resolution comprises executing a node handler to generate an alert for the administrative user. 13. A method comprising: establishing a widget store, the widget store comprising one or more user interface widgets, each user interface widget comprising a user interface definition; establishing a handler store, the handler store comprisingone or more node handlers, each node handler comprising computer executable instructions; establishing a node store, the node store comprising one or more nodes, each node comprising a node handler, and at least one of the nodes further comprising auser interface widget; providing node graph generation means to an administrative user, the node graph generation means enabling the administrative user to generate a node graph using a subset of the user interface widgets, node handlers, and nodes, thenode graph configured to generate a customer incident resolution when activated, based on an execution of a subset of the node handlers; receiving, from a user device, a customer incident report comprising customer incident data; responsive toreceiving the customer incident report, activating the node graph; and generating a customer incident resolution using the activated node graph. 14. The method of claim 13, wherein generating a customer incident resolution further comprises executing a node handler to send a communication to the user device. 15. The method of claim 13, wherein generating a customer incident resolution further comprises executing a node handler to generate an alert for the administrative user. Description BACKGROUND This invention relates generally to automated customer management, and in particular to the automated management of customer incident reports in a social network system. Social networking systems allow users to create accounts that are tied to their identities, and to interact with their friends, acquaintances, family members, and co-workers through a common platform. A social networking system may also allowbusinesses to offer goods and services, both real and virtual, to users of the social networking system. In addition, a social networking system may enable users to market their own goods and services directly, or indirectly, to other members of thesocial networking system. Interactions between users, or between users and businesses, may result in customer incident reports that require the involvement of the social networking system. Customer incident reports are generated when customers require interaction withan automated system or human agent, e.g. in order to report a faulty transaction, dispute a charge, lodge a complaint, request a remedial action, make inquiries, etc. However, the process for using social networking system information to resolve customerincident reports is currently resource intensive. Although human agents can be used to sift through the social data to determine information that is relevant to a customer incident report, such a use of human agents is expensive since the volume ofcustomer incident reports can grow very large as a social network's user base increases into millions and hundreds of millions. What is required is an automated system that can utilize social data to help resolve customer incident reports. However, the types of customer incident reports that can be generated as a result of transactions between users, or between usersand businesses, can be very large. For example, customer incident reports may be generated due to fraud, faulty products, misplaced orders, mistyped shipping information, harassment, spam, and more. As a result, using engineering resources to program aseparate automated solution for each customer incident report type can itself be resource intensive.SUMMARY A social networking system establishes a widget store, a handler store, and a node store. The widget store comprises one or more user interface widgets, where each user interface widget comprises a user interface definition. The handler storecomprises one or more node handlers, where each node handler comprises computer executable instructions. The node store comprises one or more nodes, where each node comprises a node handler, and at least one of the nodes further comprises a userinterface widget. The social networking system provides an administrative user with an interface to generate a node graph. The node graph comprises a plurality of nodes connected in an acyclic graph and is configured to generate a customer incident resolutionwhen activated. The social networking system then receives, from a user device, a customer incident report, comprising customer incident data. Responsive to receiving the customer incident report, the node graph is activated and a customer incidentresolution is generated using the activated node graph. BRIEF DESCRIPTION OF THE DRAWINGS FIG. 1 illustrates a social networking system environment in which one embodiment of the automated customer incident report management system is implemented. FIG. 2 illustrates the components of the customer incident manager according to one example embodiment. FIG. 3 illustrates one example of a node graph configured to resolve charge disputes in the social networking system. The figures depict various embodiments of the present invention for purposes of illustration only. One skilled in the art will readily recognize from the following discussion that alternative embodiments of the structures and methodsillustrated herein may be employed without departing from the principles of the invention described herein.DETAILED DESCRIPTION Overview of the Social Networking System Environment for Automated Customer Incident Report Management FIG. 1 is a high-level block diagram of the social networking system environment in which the automated customer incident report management process operates, according to one embodiment. FIG. 1 shows a social networking system 101 communicatingwith a user device 100 and a third-party system 110, over a network 106. Although one user device 100, one social networking system 101, and one third-party system 110 are illustrated in this figure, in practice there may be many user devices 100,third-party systems 110, and social networking systems 101 connected over the network 106. The network 106 is the Internet or another system of interconnected computer networks that use standard communications technologies and/or protocols to facilitate data transmission. Thus, the network 106 can include links using technologiessuch as Ethernet, 802.11, worldwide interoperability for microwave access (WiMAX), 3G, digital subscriber line (DSL), asynchronous transfer mode (ATM), InfiniBand, PCI Express Advanced Switching, etc. Similarly, the networking protocols used on thenetwork 106 can include multiprotocol label switching (MPLS), the transmission control protocol/Internet protocol (TCP/IP), the User Datagram Protocol (UDP), the hypertext transport protocol (HTTP), the simple mail transfer protocol (SMTP), the filetransfer protocol (FTP), etc. The data exchanged over the network 106 can be represented using technologies and/or formats including the hypertext markup language (HTML) and the extensible markup language (XML). In addition, all or some of links can beencrypted using conventional encryption technologies such as secure sockets layer (SSL), transport layer security (TLS), virtual private networks (VPNs), Internet Protocol security (IPsec), etc. In another embodiment, the entities can use custom and/ordedicated data communications technologies instead of, or in addition to, the ones described above. A user interacts with the social networking system 101 using a user device 100, such as a personal computer or a mobile phone. The user may interact with the social networking system 101 via a web application running in a web browser executingon the user device 100; or the user may interact with the social networking system 101 through a native application running on the user device 100. These applications may be downloaded to the user device 100 from the social networking system 101, orthey may be provided by a third party. Typical interactions between the user device 100 and the social networking system 101 include operations such as creating an account, viewing profiles associated with other accounts, contributing and interactingwith media items, joining groups, listing and confirming attendance at events, checking in at locations, liking certain pages, creating pages, and performing other tasks that facilitate social interaction. Users may also purchase goods and services,both virtual and real, through the social networking system 101. Users purchasing goods and services through the social networking system 101 may be connected to a third-party system 110 in order to complete a transaction. The third-party system 110may report the details of a transaction back to the social networking system 101, and the social networking system 101 may store this information in the action log 109. A user connected through a user device 100 may also generate a customer incident report through their interaction with the social networking system 101. When a customer incident report is generated in the social networking system 101, acustomer incident report resolution process is initiated. The customer incident report resolution process is managed by the customer incident manager 104. Customer incident reports come in a variety of types and in order to handle these incidentsreports, each type may require a different set of user interfaces, data, and customer interactions. The user interfaces, data, and customer interactions used to handle a customer incident report are called the customer incident resolution for thatreport. The customer incident manager 104 provides resources and methods that allow administrators of the social networking system 101 to quickly configure custom automated systems that can generate customer incident resolutions for new types ofcustomer incident reports. The automated systems may generate a variety of customer incident resolutions to handle customer incident reports. Generated customer incident resolutions may include social networking system actions such as banning anaccount, deleting content posted by a user, issuing a refund, issuing courtesy credits, etc. Customer incident resolutions may also include sending messages to a third-party system 110 so that the third-party can take corrective action, for example,correcting an order, providing credit card information for a refund, issuing a refund directly, issuing a courtesy credit, etc. Through messages the third-party systems can be directed to take any action that is appropriate to resolve a customer incidentreport. In addition, the generated customer incident resolutions will also often send a communication to a user device in order to obtain information from a social networking user, or to provide the user with information. The customer incident manager104 and the resolution generation process are described in more detail herein. The third-party system 110 can be any computer system operated by a third-party that communicates with either the user device 100 or social networking system 101 over the network 106. Examples of third-party systems 110 include web servers,database servers, credit card processing servers, etc. These systems may provide information to the social networking system 101 to help resolve customer incident reports, and they may request information from the social networking system 101 in order tocomplete some process of their own. For example, in the case where a third-party system 110 is contemplating giving a user a refund for some purchase made in the past, the third-party system 110 may provide transactional details about the purchase tothe social networking system 101, and then may receive confirmation from the social networking system 101 that the refund is warranted because the user has a good record and the purchase appears to be the result of a mistake. The social networking system 101 allows users to create accounts and establish links with other users of the social networking system 101. When two users become linked, they are said to be ""connections,"" ""friends,"" ""contacts,"" or ""associates""within the context of the social networking system 101. The social networking system 101 includes a social graph 102. The social graph 102 stores the connections that each user has with other users of the social networking system 101. The socialnetworking system 101 may also enable businesses to establish accounts and form links with users of the social networking system 101. These links may be formed explicitly by either a user or the business, or they may be formed implicitly as a result ofa customer purchase, review, or some other interaction between the user and the business. The social networking system 101 provides a user with various ways to interact with and communicate with businesses and other users, for example, by email (internal and external to the social networking system), instant message, text message,phone, through social network apps and the like. The social networking system 101 may send data related to an interaction or communication of a user to a third-party system 110. Similarly, a third-party system 110 may send data to the social networkingsystem 101 that is related to an interaction or communication conducted external to the social networking system 101. The social networking system 101 maintains a user account for each user that has joined the social networking system. Businesses may also have their own accounts. The user or business that has created an account on the social networking systemis referred to as the ""account-holder"" for that account. The social networking system 101 also maintains a profile with each account. The profile describes the account-holder's characteristics. For a user the profile contains information such as workexperience, educational history, hobbies, location, or similar data, and may also include data describing one or more relationships between the user and other users. In the case of a business, the profile may contain information such as a URL for thebusiness's website, a description of the business, photos of products, etc. The social networking system 101 includes a user interface manager 103 that allows a social networking system user to interact with the social networking system 101 through a social networking system interface. For example, the user interfacemanager 103 may generate one or more web pages that are displayed on the user device 100, where the web pages display social networking system data such as images, video, user profiles, etc. The user interface manager 103 also generates the interfacesnecessary for the social networking system 101 to request and receive information from the user operating the user device 100. For example, the user interface manager 103 may create a web page form so that a user can provide biographic information, suchas the user's age, for use by the social networking system 101 in creating that user's user profile. If a user is interacting with the social networking system 101 through an application running on the user device 100 (such as a mobile phone app, tabletapp, or desktop application) the user interface manager 103 may simply send user interface configuration information to the user device 100, where the user interface configuration information is used by the application to determine the user interface toshow to a social networking system user. User interactions with the user interface running on the user device 100 may be sent back to the social networking system 100. Any action that a particular account-holder communicates to the social networking system 101 is associated with the account holder's account, through information maintained in an action log 109. Such actions may include, for example, adding alink to a user, sending a message to a user, making a purchase, sending a complaint, reviewing a business etc. A log entry for an action may include the time of occurrence of the action, a type of action performed, the account-holder who performed theaction, an object on which the action was performed, and any other information related to the action, such as the location associated with the action, price paid for an item, etc. For example, in the action `Adrian bought a ring at Tiffany & Co.,` thetype of action is buying, the object is a ring and extra information includes where the ring was bought, Tiffany & Co. The actions may be taken online either within the social networking system 101 or outside of it, or they may be actions performed inthe real world and recorded and communicated to the social networking system 101 by a user, by a third-party system 110, or by some other means. User information is stored by the social networking system in the user data store 108. User information includes not only the biographic information provided by users, but also may include content uploaded by a user such as photographs, video,status updates, blog posts etc. When other users request the user's profile page, user interface manager 103 may retrieve the user's data from the data store 108 and generate a user profile web page for display on the user device 100. The user datastore 108 may also contain personal information about the user such as credit card information, bank information, social security number, address, credit score, etc. The social networking system 101 may request the user's permission before storing suchpersonal information in the user data store 108. The user data 108, the social graph 102, and the action log 109 are collectively called the social data 120. When a user of the social networking system performs a transaction with a third-party system 110, such as a retail website operated by a business, the user may request that the social networking system 101 transfer some of her financialinformation (for example, credit card information) to the third-party system 110 to complete a transaction. The user and the business may also process payments directly through the social networking system 101, in which case the financial information isnot directly transferred from the social networking system to the third-party system, and instead the social networking system 101 credits an account for the business directly. User data concerning a particular transaction between a user and thethird-party system 110 may be stored in the third-party data store 112. For example, the third-party data store 112 may store information concerning a product bought by the user, the price paid, the date of purchase, and the address where the productwas shipped. Although only one third-party system 110 and one third-party data store 112 are shown in FIG. 1, in practice there may be many third-party systems 110 and third-party data stores 112. Data related to a single user transaction may bescattered across many third-party systems 110 and third-party data stores 112. For example, credit card details for a user may be stored by a credit card processor that is different than the Internet retailer that sells a product to the user. Some orall of the information held by third-party systems 110 may be communicated back to the social networking system 101. The authentication manager 106 authenticates a user on user device 100 as having an account on the social networking system 101. The authentication manager 106 allows a user to log into the social networking system 101 through any user device100 that has an application supporting the social networking system 101. In some embodiments, the authentication manager 106 validates users that connect to the social networking system 101 through third party applications. The authentication manager106 may also authenticate a user on behalf of a third-party system 110, so that the user and the third-party system 110 may conduct a transaction securely. The machine-learning module 111 trains machine-learned models that may be used by the customer incident manager 104 or other modules of the social networking system 101. Machine-learned models may be used in discovering the relationship betweensocial data in the social networking system 101 and particular incident types. Such information may be used beneficially by the automated incident handlers. In addition, machine-learned models may be used to identify trends in customer incidentreporting. Identifying such trends may help to control the root causes of such customer incident reports. The application of machine-learned models for customer incident report management is discussed in more detail herein. The application programming interface module 105 provides programmatic access to the social networking system 101, including both the social data 120 and the customer incident manager 104. The application programming interface module 105 allowsany data or function that can be accessed or performed by a user to be also accessible or performable via a computer program running on a user device 100, third-party system 110, or on the social networking system 101. Customer Incident Manager FIG. 2 illustrates one embodiment of the customer incident manager 104. The customer incident manager 104 includes a node graph store 200, a widget store 210, a handler store 215, a node store 225, and a graph layout manager 220. The customer incident manager 104 presents administrative users of the social networking system 101 with an interface that allows them to configure node graphs that may be activated to automatically generate customer incident resolutions. Administrative users are users of the social networking system that have administrative responsibilities, such as responding to customer complaints, maintaining the social networking system software and hardware, etc. Typically administrative users areemployees of the operators of the social networking system 101. The functionality that the customer incident manager 104 provides the administrative users will usually not be provided to other users of the social networking system 101. Generation of customer incident resolutions by node graphs may comprise multiple steps, and while some node graphs implement fully automated processes, other node graphs may use a combination of manual review and automated information gathering. Node graph processes may include, for example, steps where social networking system users are queried for information, steps where third-party systems are queried for data, steps where information is sent for display to social networking system users,steps where human agents are used to evaluate gathered data, etc. In one example embodiment, a node graph that is configured to handle customer incident reports related to harassment may, when activated, initiate a process that includes a step wheresocial data related to the alleged victim and perpetrator is gathered, a step where the alleged harassing content is evaluated by a machine-learned model, and finally a step where the gathered information and output of the model are provided to a humanagent for manual evaluation. By using node graphs the social networking system can generate customer incident resolutions in a way that is consistent across users, efficient, and scalable. A node graph is a data structure that defines a set of data inputs, user interfaces, and processes that may be used to resolve a customer incident report or to assist a human agent in resolving a customer incident report more efficiently. Thereare different node graphs that are configured to deal with different types of customer incident reports. For example, one node graph may be created to resolve credit card charge disputes from social networking users, while another node graph may becreated to resolve reports of harassment over the social networking system. Each node graph consists of a set of nodes arranged in an acyclic graph structure. Each node in the graph has an associated handler and may also include one or more userinterface widgets (UI widget). Each node may also contain a list of one or more child-nodes. Some nodes are terminal nodes in that they have no child-nodes. Once the handler of a terminal node completes execution, the node graph process is consideredcompleted. The connectivity information that determines how the nodes are arranged in relation to each other in the graph may be implicitly contained in the child-node information of each node, or it may be stored explicitly in the node graph itself. Theinformation may also be stored as a combination of per-node information as well as information stored in the node graph. For example, the layout of the node graph may be represented by designating a ""top node"" or ""root node"" explicitly, while theremaining connectivity information is stored implicitly in the child-node lists for the root node and subsequent nodes in the graph. The node handlers are computer executable instructions (scripts or computer programs) that take input and generate outputs and/or actions. The output of one node's handler can be used as one input for the next node's handler. The actions takenby node handlers include, for example, sending messages to social networking system users, generating alerts for administrative users, blocking users, deleting user content, generating refunds, activating other nodes, activating other node graphs, etc.Almost any action that can be activated through computer code in the social networking system 101 can be activated by a node handler, including functionality accessed through the application programming interface module 105. A node handler may evenqueue a certain set of information concerning a customer incident report for manual review by a human administrator. For example, a node handler that is processing a customer incident report related to fraud may gather all the information related tothat report into a structured form and place the structured information into a review queue so that a human can review it more efficiently. The outputs of node handlers can include information such as a designation that a particular transaction is fraudulent, a probability that a particular piece of content is spam, a list of a certain user's purchases in the last 24 hours, etc.These outputs may be used as inputs by other nodes, or they may be the desired end result themselves. The node handlers are stored in the handler store 215. The node handlers can utilize PYTHON, PHP, JAVASCRIPT, JAVA, C, C++, ERLANG, or any othertechnology adapted to creating scripts or programs. The output and actions generated by the node handlers are considered part of the customer incident resolution that is generated by the node graph. The UI widgets contain user interface definitions that can be used to generate user interface configurations. These user interface configurations can be sent to user devices to generate user interfaces for presentation to target users. Forexample, one UI widget may consist of a definition that causes a text box with the words ""Please indicate your state of residence"" to be displayed on a user's device, along with a drop-down menu that allows selection of a US state. These UI widgets canbe used by node handlers to solicit input from target users or to communicate information to these users. The UI widgets are stored in the widget store 210. UI widgets may consist of a combination of HTML, CSS, FLASH, JAVASCRIPT, or any othertechnology that can be used to specify a user interface presentation on a client device. In some embodiments UI widgets contain user interface definitions in XML or some other proprietary format, which are translated to other formats like HTML, CSS,FLASH, etc., before being sent to a user device 100. Activating a node of the node graph causes it to execute its handler. The handler when executed may request data inputs based on its requirements. Some of the data inputs that a node handler requests may be provided by other nodes that wereactivated previously (parent nodes), and other data may be provided from other sources such as the social data 120 and non-social data from the social networking system 101, and the third-party data from the third-party data store 112 of the third-partysystem 110. The social data 120, non-social data, and third-party data provided to a node are collectively called the operational data for that node. Operational data often includes information about the target users in a customer incident report. The target users are the social networking users that are identified in the customer incident report, as well as those users that are connected inthe social graph to the identified users. For example, if a user reports that another user is harassing them, then a customer incident report may be generated to resolve this harassment. For this customer incident report the first user is a target user(called the reporting user) and the second user is also a target user (called the reported user). In addition, friends of either the reporting user or the reported user may also be target users for a node. Data for these friends (such as age,harassments reported by, harassments accused of, measure of ""badness"" etc.) may be included in the operational data for the node in addition to data about the reporting user and reported user. In some cases a node handler may request additional information from a target user that is not included in the operational data (e.g., information that is unknown to the social networking system 101 and the third-party systems 110). In order toobtain information from a target user the node handler may show a user interface to the target user on their user device 100, where the user interface is configured to query for the desired information and capture the target user's response. Theproperties of this user interface (e.g. the layout, text displayed, etc.) are determined by a UI widget associated with the node. UI widgets may also be used by node handlers to display information to a target user in order to give them information,change their behavior, etc. For example, a node graph that is designed to resolve customer incident reports about bullying may have a node that when activated executes a handler that uses a UI widget to cause a dialog box to appear on the alleged bully'sdevice. The dialog box may contain text that informs the alleged bully about the social networking system's code of conduct, and may request the alleged bully to refrain from abusive conduct. The dialog box may further ask the alleged bully to click abutton to acknowledge that he has read the code of conduct. The acknowledgment may then be sent back to the social networking system 101 where it is passed back to the activated node (and on to the node's handler). A node's request for information and the target user's response need not be a real-time transaction. In other words, a node handler may request information from a user, but a user may not see the request until the next time they log into thesocial networking system 101. The user may provide the requested information hours, days, or even weeks later. When a node is said to be activated it may mean that the node handler is actively processing, or it may mean that the node handler is dormantas it waits for some data input. The data input that the node handler is waiting for may be user input, third-party data, or even data generated by a service running in the social networking system 101 or on an external service. Although the node isconsidered ""active"" during this time, when the node handler is dormant, the node need not consume computing resources and its state may be archived so that it can be reactivated to continue processing when the requested information becomes available. The node handler is also responsible for determining which of the node's child nodes is activated next (or if the node graph processing should terminate). This determination may be scripted by engineers or it may be determined based on theoutput of machine-learned models trained by the machine-learning module 111. The process of determining the child-node to activate is described in more detail herein. Once they are generated, node graphs are stored in the node graph store 200. A node graph may be attached as a child graph to another node graph. In this way a node graph that is useful in one context may be reused again within a largerprocess implemented by another node graph. Thus node graphs that are authored once can be reused for different customer incident report types. For example, a node graph that is designed to validate a user's identity may be beneficially embedded in anode graph that deals with credit card fraud reports, as well as in another node graph that deals with imposter account reports. Graph Layout Manager The graph layout manager 220 provides an interface to administrative users of the social networking system 101 so they can generate new node graphs to handle novel customer incident report types. Administrative users generate new node graphs inseveral ways. First, the administrative users can select from pre-existing components such as pre-generated nodes from the node store 225, and pre-generated node graphs from the node graph store 200, and can connect these to generate new node graphswith little or no additional engineering work. The graph layout manager 220 gives users a graphical or scripting interface to select and link existing components to create new node graphs that can handle novel customer incident report types. The newnode graphs can be stored back in the node graph store 200, and they can then be used as components in other node graphs. Second, the graph layout manager 220 allows administrative users to generate new nodes using existing UI widgets and node handlers from the widget store 210 and handler store 215. These new nodes can be used along with pre-existing nodes ornode graphs to generate new node graphs. Nodes, once generated, can be stored in the node store 225 and can be reused. The third way an administrative user can generate new node graphs is by generating new UI widgets and new node handlers, combining these together to form new nodes, and using the new nodes with existing nodes, node handlers, UI widgets, and nodegraphs. Generating new UI widgets and new node handlers may require significant engineering resources since these must be generated from scratch. For example, writing a new node handler requires an engineer to script the new functionality desired. However, the advantage of the node graph system is that the UI widgets and node handlers once generated are stored in the widget store 210 and the handler store 215, and are thus accessible to other administrative users, and so can be used in other nodesand node graphs to resolve other customer incident report types. Node Graph Processing FIG. 3 illustrates in greater detail a node graph configured to resolve customer incident reports related to charge disputes. In this example node graph there are seven nodes, labeled 301 to 307, but in practice a node graph generated to handlecharge disputes might have many more nodes. Assume for the sake of this example that the illustrated nodes are just a subset of the actual nodes that would be present in such a node graph. Here the nodes consist of a root node 301, a fraud node 302, asocial node 303, a refund node 304, a mistake node 305, another instance of a refund node 306, and a shipment node 307. The relationship between these nodes (the layout and connections) may have been arranged graphically or by script through the graphlayout manager 220. Although not depicted in this illustration, each node in the graph has an associated handler, e.g. the root node 301 has a root handler, the fraud node 302 has a fraud handler, etc. The nodes in this node graph may have been createdfrom scratch, or they may have been selected from pre-existing nodes. The refund nodes 304 and 306 are instances of the same node used in two different locations in the node graph. The refund node is an example of a node created once and used in twodifferent contexts. When a customer incident report is received by the social networking system 101 it may determine that this node graph should be activated to resolve the report. The decision to activate this node graph may itself be generated by another nodegraph that is configured to determine customer incident report types and to activate the appropriate node graph. If the received customer incident report concerns a charge dispute then the illustrated node graph may be activated to resolve it. When the node graph is activated by the social networking system 101, data called the customer incident data 308 is made available to the root node (top node). The customer incident data is data derived from the customer incident report andincludes information that is dependent on the customer incident report type. For example, if the customer report concerns a charge dispute, as in this case, the customer incident data may include information such as the social networking system userthat was charged (the target user in this case), the merchant who levied the charge, the charge amount, the item or service that was purchased, the URL of the merchant's website, the date of purchase, the location of the purchase, etc. Operational data312 may also be made available to the root node. This may include data such as information about similar charge disputes brought by other users against the same merchant, other charge disputes brought by the target user, other purchases made by the userfrom the same merchant, etc. Based on the information made available to it, the root handler will determine the next node to activate in the node graph. In this case the root handler must activate either its child-node the mistake node 305 or its child-node the fraud node302. The mistake node 305 handles the situation where the charge dispute appears to be the result of a mistake on the part of the merchant or the user. The fraud node 302 handles the situation where the charge dispute appears to be the result of fraudon the part of the merchant or some other party. In this case, the child-node to activate may be determined using a fraud-detection model from the machine-learning module 111. The fraud-detection machine-learned model may be trained to detect fraud based on inputs provided to it by the roothandler. For example, the root handler may provide information that indicates that the user has made several purchases from the merchant in the past, and that the disputed charge is the only disputed item amongst many other undisputed transactions. Inthis case the fraud-detection model may determine that the disputed charge is probably a result of a mistake (rather than fraud) and may pass control to the mistake node 305 by activating it. When activated, the mistake node 305 will execute the mistake handler. The mistake handler may receive some input from the root handler (e.g. a determination that the charge is not fraudulent), and may request other data in order to makefurther determinations. For example, the mistake handler may request additional third-party data 309, for example, specific information about the disputed charge may be requested from a server operated by the merchant. This information may include, forexample, details regarding the address where the ordered item was shipped and information regarding other items ordered at the same time as the disputed charge. Using this information the mistake node 305 determines whether the customer incident reportis related to a shipment to a wrong address, or if it is a duplicate order that warrants a refund. If the address where the item was shipped appears to be different than the user address information that the mistake handler has obtained--this information could have been passed to it from the root node 301 or it can be requested from thesocial data 120 stored by the social networking system--then the mistake handler may activate the shipment node 307. If the mistake handler determines that two identical products were ordered back-to-back by the target user, then it may determine that arefund is warranted and may activate the refund node 306. The shipment node 307 will handle the interactions with the merchant and the target user that are required to correctly re-ship the product to the user. This may include displaying an apology (with the help of a UI widget) to the user for thedelay in receiving their order and reassuring them that their item is on the way, and providing the merchant with a corrected shipping address after confirming the shipping address with the user. The refund node 306 on the other hand will handle the interactions necessary to have the product returned by the target user and to process a refund. This may include contacting the merchant to inform them of the error in the order as well asinforming the target user that the refund is being processed. The refund handler may also gather all the information related to the disputed charge into a structured form and place it in a queue for review by either a social networking systemrepresentative, or a representative of the merchant. If the fraud-detection model used by the root handler determines that the disputed charge is most likely a result of fraud, instead of activating the mistake node 305, the root handler activates the fraud node 302. On execution the fraudhandler may try to gather more information related to the disputed charge in order to determine the source of the fraud. For example, the fraud handler may determine based on social data 311 that the address that the merchant shipped the product to, isthe address of the target user's residence. In addition, the merchant may provide data indicating that the product is most often purchased by teenage girls. Further, the fraud handler may determine from the social data 311 that the target user has ateenage daughter and may also learn from the social data that the teenage daughter recently posted a review of the product to the social networking system 101. This is an example of what credit card companies call ""friendly fraud"". Friendly fraud isthe term used by credit card companies to describe disputed charges that are made by a member of the user's own family, without the user's knowledge. The social networking system is in a unique position to help resolve friendly fraud since it hasinformation on not only the user, but also potentially the user's family members. Based on the identification of a possible occurrence of friendly fraud, the fraud node may pass control to the social node 303 by activating it. The information available to the social node's handler (the social handler) may be insufficient for that handler to determine whether a refund is warranted or even desired by the target user. In this case the social handler may solicitadditional feedback from the target user using a UI widget. The UI widget may generate a UI on the user device 100 that informs the target user that her daughter may have made the purchase, and may provide a link to the product review written by thedaughter. In addition, the UI may communicate that the shipping information indicates that the product was shipped to the target user's address. Finally the UI may provide the target user with a button that allows the user to either return the item andobtain a refund, or cancel the charge dispute. If the target user selects the refund option, the social handler will activate the refund node 304, which can handle the refund process. If the target user opts to cancel the charge dispute then the socialhandler will simply mark the customer incident report as resolved and terminate the process. In this way friendly fraud can be resolved in a manner that satisfies both the user and the involved business. Such friendly fraud resolution is not possiblefor a credit card company operating with user information alone. System Optimizations The node graph system for handling customer incident reports lends itself to many beneficial optimizations. One method of optimizing the node graph system is to analyze the number of customer incident reports that are resolved by each branchand node in a node graph, and to measure the success rate and efficiency of these branches and nodes in terms of user satisfaction and resources used. This information can then be used to tweak the node graphs to improve underperforming branches andnodes. For example, if it turns out that in the node graph illustrated in FIG. 3 that the refund nodes 304 and 306 require an inordinate amount of involvement from human agents in order to process refunds, then it may be worthwhile to devote engineeringresources to refine the refund handler so that more of the process is automated, such that less human resources are required for future refund processing. The effect of node graphs on user satisfaction is more difficult to measure since direct user satisfaction surveys may themselves degrade user experience. To avoid this, machine-learned models from the machine-learning module 111 can be trainedto generate a customer satisfaction score for a target user based on factors like their time spent on the social networking system, purchases made, content posted to the social networking system etc. The success of various nodes and branches of a nodegraph can then be measured by generating a customer satisfaction score for target users that were dealt with by those nodes and branches. If the satisfaction score for a particular node or branch of a node graph is poor, then the node or nodes canreceive engineering attention to identify the reasons they are failing to satisfy users. Using the satisfaction score and other metrics the system can also optimize node graphs and branches of node graphs using a champion-challenger model. In this model two node graphs (or branches) that are configured to resolve a particular typeof incident can be measured against each other by assigning a random population of customer incident reports of the given type to each, and then measuring which one gives a better result for users on average (using satisfaction score or some other metricto measure the outcome). The superior node graph or node graph branch can then be assigned the majority (or all) of the customer incident reports of the given type. In this way, when a new method of resolving a customer incident report type isdesigned, it can be tested against existing methods of resolving the same report type. Another avenue of optimization that is made available by the node graph system is real-time monitoring and traffic control for customer incident report management. Each node in each node graph of the customer incident manager 104 can bemonitored to determine how often it is being activated. The node graphs can thus be monitored to determine if there are spikes in certain types of customer incident reports. Based on this monitoring, the social networking system 101 can take correctivemeasures to ameliorate or prevent spikes in some types of customer incident reports. For example, if there is a certain large spike in spam reports related to a particular link posted to the social networking system 101, the node graph related tohandling spam reports may report this to the customer incident manager 104. Based on this information, the customer incident manager 104 can temporarily or permanently prevent the link from being posted to the social networking system 101. Additional Concerns The foregoing description of the embodiments of the invention has been presented for the purpose of illustration; it is not intended to be exhaustive or to limit the invention to the precise forms disclosed. Persons skilled in the relevant artcan appreciate that many modifications and variations are possible in light of the above disclosure. Some portions of this description describe the embodiments of the invention in terms of algorithms and symbolic representations of operations on information. These algorithmic descriptions and representations are commonly used by those skilledin the data processing arts to convey the substance of their work effectively to others skilled in the art. These operations, while described functionally, computationally, or logically, are understood to be implemented by computer programs orequivalent electrical circuits, microcode, or the like. Furthermore, it has also proven convenient at times, to refer to these arrangements of operations as modules, without loss of generality. The described operations and their associated modules maybe embodied in software, firmware, hardware, or any combinations thereof. Any of the steps, operations, or processes described herein may be performed or implemented with one or more hardware or software modules, alone or in combination with other devices. In one embodiment, a software module is implemented with acomputer program product comprising a computer-readable medium containing computer program code, which can be executed by a computer processor for performing any or all of the steps, operations, or processes described. Embodiments of the invention may also relate to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes, and/or it may comprise a general-purpose computing device selectivelyactivated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a non-transitory, tangible computer readable storage medium, or any type of media suitable for storing electronic instructions, which may becoupled to a computer system bus. Furthermore, any computing systems referred to in the specification may include a single processor or may be architectures employing multiple processor designs for increased computing capability. Embodiments of the invention may also relate to a product that is produced by a computing process described herein. Such a product may comprise information resulting from a computing process, where the information is stored on a non-transitory,tangible computer readable storage medium and may include any embodiment of a computer program product or other data combination described herein. Finally, the language used in the specification has been principally selected for readability and instructional purposes, and it may not have been selected to delineate or circumscribe the inventive subject matter. It is therefore intended thatthe scope of the invention be limited not by this detailed description, but rather by any claims that issue on an application based hereon. Accordingly, the disclosure of the embodiments of the invention is intended to be illustrative, but not limiting,of the scope of the invention, which is set forth in the following claims."
44|http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=60&p=2&f=G&l=50&d=PTXT&S1=(python.CLTX.+or+python.DCTX.)&OS=ACLM/python&RS=ACLM/python|Pattern modeling methods and systems|A list of constructs is displayed on a user interface screen for a user to select a desired construct. A construct selected by the user is determined. Computing environments are presented on the user interface screen for the user to place the selected construct. The computing environments include at least one textual and at least one graphical computing environment. A selected computing environment into which the selected construct is being placed is identified. A position of the placed construct in the selected computing environment is determined. A template based on the selected computing environment is selected. The selected template is inserted into the selected computing environment.|"1. A computer-implemented method for inserting content into a model using a design tool, the method comprising: displaying, by a computer, a list of user-selectableconstruct icons on a user interface screen of the design tool, the construct icons associated with constructs; determining, by the computer, a construct icon selected by the user; displaying, by the computer, a plurality of computing environmentinterface screens able to receive the selected construct icon, the plurality of computing environment interface screens being simultaneously displayed on the user interface screen of the design tool and associated with a plurality of computingenvironments including at least one textual computing environment and at least one graphical computing environment; receiving, by the computer, a selection of a selected computing environment interface screen from the plurality of computing environmentinterface screens into which the construct associated with the user selected construct icon is placed; identifying, by the computer, a selected computing environment from the plurality of computing environments, wherein the selected computingenvironment is associated with the selected computing environment interface screen; determining, by the computer, a position of the placed construct in the selected computing environment; selecting, by the computer, a template based on the selectedcomputing environment and the placed construct; and inserting, by the computer, the selected template into the selected computing environment at the determined position in the selected computing environment. 2. The method according to claim 1, wherein the textual computing environment includes at least one of a C environment, a Python environment, a Javascript environment, an Octave environment, a dynamically typed language environment, or HardwareDescription Language environment, and the graphical computing environment includes at least one of a time-based graphical modeling environment, a block-based environment, a chart-based environment, a state-based diagram environment, a data flow diagramenvironment, an entity flow network diagram environment, an electronic design automation environment, a Schematic Layout environment, or a Unified Modeling Language environment. 3. The method according to claim 1, wherein the construct includes computer-readable medium encoded with at least one of: IF-END-IF, IF-cascade of ELSE IF-END IF, SWITCH condition--cascade of CASE, DO-WHILE loop, REPEAT-UNTIL loop,Proportional-Integral-Derivative controller, Proportional-Integral controller, Proportional-Derivative controller, Integral-Derivative controller, Proportional controller, Derivative controller, Integral controller, IF-nested IF condition-nested IFcondition-END IF-END IF, FOR loop, SIMPLE STATE MACHINE, TOP LEVEL ARCHITECTURE, IF-THEN-ELSE-IF, IF-THEN-IF, IF-THEN, IF-THEN-ELSE, IF, cascade of IF-THEN, FOR-WHILE, FOR-loop, WHILE-loop, parameterized construct, case, combination of logical signals,vector signals, conditions, conditions with subconditions, UNLESS conditions, algorithmic components, physical systems, physical subsystems, or conditions which are visually separated. 4. The method according to claim 1, further comprising: creating a construct based on a user input; storing the construct in the design tool; creating a second construct icon that corresponds to the created construct; and displaying thesecond construct icon corresponding to the created construct in the list of constructs on the user interface screen. 5. The method according to claim 4, further comprising: at least one of exporting or importing the created construct among selected client computers; and sharing the created construct by users of the selected computers. 6. The method according to claim 5, further comprising: automatically updating design tools of the selected client computers with the created construct. 7. The method according to claim 6, further comprising: automatically updating a list of constructs of a user interface screen associated with each selected computer with the second construct icon; and displaying the second construct icon inthe updated list of constructs of the user interface screen of each selected computer. 8. A method for designing models, comprising at least one of: downloading software to a computer system, which software, when executed by the computer system, causes the computer system to perform operations comprising the method of claim 1; or providing downloadable software to a computer system, which software, when executed by the computer system, causes the computer system to perform operations comprising the method of claim 1. 9. At least one non-transitory computer-readable medium comprising software that, when executed by a computer, causes the computer to perform operations for designing models with a design tool, the at least one computer-readable mediumcomprising: one or more instructions for displaying a list of user-selectable construct icons on a user interface screen of the design tool, the construct icons associated with constructs; one or more instructions for determining a construct iconselected by the user; one or more instructions for presenting a plurality of computing environment interface screens able to receive the selected construct icon, the plurality of computing environment interface screens being simultaneously displayed onthe user interface screen of the design tool and associated with a plurality of computing environments including at least one textual computing environment and at least one graphical computing environment; one or more instructions for receiving aselection of a selected computing environment interface screen from the plurality of computing environment interface screens into which the construct associated with the user selected construct icon is placed; one or more instructions for identifying aselected computing environment from the plurality of computing environments based on the selected computing environment interface screen; one or more instructions for determining a position at which the selected construct is placed into the selectedcomputing environment; one or more instructions for selecting a template based on the selected computing environment and the placed construct; and one or more instructions for inserting the selected template into the selected computing environment atthe determined position in the selected computing environment. 10. The at least one non-transitory computer-readable medium according to claim 9, wherein the textual computing environment includes at least one of a C environment, a Python environment, a Javascript environment, an Octave environment, adynamically typed language environment, or Hardware Description Language environment and the graphical computing environment includes at least one of a time-based graphical modeling environment, a block-based environment, a chart-based environment, astate-based diagram environment, a data flow diagram environment, an entity flow network diagram environment, an electronic design automation environment, a Schematic Layout environment, or a Unified Modeling Language environment. 11. The at least one non-transitory computer-readable medium according to claim 9, wherein the construct includes at least one of: IF-END-IF, IF-cascade of ELSE IF-END IF, SWITCH condition--cascade of CASE, DO-WHILE loop, REPEAT-UNTIL loop,Proportional-Integral-Derivative controller, Proportional-Integral controller, Proportional-Derivative controller, Integral-Derivative controller, Proportional controller, Derivative controller, Integral controller, IF-nested IF condition-nested IFcondition-END IF-END IF, FOR loop, SIMPLE STATE MACHINE, TOP LEVEL ARCHITECTURE, IF-THEN-ELSE-IF, IF-THEN-IF, IF-THEN, IF-THEN-ELSE, IF, cascade of IF-THEN, FOR-WHILE, FOR-loop, WHILE-loop, parameterized construct, case, combination of logical signals,vector signals, conditions, conditions with subconditions, UNLESS conditions, algorithmic components, physical systems, physical subsystems, or conditions which are visually separated. 12. The at least one non-transitory computer-readable medium according to claim 9, further comprising: one or more instructions for creating a construct based on a user input; one or more instructions for storing the construct in the designtool; one or more instructions for creating a second construct icon which corresponds to the created construct; and one or more instructions for displaying the second construct icon corresponding to the created construct in the list of constructs onthe user interface screen. 13. The at least one non-transitory computer-readable medium according to claim 12, further comprising: one or more instructions for at least one of exporting or importing the created construct among selected client computers. 14. The at least one non-transitory computer-readable medium according to claim 13, wherein one or more instructions for at least one of exporting and importing the created construct comprises: one or more instructions for automaticallyupdating design tools of the selected client computers with the created construct. 15. The at least one non-transitory computer-readable medium according to claim 14, further comprising: one or more instructions for automatically updating a list of constructs of a user interface screen associated with each selected computerwith the created second construct icon; and one or more instructions for displaying the created second construct icon in the updated list of constructs of the user interface screen of each selected computer. 16. A system for designing models, comprising: a display device which displays a list of user-selectable construct icons on a user interface screen, the construct icons associated with constructs and a plurality of computing environmentinterface screens able to receive the selected construct icon, the plurality of computing environment interface screens being simultaneously displayed on the user interface screen and associated with a plurality of computing environments including atleast one textual computing environment and at least one graphical computing environment; one or more computing systems programmed to perform the following: determining a construct selected by the user; receiving a selection of a selected computingenvironment interface screen from the plurality of computing environment interface screens into which the construct associated with the user selected construct icon is placed; identifying a selected computing environment from the plurality of computingenvironments, wherein the selected computing environment is associated with the selected computing environment interface screen; determining a position at which the construct is placed into the selected computing environment; selecting a template basedon the selected computing environment and the placed construct; and inserting the selected template into the selected computing environment at the determined position and interconnecting the inserted construct with content of the selected computingenvironment at the position of insertion. 17. The system according to claim 16, wherein the textual computing environment includes at least one of a C environment, a Python environment, a Javascript environment, an Octave environment, a dynamically typed language environment, orHardware Description Language environment and the graphical computing environment includes at least one of a time-based graphical modeling environment, a block-based environment, a chart-based environment, a state-based diagram environment, a data flowdiagram environment, an entity flow network diagram environment, an electronic design automation environment, a Schematic Layout environment, or a Unified Modeling Language environment. 18. The system according to claim 16, wherein the construct includes at least one of: IF-END-IF, IF-cascade of ELSE IF-END IF, SWITCH condition--cascade of CASE, DO-WHILE loop, REPEAT-UNTIL loop, Proportional-Integral-Derivative controller,Proportional-Integral controller, Proportional-Derivative controller, Integral-Derivative controller, Proportional controller, Derivative controller, Integral controller, IF-nested IF condition-nested IF condition-END IF-END IF, FOR loop, SIMPLE STATEMACHINE, TOP LEVEL ARCHITECTURE, IF-THEN-ELSE-IF, IF-THEN-IF, IF-THEN, IF-THEN-ELSE, IF, cascade of IF-THEN, FOR-WHILE, FOR-loop, WHILE-loop, parameterized construct, case, combination of logical signals, vector signals, conditions, conditions withsubconditions, UNLESS conditions, algorithmic components, physical systems, physical subsystems, or conditions which are visually separated. 19. The system according to claim 16, wherein the one or more computing systems are further programmed to perform the following: creating a construct based on a user input; storing the construct; creating a second construct icon whichcorresponds to the created construct; and displaying the second construct icon corresponding to the created construct in the list of constructs on the user interface screen. 20. The system according to claim 19, wherein the one or more computing systems are further programmed to perform at least one of exporting or importing the created construct among selected client computers. 21. The system according to claim 20, wherein the exporting and importing automatically updates selected client computers with the created construct and displays the created construct icon on selected client computers. 22. A system for designing models, comprising: a graphical user interface which displays a list of user-selectable construct icons, the construct icons associated with constructs; and a processor which is programmed to perform steps of:presenting the list of construct icons on the graphical user interface, determining the construct icon selected by the user, displaying a plurality of computing environment interface screens on the graphical user interface, the computing environmentinterface screens are able to receive the selected construct icon, the plurality of computing environment interface screens being simultaneously displayed and associated with a plurality of computing environments including at least one textual computingenvironment and at least one graphical computing environment, receiving, a selection of a selected computing environment interface screen from the plurality of computing environment interface screens into which the construct associated with the userselected construct icon is placed, identifying a computing environment from the plurality of computing environments, wherein the selected computing environment is associated with the selected computing environment interface screen the construct,determining a position of the placed construct in the selected computing environment, selecting a template based on the selected computing environment and the placed construct, inserting the selected template into the selected computing environment atthe determined position in the selected computing environment, interconnecting the selected template with content of the selected computing environment at the position of insertion, and displaying the designed model on the graphical user interface. Description BACKGROUND The following relates to model-based systems development. More particularly, the following relates to systems modeling patterns in textual and graphical computing environments. It is to be appreciated, however, that the following may beapplicable to other computing environments, computing systems and the like. Many organizations are employing the practice of specifying, simulating, analyzing, verifying, validating and implementing systems using a model of system behavior. System implementation typically consists of automatically generating code forportions of the model, particularly portions corresponding to the system's control and signal and image processing algorithms. Modeling environments may refer to computing environments that enable a user to construct and analyze a model of a process or system. Model-based design tools included within the modeling environments and features of the model design tools mayprovide techniques for users to approach the modeling process. Some users may find these model-based design tools unsatisfactory, especially in complex modeling environments. In addition, existing model-based design tools may make models difficult tounderstand and/or maintain, which may lead to inefficient system implementation.BRIEF DESCRIPTION In one embodiment, content may be inserted into a model using a design tool. A list of constructs is displayed on a user interface screen for a user to select a desired construct. A construct selected by the user is determined. Computingenvironments are presented on the user interface screen for the user to place the selected construct. The computing environments include at least one textual and at least one graphical computing environment. A selected computing environment into whichthe selected construct is being placed is identified. A position of the placed construct in the selected computing environment is determined. A template based on the selected computing environment is selected. The selected template is inserted intothe selected computing environment. In another embodiment, a system may be implemented for designing models. A means presents a list of constructs on a user interface screen for a user to select a desired construct. A means determines a construct selected by the user. A meansidentifies a selected computing environment into which the selected construct is being placed, the computing environment being selected from at least one textual and at least one graphical computing environments. A means determines a position at whichthe construct is placed into the selected computing environment. A means for selecting a template based on the selected computing environment. A means inserts the selected template into the selected computing environment at the determined position andinterconnects the inserted construct with content of the selected computing environment at the position of insertion. BRIEF DESCRIPTION OF THE DRAWINGS Various embodiments of the present application will be understood and appreciated more fully from the following detailed description, taken in conjunction with the drawings, in which: FIG. 1A is a diagrammatic illustration of an exemplary modeling system according to an exemplary embodiment; FIG. 1B is a diagrammatic illustration of exemplary multiple computing layers according to an exemplary embodiment; FIG. 1C is a diagrammatic illustration of an exemplary construct according to an exemplary embodiment; FIG. 1D is a diagrammatic illustration of another exemplary construct according to an exemplary embodiment; FIG. 1E is a diagrammatic illustration of another exemplary construct according to an exemplary embodiment; FIG. 1F is a diagrammatic illustration of another exemplary construct according to an exemplary embodiment; FIG. 2A is a diagrammatic illustration of a detailed portion of the modeling system according to an exemplary embodiment; FIG. 2B is a diagrammatic illustration of an exemplary display screen according to an exemplary embodiment; FIG. 3 is a flow diagram of an exemplary data modeling method according to an exemplary embodiment; FIG. 4A is a diagrammatic illustration of an exemplary modeling system according to an exemplary embodiment; FIG. 4B is a diagrammatic illustration of an exemplary display screen according to an exemplary embodiment; FIG. 4C is a diagrammatic illustration of an exemplary display screen according to an exemplary embodiment; FIG. 4D is a diagrammatic illustration of an exemplary display screen according to an exemplary embodiment; and FIG. 5 is a diagrammatic illustration of a computer system for use with the exemplary embodiments.DEFINITIONS In the following description, the following definitions are applicable throughout (including above). A ""computer"" may refer to one or more apparatus and/or one or more systems that are capable of accepting a structured input, processing the structured input according to predetermined rules, and producing results of the processing as output. Examples of a computer may include: a computer; a stationary and/or portable computer; a computer having a single processor, multiple processors, or multi-core processors, which may operate in parallel and/or not in parallel; a general purpose computer;a supercomputer; a mainframe; a super mini-computer; a mini-computer; a workstation; a micro-computer; a server; a client; an interactive television; a web appliance; a telecommunications device with internet access; a hybrid combination of a computerand an interactive television; a portable computer; a personal digital assistant (PDA); a portable telephone; application-specific hardware to emulate a computer and/or software, such as, for example, a digital signal processor (DSP), afield-programmable gate array (FPGA), a general graphics processor (GPA), a graphics processing unit (GPU), a general purpose processors (GPP), an application specific instruction-set processor (ASIP), an application specific integrated circuit (ASIC),an embedded processor, a chip, chips, a system on a chip, multi-processor system on chip (MPSoC), or a chip set; a data acquisition device; an optical computer; and an apparatus that may accept data, may process data in accordance with one or more storedsoftware programs, may generate results, and typically may include input, output, storage, arithmetic, logic, and control units. ""Software"" may refer to predetermined rules to operate a computer. Examples of software may include: software; code segments; instructions; applets; pre-compiled code; interpreted code; compiled code; computer programs; and programmed logic. A ""computer-readable medium"" may refer to any storage device used for storing data accessible by a computer. Examples of a computer-readable medium may include: a magnetic hard disk; a floppy disk; an optical disk, such as a CD-ROM and a DVD; amagnetic tape; a flash removable memory; a memory chip; and/or other types of media that can store machine-readable instructions thereon. A ""computer system"" may refer to a system having one or more computers, where each computer may include a computer-readable medium embodying software to operate the computer. Examples of a computer system may include: a distributed computersystem for processing information via computer systems linked by a network; two or more computer systems connected together via a network for transmitting and/or receiving information between the computer systems; and one or more apparatuses and/or oneor more systems that may accept data, may process data in accordance with one or more stored software programs, may generate results, and typically may include input, output, storage, arithmetic, logic, and control units. A ""network"" may refer to a number of computers and associated devices that may be connected by communication facilities. A network may involve permanent connections such as cables or temporary connections such as those made through telephone orother communication links. A network may further include hard-wired connections (e.g., coaxial cable, twisted pair, optical fiber, waveguides, etc.) and/or wireless connections (e.g., radio frequency waveforms, free-space optical waveforms, acousticwaveforms, etc.). Examples of a network may include: an internet, such as the Internet; an intranet; a local area network (LAN); a wide area network (WAN); and a combination of networks, such as an internet and an intranet. Exemplary networks mayoperate with any of a number of protocols, such as Internet protocol (IP), asynchronous transfer mode (ATM), and/or synchronous optical network (SONET), user datagram protocol (UDP), IEEE 802.x, etc. A ""modeling environment"" may refer to a graphical application where a model may be translated into executable instructions. A ""computing environment context"" may refer to circumstances under which a device or system is used or a metadata about items created externally. Such metadata may include resources, events, etc. about items.DETAILED DESCRIPTION Exemplary embodiments are described in detail below. While specific exemplary embodiments are discussed, it should be understood that this is done for illustration purposes only. In describing and illustrating the exemplary embodiments,specific terminology is employed for the sake of clarity. However, the following is not intended to be limited to the specific terminology so selected. A person skilled in the relevant art will recognize that other components and configurations may beused without parting from the spirit and scope of the application. It is to be understood that each specific element includes all technical equivalents that operate in a similar manner to accomplish a similar purpose. The examples and embodimentsdescribed herein are non-limiting examples. According to the exemplary embodiments, a design tool includes a palette of constructs or patterns. The pattern palette may be predefined by a system administrator, created by a user, and/or modified by the user. The design tool isimplementation dependent and operates across various types of computing environments such as text-based, graphics-based, etc. The design tool further operates above particular typical model types (text, graphical, etc.) The patterns automatically take onan appropriate form for the context of the particular computing environment they are used in. Such design tool relieves the user from having to keep track of things and makes models easier to understand and create. With reference to FIG. 1A, an exemplary model designing system 100 includes an exemplary computer 110 which may include a bus 112, a processor 114, a computer-readable medium or memory 116, a read only memory (ROM) 118, a storage device 120, aninput device 122, an output device 130, and a communication interface 132. The bus 112 may include one or more interconnects that permit communication among the components of the computer 110. The processor 114 may include any type of processor, microprocessor, multi-core processor, or processing logic that mayinterpret and execute instructions. The memory 116 may include a random access memory (RAM) or another type of dynamic storage device that may store information and instructions for execution by the processor 114. The memory 116 may also be used tostore temporary variables or other intermediate information during execution of instructions by the processor 114. The ROM 118 may include a ROM device and/or another type of static storage device that may store static information and instructions for the processor 114. The storage device 120 may include a magnetic disk and/or optical disk and itscorresponding drive for storing information and/or instructions. The storage device 120 may include a single storage device or multiple storage devices, such as multiple storage devices operating in parallel. Moreover, the storage device 120 may residelocally on the computer 110 and/or may be remote with respect to the computer 110 and connected thereto via a network and/or another type of connection, such as a dedicated link or channel. For example, the storage device 120 may store code 140 for theoperating system (OS) of the computer 110, code 150 for applications running on the operation system including modeling applications such as a design tool 152, a textual or text-based computing environment 154, a graphical or graphics-based computingenvironment 156, and a model database 160 to store the models created with the design tool 152. The input device 122 may include any mechanism or combination of mechanisms that permit an operator or user to input information to the computer 110, such as a keyboard, a mouse, accelerometer and gyroscope based input devices, neuro-basedinterface devices, a touch sensitive display device, a microphone, a pen-based pointing device, and/or a biometric input device, such as a voice recognition device and/or a finger print scanning device. The computer 110 may receive through the inputdevice 122 input data necessary for creating patterns and models in one of the computing environments 154, 156 with the design tool 152. The output device 130 may include any mechanism or combination of mechanisms that outputs information to the operator, including a display, a printer, a speaker, etc. The computer 110 may display on the display 130 a user interface screen orscreens such as a design tool bar window or screen 170 interfaced with the design tool 152, a textual or text-based computing environment screen 172 interfaced with the textual computing environment 154, and a graphical or graphics-based computingenvironment screen 174 interfaced with the graphical computing environment 156. With continuing reference to FIG. 1A, constructs or patterns 176 may be predefined by a user or a system administrator for each computing environment context and stored in a constructs memory 178. The constructs 176 may be displayed as a list180 or palette of associated construct icons 182 in the tool bar window 170. As described in detail below, the users may modify the constructs 176, construct icons 182 or the list 180 of construct icons 182. For example, the users may add, delete,rename, import or export the constructs 176 or construct icons 182. The users may organize the list 180 of constructs 182 in accordance with their preferences. With continuing reference to FIG. 1A and further reference to FIG. 1B, an exemplary model designing system 100 may include multiple layers, e.g. computing layers. The model designing system 100 may include the textual and graphical environments152, 154 illustrated as first and second layers 184, 186. A third layer 188 may be a transformation layer. A fourth layer 190 may be the design tool 152. In an exemplary embodiment, the design tool 152 may be a standalone graphical application whichmay include a floating bar window. The transformation layer may transform the construct icons 182 as the construct icons 182 pass through the transformation layer and into one of the first and second layer 184, 186. A layer may be added in betweenexisting layers. Further, the order of two or more layers may be switched. One or more layers may be switched to an on- or off-state. The layer may be locked to prevent changes to the layer, or unlocked to allow changes to the layer. The layer 182,184 may have one or more windows cut out of it, such as a window 191 in the second layer 186. With continuing reference to FIG. 1A, an example of the textual computing environment 154 includes a text-based computing environment such as a computer script language such as MATLAB.RTM. by The MathWorks, Inc. of Natick, Mass. TheMATLAB.RTM. is a high-performance language for technical computing. It integrates computation, visualization, and programming in one environment where problems and solutions are expressed in familiar mathematical notation. MATLAB.RTM. employs amatrix-based mathematical programming language which can operate on numeric arrays of vectors and matrices, character arrays, cell arrays, etc. Another example of the text-based environment includes a Hardware Description Language (HDL) which is a standard text-based expression of a temporal behaviour and/or (spatial) circuit structure of an electronic system. An HDL's syntax andsemantics include explicit notations for expressing time and concurrency which are the primary attributes of hardware. HDL may be used to write executable specifications of a piece of hardware. For exmaple, a simulation program, designed to implementthe underlying semantics of the language statements, coupled with simulating the progress of time, may provide the hardware designer with the ability to model a piece of hardware before it is created physically. Other examples of the text-based environment include C code, Python script, Javascript script, hardware description language, and Octave. The examples of the graphical computing environment 156 may include graphical modeling environments such as a block-based SIMULINK.RTM. and a chart-based STATEFLOW.RTM. by The MathWorks, Inc. of Natick, Mass. The SIMULINK.RTM. andSTATEFLOW.RTM. are software packages that enable the user to model, simulate, and analyze systems whose outputs change over time using the block diagrams or charts. Such systems are often referred to as dynamic systems. The SIMULINK.RTM. andSTATEFLOW.RTM. can be used to explore the behavior of a wide range of real-world dynamic systems, including electrical circuits, shock absorbers, braking systems, and many other electrical, mechanical, fluid, thermodynamic, quantum and biological/lifesystems. Block diagrams and charts are graphical entities having an ""executable meaning"" that are created within the modeling computing environment for modeling a dynamic system, and generally comprise one or more graphical objects. For example, a block diagram model of a dynamic system is represented schematically as a first collection of graphical objects, such as nodes, that are interconnected by another set of graphical objects, generally illustrated as lines, whichrepresent logical or physical connections or decision/process flow between the first collection of graphical objects. The line segments are often referred to as ""signals"". Signals correspond to the time-varying quantities represented by each lineconnection and have values at each time instant and are not electromagnetic signals. A signal can be read from a location and stored at another location. Each node may represent an elemental dynamic system, component or algorithm, and the relationshipsbetween signals and state variables may be defined by computations, sets of equations, etc. represented by the nodes Inherent in the definition of the relationship between the signals and the state variables is the notion of parameters, which are thecoefficients of the equations. The equations define a relationship between the input signals, output signals, state, and time, so that each line represents the input and/or output of an associated elemental dynamic system. A line emanating at one nodeand terminating at another signifies that the output of the first node is an input to the second node. The source node of a signal writes to the signal at a given time instant when its system equations are solved. The destination nodes of this signalread from the signal when their system equations are being solved. Those skilled in the art will recognize that the term ""nodes"" does not refer exclusively to elemental dynamic systems but may also include other modeling elements that aid in readabilityand modularity of block diagrams. The STATEFLOW.RTM. charts are graphical diagrams used to capture behavior of reactive systems and processes. The data flow blocks are block diagrams that describe a graphical programming paradigm where the availability of data may be used toinitiate the execution of blocks, where a block represents an operation and a line represents execution dependency describing the direction of data flowing between blocks. For example, in a model of a physical system, the blocks may represent physicalentities such as gears, bodies, joints, pipes and the like, and the lines represent physical connection between the physical entities. The techniques and exemplary embodiments described herein may be embodied in various user interfaces, graphical models, modeling environment, and technical computing environments, including state-based and flow diagram environments, data flowdiagram environments, entity flow network diagrams, electronic design automation (EDA) environments, Schematic Layout environments, and Unified Modeling Language (UML) environments, such as those using software products of LabVIEW.RTM. or MATRIX fromNational Instruments, Inc. of Austin, Tex., Virtuoso, Incisive, or Encounter from Cadence of San Jose, Calif., Dymola from Dynasim AB of Lund, Sweden, SystemView from Elanix of Norcross, Ga., MATHEMATICA.RTM. from Wolfram Research, Inc. of Champaign,Ill., MATHCAD.RTM. from Mathsoft Engineering & Education Inc. of Cambridge, Mass., MAPLE.TM. from Maplesoft, a division of Waterloo Maple Inc. of Waterloo, Ontario of Canada, GALAXY.TM. or DISCOVERY.TM. from Synopsis, Inc. of Mountain View,Calif., Design Architect, Questa, or Board Station from Mentor Graphics Corp. of Wilsonville, Oreg., Rose from International Business Machine Corporation of Armonk, N.Y., Rhapsody from I-Logix, Inc. of Andover, Mass., or Artisan from Artisan SoftwareTools, Inc. of Beaverton, Oreg. and the like. With reference to FIG. 1C, an illustrated exemplary construct template IF-END IF 194 is predefined by the user or system administrator as a pattern of blocks for the graphical modeling or computing environment. With reference to FIG. 1D, an illustrated exemplary construct template IF-END IF 196 is predefined by the user or system administrator as a flowchart for the graphical modeling or computing environment. With reference to FIG. 1E, an illustrated exemplary construct template IF-END IF 198 is predefined by the user or system administrator as text for the text-based modeling or computing environment. With reference to FIG. 1F, an illustrated exemplary construct template TOP LEVEL ARCHITECTURE 199 is predefined by the user or system administrator for the graphical modeling or computing environment. Other examples of the constructs, which may be predefined by the user, include IF-cascade of ELSE IF-END IF, SWITCH condition--cascade of CASE, DO-WHILE loop, REPEAT-UNTIL loop, IF-nested IF condition-nested IF condition-END IF-END IF, FOR loop,SIMPLE STATE MACHINE, IF-THEN-ELSE-IF, IF-THEN-IF, IF-THEN, IF-THEN-ELSE, IF, cascade of IF-THEN, FOR-WHILE, FOR-loop, WHILE-loop, case, combination of logical signals, vector signals, conditions, conditions with subconditions, conditions which arevisually separated, UNLESS conditions, a proportional-integral-derivative (PID) controller, a proportional-integral (PI) controller, a proportional-derivative (PD) controller, an integral-derivative (ID) controller, a proportional (P) controller, aderivative (D) controller, first order through nth order filters as well as other kind of filters, joints, arms, masses, pipes, pressure vessels and combinations thereof, etc. The constructs may include parameterized constructs. For example, for aSWITCH construct, the user may be queried for a number of cases. The communication interface 132 may include any transceiver like mechanism that enables the computer 110 to communicate with other devices and/or systems, such as client computers. For example, the communication interface 132 may include one ormore interfaces. Alternatively, the communication interface 132 may include other mechanisms for communicating via a network, such as a wireless network. In one implementation, the communication interface 132 may include logic to send code to adestination device, such as a target device that can include general purpose hardware (e.g., a personal computer form factor), dedicated hardware (e.g., a digital signal processing (DSP) device or a field programmable gate array (FPGA) adapted to executea compiled version of a model or a part of a model), etc. The computer 110 may perform certain functions in response to the processor 114 executing software instructions included in the computer-readable medium, such as memory 116. A computer-readable medium may be defined as one or more memorydevices. In alternative embodiments, hardwired circuitry may be used in place of or in combination with software instructions to implement features consistent with principles of the exemplary embodiments. Thus, implementations consistent withprinciples of the application are not limited to any specific combination of hardware circuitry and software. With continuing reference to FIG. 1A and further reference to FIG. 2A, the user may select the construct icon 182 on the design tool screen 170 with the input device 122 and place the selected construct icon 182 into the computing environmentinterface screen 172, 174 associated with the desired computing environment such as the textual computing environment 154 or graphical computing environment 156. For example, the user may click with the input device, such as the mouse 122, on theconstruct icon 182 associated with a respective construct 176 within, for example, a list of construct icons 182 displayed in the design tool bar window 170, may select an appropriate entry from a pull down menu, and the like. The user may drag theselected construct icon 182 with the mouse 122, release the mouse 122 and drop the dragged construct icon 182 into one of the computing environment interface screens 172, 174 which each interfaces with a respective one of the computing environments 154,156. A monitor 220 may monitor the design tool bar window 170, detect that the construct icon 182 is selected and dropped into one of the computing environment interface screens 172, 174. More specifically, a construct determining mechanism, device,algorithm, processor, software module, or other means 230 may determine a type of a construct 176 associated with the selected construct icon 182 and placed by the user into the computing environment screen 172, 174. A computing environment determining mechanism, device, algorithm, processor, software module, or other means 240 may determine a type of the computing environment into which the user dropped the selected construct icon 182. A positiondetermining mechanism, device, algorithm, processor, software module, or other means 250 may determine a position into which the construct icon 182 is dropped. A template selector, mechanism, device, algorithm, processor, software module, or other means258 may select an appropriate template based on the determined type of the selected computing environment 154, 156 and/or other criteria such as preferred style which may be entered by the user or selected automatically based on user identification. With reference to FIG. 2B, the user may select a construct icon 260 representing and associated, for example, with a construct ""DO-WHILE"". For example, if the user drops the selected construct icon 260 into a text-based modeling or computingenvironment screen 262, a corresponding template including text ""DO-WHILE"" 264 is selected. If the user drops the selected construct icon 260 into a block-based graphical modeling or computing environment screen 266, a corresponding template includingblock diagram 268 representing the construct ""DO-WHILE"" is selected. If the user drops the selected construct icon 260 into a chart-based graphical modeling or computing environment screen 270, a corresponding template including a flowchart 272representing the construct ""DO-WHILE"" is selected. With reference again to FIG. 2A, a template inserter, mechanism, device, algorithm, processor, software module, or other means 280 may insert the selected template at the determined position in the computing environment 154, 156 with theknowledge of context. After the model is created in the manner described above, time-dependent mathematical relationships among the selected system's inputs, states, and outputs may be determined. The system further may be simulated from a specifiedstart time to a specified stop time. The deployable software systems or descriptions of hardware systems that mimic the behavior of either the entire model or portions of the model may be produced. With reference again to FIG. 1A and further reference to FIG. 3, the user may select 310 the construct icon 182 on the design tool bar window 170 with the mouse 122. The user may drag 320 the selected construct icon 182 into a selectedcomputing environment interface screen 172, 174. A type of the construct 176 associated with the selected construct icon 182 may be determined 322. The user may drop 330 the dragged construct icon 182 into the selected computing environment interfacescreen 172, 174 which interfaces with respective textual or graphical computing environment 154, 156. A position of the dropped construct icon 182 may be determined 340. A type of the selected computing environment 154, 156 may be determined 350. Atemplate, corresponding to the selected construct and selected computing environment, may be selected 360. The selected template may be inserted 370 in the position of determined construct icon drop. With continuing reference to FIG. 1A and further reference to FIG. 4A, first second, third, . . . , Nth client computers 400, 410, 420, 430 of selected users may be interconnected through a network 440. For example, the selected users all areemployees of the same entity such as a corporation or the same department within the entity. Each client computer 400, 410, 420, 430 is embodied similarly to the computer 110 of FIG. 1A and includes at least the components of the computer 110 asdescribed above. A construct creating mechanism, device, algorithm, processor, software module, or other means 442 facilitates modifications of the design tool 152 and design tool bar window 170 based, for example, on a user input. With continuing reference to FIGS. 1A and 4A and further reference to FIGS. 4B and 4C, the user may create or modify the constructs 176, construct icons 182, or the constructs palette 180. The user may build a new construct using the existentconstructs. The construct palette 180 may display first icon or icons 452 for the predefined constructs and second icon or icons 454 for user created constructs. For example, the user may add, delete, rename, or export the constructs. The user mayclick on a pattern icon, button, wizard or window 460 which may guide the user through the pattern building steps. For example, the user may be presented with a pull down menu, windows or icons to select a computing environment in which the user prefersto build a new pattern. The icons may include a block icon 462 for the block-based graphical modeling or computing environment, a flowchart icon 464 for the chart-based graphical modeling or computing environment, or a text icon 466 for the text-basedmodeling or computing environment. The user may select the block icon 462 to build the new pattern as a block diagram in the block-based graphical modeling or computing environment. A block screen or window 470 may be displayed. The user may create anew pattern 472 on the block screen 470 by using the mouse 122. The user may associate the created pattern 472 with a construct icon 474 by dragging the created pattern with the mouse 122 and placing the created pattern 472 on the construct palette 180in the area 454 for the user created constructs. The pattern icon 460 may guide the user to populate other computing environments represented by a flowchart screen or window 476 for the chart-based graphical modeling or computing environment and a textscreen or window 478 for the text-based modeling or computing environment. The user may drag the created construct 472 with the mouse 122 and drop the created construct 472 into the flowchart screen and the text screen 476, 478. The design tool 152 mayrestructure the dropped construct for the appropriate computing environment context. It is contemplated that the construct palette 180 may be organized by the users according to their preferences. In one exemplary embodiment, the user may click on the pattern wizard 460 which may guide the user through the building steps for a pattern template or construct which is independent and different from any computing environment. The design toolmay convert the construct created in such independent environment into a block for the block-based graphical modeling or computing environment, a flowchart for the chart-based graphical modeling or computing environment, or a text for the text-basedmodeling or computing environment depending on into which environment the construct is inserted. The modified or newly created construct may be saved in the design tool 152. For example, when the modifications are made to the design tool 152 and/or the design tool bar window 170 by the user of the first computer 400, an exporting/importingmechanism 480 propagates the modifications to the design tools 152 and/or design tool bar windows 170 of the second, third, and Nth client computers 410, 420, 430. In one embodiment, the design tool 152 and/or design tool bar window 170 of each clientcomputer 410, 420, 430 is updated by broadcasting a message among the client computers 400, 410, 420, 430. In another embodiment, the design tool 152 and/or design tool bar window 170 of each client computer 400, 410, 420, 430 is automatically updatedvia an updating mechanism 482 such as a server using, for example, a push or a pull protocol known in the art. In one embodiment, a host computer may embody the construct creating mechanism 442 to modify the constructs, etc. and/or the exporting/importing mechanism 482 to make newly created constructs available for use by the users of the selectedcomputers. With continuing reference to FIG. 1A and further reference to FIG. 4C, a construct can be created by using a multi-touch sensing or rear-projecting device embodied within the display 130. The user may touch and hold the construct icon 484 andtouch a point 486 in the block screen. Alternatively, this may be a drag and drop operation. A resulting new pattern or construct 488 is illustrated in FIG. 4D. As described above, the newly created construct 488 may be saved in the design tool 152. The construct palette 180 may be updated with an icon 490 corresponding to the newly created construct 488. With reference to FIG. 5, the exemplary embodiment of FIG. 1A may be embodied as a computer system 500 which may include a computer 510. The computer 510 may include a computer readable medium 520 embodying software for implementing the systemsand methods described herein to operate the computer 510. Optionally, the computer system 500 includes a connection 530 to a network 540 for the computer 510 to send and receive information such as software, data, documents and the like from othercomputer systems. The design tool may be embodied in many different ways as a software component. For example, it may be a stand-alone software package, or it may be a software package incorporated as a ""tool"" in a larger software product, such as, for example,a mathematical analysis product or a test generation product. It may be downloadable from a network, for example, a website, as a stand-alone product or as an add-in package for installation in an existing software application. It may also be availableas a client-server software application, or as a web-enabled software application. The methods and tools described above allow the user to drag and drop entire design constructs into the modeling computing environment. The cross environment design tool provides the template functionality based on predefined and customizabledesign patterns seamlessly working across textual and graphical computing environments. Further, the described design tool provides users at-design-time support and guidance to keep their models clean and efficient. Generally, any architectural structure can be utilized, such as multi-core, multi-device (e.g., distributed configurations), LAN events and the like. Certain portions of the exemplary embodiments may be implemented as ""logic"" that performs one or more functions. This logic may include hardware, such as hardwired logic, an application specific integrated circuit, a field programmable gatearray, a microprocessor, software, or a combination of hardware and software. No element, act, or instruction used in the description of the exemplary embodiments should be construed as critical or essential to the exemplary embodiments unless explicitly described as such. Also, as used herein, the article ""a"" isintended to include one or more items. Where only one item is intended, the term ""one"" or similar language is used. Further, the phrase ""based on,"" as used herein is intended to mean ""based, at least in part, on"" unless explicitly stated otherwise. While various embodiments have been described above, it should be understood that they have been presented by way of example only, and not limitation. Thus, the breadth and scope of the described should not be limited by any of theabove-described exemplary embodiments, but should instead be defined only in accordance with the following claims and their equivalents."
45|http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=66&p=2&f=G&l=50&d=PTXT&S1=(python.CLTX.+or+python.DCTX.)&OS=ACLM/python&RS=ACLM/python|Method and device for processing data for generating alarms within a communication network|A data processing device comprises processing module capable of receiving from equipment in a communications network primary data defining events in at least one primary format, and delivering to a management device in the network secondary data defining alarms representing events, in a secondary format. The processing module comprise an interpreter provided with conversion rules, arranged in the form of scripts associated with the various primary event formats, and arranged to convert, using these rules, primary data received in one of the primary formats into secondary data in the secondary format which can be interpreted by the management device.|"1. A data processing device comprising: a display configured to display alarms; a processor configured to receive, from an item of equipment in a communications network,primary data defining events in at least one primary data format and delivering to a management device in said network secondary data defining the alarms representing said events, in a secondary data format, wherein said processor comprises aninterpreter which is provided with a plurality of conversion rules, arranged in the form of scripts that are interpreted by the interpreter and are associated with a plurality of different primary data formats, and arranged so as to convert, by means ofsaid rules, the primary data received in one of said primary data formats into secondary data in said secondary data format which can be processed by said management device, said interpreter further arranged to deduce alarm parameters from certainprimary data received, so as to deliver a parameterized alarm to said management device, wherein, when the alarm state of the item of equipment in the network is unknown, said interpreter is arranged to extract from said item of equipment choseninformation able to allow determination of said alarm state, and then to simulate the sending of primary data representing said state information, so as to generate an alarm intended to indicate to the management device the alarm of said item ofequipment, and wherein each of the plurality of different primary data formats corresponds to a particular script. 2. The device as claimed in claim 1, wherein said interpreter is arranged to make said conversions into a secondary configuration file format by means of an interpreted language. 3. The device as claimed in claim 2, wherein said secondary configuration file format is XML. 4. The device as claimed in claim 2, wherein said interpreted language is selected from a group consisting of JavaScript, Visual Basic, TCL, Perl and Python. 5. The device as claimed in claim 1, wherein, when there are primary data associated respectively with event identifiers, said interpreter is arranged to store at least some of said rules in correspondence with known event identifiers. 6. The device as claimed in claim 5, wherein said interpreter is arranged to store at least one conversion rule defining a default script intended for the primary data associated with an unknown event identifier. 7. The device as claimed in claim 1, wherein said interpreter is arranged to deliver to said management device alarms parameterized by hard coded values. 8. The device as claimed in claim 1, wherein said interpreter is arranged to deliver to said management device alarms parameterized by values extracted from said primary data. 9. The device as claimed in claim 1, wherein said interpreter is arranged to deliver to said management device alarms parameterized by values extracted from the equipment from which it has received the primary data. 10. The device as claimed in claim 1, wherein said interpreter is arranged to extract said chosen information from a management information base of the equipment concerned. 11. The device as claimed in claim 1, wherein said primary data are received in primary formats of the SNMP type. 12. A network management device, comprising a processor which receives, from an item of equipment in a communications network, primary data defining events in at least one primary data format and delivering to a management device in saidnetwork secondary data defining alarms representing said events, in a secondary data format, wherein said processor comprises an interpreter provided with a plurality of conversion rules, arranged in the form of scripts associated with a plurality ofdifferent primary data formats, and arranged so as to convert, by means of said rules, primary data received in one of said primary data formats into secondary data in said secondary data format which can be interpreted by said processor, saidinterpreter further arranged to deduce alarm parameters from certain primary data received, so as to deliver a parameterized alarm to said management device, wherein, when the alarm state of the item of equipment in the network is unknown, saidinterpreter is arranged to extract from said item of equipment chosen information able to allow determination of said alarm state, and then to simulate the sending of primary data representing said state information, so as to generate an alarm intendedto indicate to the management device the alarm of the item of equipment, and wherein each of the plurality of different primary event formats corresponds to a particular script. 13. A data processing method in which, on reception of primary data transmitted by an equipment in a communications network and defining events in at least one primary format, there are delivered to a management device of the network secondarydata defining alarms representing said events, in a secondary format, wherein said method further comprising the step of converting, by means of one of a plurality of conversion rules, arranged in the form of scripts associated with a plurality ofdifferent primary event formats, primary data received in one of said primary formats into secondary data in said secondary format which can be interpreted by said management device, wherein alarm parameters are deduced from certain primary datareceived, so as to deliver a parameterized alarm to said management device, wherein, when the alarm state of an item of an equipment in the network is unknown, there is extracted from said equipment chosen information able to allow determination of saidalarm state, and then the sending of primary data representing said state information is simulated so as to generate an alarm intended to indicate to the management device the alarm state of said equipment, and wherein each of the plurality of differentprimary event formats corresponds to a particular script. 14. The method as claimed in claim 13, wherein conversion step is carried out into a secondary configuration file format by means of an interpreted language. 15. The method as claimed in claim 14, wherein said secondary configuration file format is XML. 16. The method as claimed in claim 14, wherein said interpreted language is selected from a group consisting of JavaScript, VisualBasic, TCL, Perl and Python. 17. The method as claimed in claim 13, wherein, when there are primary data associated respectively with event identifiers, at least some of said conversion rules are associated with known event identifiers. 18. The method as claimed in claim 17, wherein at least one of said conversion rules defines a default script intended for primary data associated with an unknown event identifier. 19. The method as claimed in claim 13, in which alarms parameterized by hard coded values are delivered to said management device. 20. The method as claimed in claim 13, wherein alarms parameterized by values extracted from said primary data are delivered to said management device. 21. The method as claimed in claim 13, wherein there are delivered to said management device alarms parameterized by values extracted from the equipment from which it received primary data. 22. The method as claimed in claim 13, wherein said information or values are extracted from a management information base of the equipment concerned. 23. The method as claimed in claim 13, wherein said primary data are received in primary formats of the SNMP type. 24. A method of managing a communications network, the method comprising the steps of: on reception of primary data transmitted by an item of equipment in the communications network and defining events in at least one primary format, deliveringto a management device of the communications network secondary data defining alarms representing said events, in a secondary format and a parameterized alarm deduced from certain primary data received from the item of equipment, wherein said secondformat is generated by converting, by means of one a plurality conversion rules, arranged in the form of scripts associated with a plurality of primary event formats, primary data received in one of said primary formats into secondary data in saidsecondary format which can be interpreted by said management device, wherein, when the alarm state of the item of equipment in the network is unknown, information is extracted from the item of equipment to allow determination of said alarm state, andsending of primary data representing said state information is simulated so as to generate an alarm intended to indicate to the management device the alarm of said item of equipment, and wherein each of the plurality of different primary event formatscorresponds to a particular script. 25. A method of managing a communications network according to claim 24, wherein the communications network is one of WDM network, a SONET network, an SDH network, an IP network, an ATM network, mobile and an NGN network. 26. The device as claimed in claim 1, wherein said information resides in a management information base of said equipment concerned. 27. The device claimed in claim 1, wherein the alarm state of said equipment is synchronized or resynchronized using said extracted chosen information. 28. The method as claimed in claim 13, wherein said information resides in a management information base of said equipment concerned. 29. The method claimed in claim 13, wherein the alarm state of said equipment is synchronized or resynchronized using said extracted chosen inform. 30. The method claimed in claim 13, wherein the alarm state of said equipment is synchronized or resynchronized in the event of a breakdown of the communications network or in the event of maintenance work. Description FIELD OF THE INVENTION The invention concerns the field of the exchange of data between equipment in a communications network and more particularly the field of the management of events occurring within the said equipment. Communications networks generally comprise a network management device (or NMS, standing for ""Network Management System"") which is supposed to warn the operator when an event occurs in an equipment. More precisely, each time an event occurswithin an item of equipment, or in an apparatus supervised by this equipment, the latter delivers a notification representing the said event. This notification, more usually known by the English expression ""Trap"" when the network management protocol isthe SNMP protocol (standing for ""Simple Network Management Protocol"" RFC 2571-2580), consists of primary data arranged in primary formats (or protocols). On reception of these primary data the NMS manager analyzes the content thereof and then, if itrecognizes the first format, it generates an alarm defined by secondary data arranged in a unique predefined secondary format (or protocol). However, because of their great variety, the items of equipment in a network frequently use different primary exchange formats which are difficult, or even impossible, to modify. Consequently NMS managers can recognize only some of thenotifications which they receive. To attempt to remedy this drawback, it has been proposed to equip the NMS manager with a primary data processing module based either on a format correlation tool or on program codes, or again on configuration files. The first solution, based ona correlation tool, uses processings whose slowness is prohibitive. The second solution, based on program codes, requires very expensive development. Finally, the third solution is not sufficiently flexible to be suitable for situations in which theprimary formats are fairly different, which is generally the case. In addition, these solutions do not generally make it possible to synchronize or resynchronize the alarm state of the equipment at the NMS manager. Consequently no solution proposed isactually satisfactory.SUMMARY OF THE INVENTION The purpose of the invention is therefore to remedy all or some of the aforementioned drawbacks. It proposes for this purpose a data processing device comprising processing means capable of receiving, from equipment in a communications network, primary (or notification) data defining events in at least one primary format and of deliveringto a management device in the network (or NMS manager) secondary data defining alarms representing events, in a secondary format. This device is characterized by the fact that its processing means comprise an interpreter (or ""scripting engine"") provided with conversion rules, arranged in the form of ""scripts"" associated with the various primary event formats, and arrangedso as to convert, by means of these rules, primary data received in one of the primary formats into secondary data in the secondary format which can be interpreted by the management device. Preferentially, the interpreter is arranged to make its conversions in a secondary configuration file format by means of an interpreted language. More preferentially still, the secondary configuration file format is a format of the XML(standing for ""extensible Markup Language"" type--version 1.0 recommended by W3C), and/or the interpreted language is JavaScript (as defined by ECMA-262 ECMAScript: A general purpose, cross-platform programming language). Also preferably, when the primary data are respectively associated with event identifiers, such as for example object identifiers (or OIDs), the interpreter can be arranged so as to store at least some of the configuration rules incorrespondence with known event identifiers. In this case, the interpreter can also be arranged so as to store at least one conversion rule defining a default script intended for the primary data which are associated with an unknown event identifier. Advantageously, the interpreter can be arranged so as to deduce, from certain received primary (or notification) data, alarm parameters enabling it to deliver a parameterized alarm to the management device. In this case, the alarms can beparameterized by ""hard-coded"" values and/or values extracted from primary data, and/or values extracted from an item of equipment. In the latter case, the interpreter must be arranged to extract, from an item of equipment in the network whose alarmstate is unknown (preferably from its management information base or MIB), chosen information representing its alarm state, and then simulate the sending of primary (or notification) data representing this state information, so as to generate an alarmintended to indicate to the management device the alarm state of the equipment. Moreover, the primary data are preferentially received in primary formats of the SNMP type (Internet management protocol). The invention also relates to a network management device (or NMS manager) comprising a processing device of the type presented above. The invention also relates to a data processing method in which, on reception of primary (or notification) data transmitted by equipment in a communications network and defining events in at least one primary format, there are delivered to anetwork management device (or NMS manager) secondary data defining alarms representing events, in a secondary format. This method is characterized by the fact that its generation step consists of converting, by means of conversion rules, arranged in the form of ""scripts"" associated with the various primary event formats, primary data received in one of theprimary formats into secondary data in the secondary format which can be interpreted by the management device. The method according to the invention can comprise any supplementary characteristics which can be taken separately and/or in combination, and in particular: conversion can be carried out in a secondary configuration file format by means of aninterpreted language. It is then preferable for the secondary format of the configuration file to be a format of the XML type, and/or for the interpreted language to be JavaScript; when there are primary data associated respectively with eventidentifiers, at least some of the conversion rules can be associated with known event identifiers. In this case, it is advantageous for at least one of the conversion rules to be defined by a default script intended for primary data associated with anunknown event identifier; certain primary data received can be deduced from the alarm parameters, so as to deliver to the management device an alarm which is parameterized, for example by ""hard-coded"" values and/or values extracted from the primary dataand/or values extracted from an item of equipment; it is possible to extract from an item of equipment in the network, whose alarm state is unknown, chosen information representing its alarm state, and then simulate the sending of primary datarepresenting this state information, so as to generate an alarm intended to indicate to the management device the alarm state of the equipment. This extraction preferentially takes place in the management information base of the equipment concerned; theprimary data are preferentially received in primary formats of the SNMP type. The invention can in particular be implemented in all network technologies which have to be managed, and in particular in transmission networks (for example of the WDM, SONET or SDH type), data networks (for example of the Internet-IP or ATMtype) or voice networks (for example of the conventional, mobile or NGN type). Other characteristics and advantages of the invention will emerge from an examination of the following detailed description, and from the single accompanying FIGURE which schematically illustrates an example embodiment of a device according tothe invention located in an NMS manager of a communications network. This FIGURE is essentially certain in character. Consequently it can not only serve to supplement the invention but also to contribute to its definition, where necessary.DETAILED DESCRIPTION OF THE INVENTION The processing device 1 according to the invention is intended to supply alarms to an NMS (standing for ""Network Management System"") manager 2 in a communications network, for example of the Internet type. In the example illustrated in FIG. 1,this device 1 is located in the NMS manager 2 but could be located in an external box coupled to the said NMS manager. The communications network comprises a multiplicity of network equipment 3, such as for example servers, terminals, switches or routers, able to exchange data with the NMS manager 2 in accordance with a network management protocol. Hereinafter, it is considered by way of non-limiting example that the communications network is of the Internet (IP) type and that the network management protocol is the SNMP protocol (standing for ""Simple Network Management Protocol"" RFC2571-2580). Naturally the invention applies to other types of network, such as for example transmission networks of the WDM, SONET or SDH type, data networks of the ATM type, or voice networks of the conventional, mobile or NGN type, and to othernetwork management protocols, such as for example TL1 or CORBA. The equipment 3 in the network is arranged to deliver to the NMS manager 2 notifications (or messages), here of the ""Trap"" type, defined by primary data arranged in a primary format (orprotocol), here of the SNMP type, whenever an event occurs within them, or in an item of equipment or apparatus which they control. The primary data in a notification consequently define an event which has occurred in an item of equipment 3. Amultiplicity of different primary formats can coexist within the network. Moreover, each notification is preferentially associated with an identifier representing a type of event. The processing device 1 comprises a processing module 4 comprising an interpreter (or ""scripting engine"") 5 having available a multiplicity of conversion rules arranged in the form of ""scripts"" associated with a multiplicity of different primaryevent formats. More precisely, to each primary format there corresponds a particular script (or conversion rule or rules), preferentially stored in a memory 6 in correspondence with one of the event identifiers contained in the notifications (or Traps). It isalso preferable to provide at least one default script for processing (or initiating the processing of) the primary data arranged in a primary format which is associated with an unknown event identifier. Thus, when an interpreter 5 receives a notification (or Trap), it extracts the event identifier therefrom and determines the configuration rule (or script) stored which corresponds to it. It can then apply this script (or rule) to the primarydata defining the notification, so as to generate an alarm defined by secondary data arranged in an interpreted language and in accordance with a unique secondary format which can be interpreted by a control module 7 of the NMS manager 2. In otherwords, the primary data received, arranged in a primary format and representing an event, are ""converted"" into secondary data arranged in a secondary format and in an interpreted language. On reception of such an alarm, the control module 7 of the NMS manager 2 can then cause the display of the alarm on a control screen of the said NMS manager and/or decide on action or actions to be undertaken in the network in order to takeaccount of the alarm and/or remedy its cause. The interpreter 5 is arranged, on reception of the primary data, to generate, by means of the script which corresponds to the primary data received, an alarm defined by secondary data. In a preferential embodiment, these secondary data arearranged in the form of an alarm configuration file in a secondary format (or protocol), preferably of the XML (standing for ""extensible Markup Language"") type, and in an interpreted language (or ""scripting language""), preferably of the JavaScript type(as defined by ECMA-262 ECMAScript: A general purpose, cross-platform programming language). More preferentially still, version 1.0 of the XML format recommended by W3C is chosen. Naturally, other interpreted languages (or ""scripting languages"") and other secondary formats could be envisaged. Thus XML can be replaced by proprietary text formats. Likewise, the JavaScript language of the scripts can be replaced, forexample, by VisualBasic, TCL, Perl or Python. In this example, the event identifier, enabling the interpreter 5 to determine the script corresponding to the primary format of the primary data received, is preferentially of the OID type (""Object Identifier""--a simple type of ASN.1 identifierfor identifying an object such as an event), since the interpreter language, used by the interpreter 5 for generating the configuration files (secondary data), is JavaScript. The syntax used for generating the alarm configuration files (or secondary data) is therefore here a combination of XML and JavaScript. More precisely, firstly, the general structure of the file is of the XML type, and secondly the secondarydata defining the alarm associated with an OID notification received are always framed by two XML blocks (or ""tags""), thirdly each alarm field has a single input, and fourthly each input of the alarm is either a constant or a JavaScript expression. Thus, when all the alarm inputs are constants, the alarm configuration file is principally of the XML type. For example, it is in the form <SEVERITY>Critical</SEVERITY>. When at least some of the alarm inputs are JavaScriptexpressions, a maximum amount of flexibility can be obtained. The file is then, for example, in the form <SEVERITY> (trapget(""1.2.3.4"")==2)? Critical: Major</SEVERITY>. Some alarm fields generated may be optional or have a default value. By virtue of the scripts, it is possible to take full advantage of the information contained in the primary data which constitute the notifications received. Many processings, in particular logic and/or calculational, can thus be applied to theparameters which define the events indicated by the equipment 3 in the network. Consequently the interpreter 5 can not only generate an alarm representing an event but also accompany this alarm with parameters (or parameter values) able to facilitatethe processing thereof at the NMS manager 2. The alarms can thus be parameterized by ""hard-coded"" values and/or extracted from the notification (or Trap) and/or extracted from equipment from which a notification (or Trap) has been received. In order to implement this third possibility, the interpreter 5 must be arranged so as to send to an item of equipment from which it has possibly received primary data representing an unknown alarm state a message requesting from it certaininformation able to allow the determination of the said alarm state. This information is generally contained in the management information base 8 (or MIB) of the equipment 3. By virtue of this arrangement enabling it to extract information from a distant item of equipment 3, and in particular from its MIB 8, the device according to the invention 1 can fulfill a function of synchronization and resynchronization of thealarm state of each item of equipment. This is because, whenever the NMS manager of the network 2 (or its processing device 1) is restarted or disconnected from the rest of the network, for example in the event of breakdown or maintenance work, it mustfirstly be resynchronized with respect to the respective alarm states of the equipment 3 in the network which were present when it was disconnected, which states may have changed, and secondly synchronized with respect to the respective alarm states ofthe new items of equipment 3 in the network, which states are unknown to it. The same applies whenever a new item of equipment 3 is connected to the network or an old item of equipment is reconnected to the network. This function can be provided by one or more rules, for example stored in the memory 6, or automatically at each switching on and/or whenever the interpreter 5 is advised of a (re)connection by the control module 7 of the NMS manager 2 of thenetwork, or semi-automatically whenever the person responsible for managing the network gives the instruction for this to the interpreter 5. The (re)synchronization rule or rules are arranged so as to examine the content of the MIB of the designated item or items of equipment 3, so as to extract the information (parameter or parameters or parameter value or values) defining theiralarm state or states. However, these rules can also serve to verify or check the value of one or more parameters. As indicated above, in some situations all the equipment in the network which dialogue with the NMS manager 2 can be the subject of anexamination by means of (re)synchronization rules. The (re)synchronization rule or rules can be arranged so as to simulate the sending of a notification (or Trap) within the NMS manager 2. More precisely, they indicate any notifications (or Traps) which the equipment 3 might have sent in orderto change from an alarm-free state to its current state. These simulated notifications (or Traps) are then the subject of a conversion similar to that applied to the actual notifications. The processing module 4 of the device 1 and its interpreter 5 can be respectively produced in the form of electronic circuits, software (or data processing) modules or a combination of circuits and software. The invention also offers a data processing method in which, on reception of primary data transmitted by equipment 3 in a communications network and defining events in at least one primary format, there are delivered to a management device inthe network 2 (or NMS manager) secondary data which define alarms representing these events, in a secondary format. This can be implemented by means of the processing device presented above. The principal function and the optional subfunctions provided by the steps of this method being substantially identical to those provided by the various meansconstituting the processing device 1, only the step implementing the principal function of the method according to the invention will be summarized below. This method is characterized by the fact that its generation step consists of converting, by means of conversion rules, arranged in the form of ""scripts"" associated with the various primary event formats, primary data, received in one of theprimary formats, into secondary data in the secondary format which can be interpreted by the management device 2. By virtue of the invention, it is no longer necessary to have recourse to programming, which reduces the development costs. In addition, the scripts procure a great flexibility in use and a high processing speed (several tens of notifications(or Traps) per second) and allow rapid adaptation to all types of primary format. In addition, the invention allows (re)synchronization. The invention is not limited to the embodiments of the method and devices described above, solely by way of example, but encompasses all variants which might be envisaged by a person skilled in the art within the scope of the following claims."
46|http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=75&p=2&f=G&l=50&d=PTXT&S1=(python.CLTX.+or+python.DCTX.)&OS=ACLM/python&RS=ACLM/python|User-configurable network performance monitors|A network analysis system provides for a user-definable display of information related to messages communicated on the network. The network analysis system includes one or more display formats that provide a display of message exchanges between nodes of a network, and a display augmenter that provides additional information on the display based on a user-defined visualization. The user defined visualization includes augmenting the display based on user-defined coloring characteristics and/or augmenting the display with user-defined labels. To further facilitate user control of the augmentation of the display, the system accepts user-defined programs for discriminating among messages, for controlling the labeling of messages, and for controlling the coloring of messages and labels. Commonly used user-defined characteristics and labels are stored in a library, for use via a selection from among the library entries.|
47|http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=83&p=2&f=G&l=50&d=PTXT&S1=(python.CLTX.+or+python.DCTX.)&OS=ACLM/python&RS=ACLM/python|Associating hosts with subscriber and service based requirements|Associating hosts with subscriber and service based requirements is disclosed. An identifier is extracted from a DHCP or other network address lease communication associated with a subscriber host. The identifier is used to associate the subscriber host with a requirement that is subscriber based, service based, or both subscriber and service based. The subscriber host is included in a set of one or more subscriber hosts associated with the subscriber, the service, or both, as applicable to the requirement, and the requirement is required to be enforced collectively to the one or more subscriber hosts comprising the set.|"1. A method of associating a host with a requirement, comprising: extracting using a processor a first identifier from a first dynamic host configuration protocol (DHCP) orother network address lease communication associated with a first subscriber host for a first service; determining using a processor that first requirement will be applied to the first subscriber host for the first service based on the first identifier; extracting using a processor a second identifier from a second dynamic host configuration protocol (DHCP) or other network address lease communication associated with the first subscriber host for a second service; determining using a processor that asecond requirement will be applied to the subscriber host for the second service; extracting using a processor a third identifier from a third dynamic host configuration protocol (DHCP) or other network address lease communication associated with asecond subscriber host for the first service; and determining using a processor that the first requirement will be applied to the second subscriber host for the first service; wherein the first identifier comprises a digital subscriber line accessmultiplexer (DSLAM) physical port identifier and wherein determining that the first requirement will be applied to the first subscriber host includes performing a lookup to map the DSLAM physical port identifier to a corresponding subscriber identifierand using the corresponding subscriber identifier to determine that the first requirement is to be applied to the first subscriber host for the first service. 2. A method as recited in claim 1, wherein extracting the first identifier includes parsing the DHCP or other network address lease communication. 3. A method as recited in claim 2, wherein extracting the first identifier includes parsing DHCP option 82 information. 4. A method as recited in claim 1, further comprising retrieving the subscriber profile from a profile database. 5. A method as recited in claim 1, further comprising using the identifier to retrieve from a database a template configured to enforce the requirement. 6. A method as recited in claim 1, further comprising enforcing the requirement at least in part by associating with a policy instance configured to enforce the requirement a network address associated with the subscriber host in the DHCP orother network address lease communication. 7. A method as recited in claim 1, further comprising enforcing the requirement at least in part by adding to a filter, access control list (ACL), or other list associated with the requirement a network address associated with the subscriberhost in the DHCP or other network address lease communication. 8. A method as recited in claim 1, wherein the requirement comprises an aggregate quality of service commitment applicable collectively to the set of one or more subscriber hosts and the method further comprises enforcing the requirement atleast in part by configuring a queue to receive network traffic associated with set of one or more subscriber hosts and associating with the queue a scheduler policy instance configured to enforce the requirement. 9. A method as recited in claim 1, further comprising associating network traffic associated with the set of one or more subscriber hosts with a policy instance configured to enforce the requirement. 10. A method as recited in claim 1, further comprising configuring a Python or other script engine to extract the identifier. 11. A system configured to associate a host with a requirement, comprising: a communication interface configured to receive a DHCP or other network address lease communication; and a processor coupled to the communication interface andconfigured to: extract a first identifier from a first DHCP or other network address lease communication associated with a first subscriber host for a first service; and use the first identifier to determine a first requirement that will be applied tothe first subscriber host for the first service; extract using a processor a second identifier from a second dynamic host configuration protocol (DHCP) or other network address lease communication associated with the first subscriber host for a secondservice; determine using a processor that a second requirement will be applied to the subscriber host for the second service; extract using a processor a third identifier from a third dynamic host configuration protocol (DHCP) or other network addresslease communication associated with a second subscriber host for the first service; and determine using a processor that the first requirement will be applied to the second subscriber host for the first service; wherein the first identifier comprises aDSLAM physical port identifier and wherein the processor is configured to determine that the first requirement will be applied to the first subscriber host at least in part by performing a lookup to map the DSLAM physical port identifier to acorresponding subscriber identifier and using the corresponding subscriber identifier to determine that the first requirement is to be applied to the first subscriber host for the first service. 12. A system as recited in claim 11, wherein the system comprises a router. 13. A system as recited in claim 11, wherein the system comprises a multi-service edge router. 14. A system as recited in claim 11, further comprising a storage device configured to store data associated with the requirement. 15. A system as recited in claim 14, wherein the data associated with the requirement comprises a subscriber profile. 16. A method as recited in claim 14, wherein the data associated with the requirement comprises a template configured to enforce the requirement. 17. The system as recited in claim 11, wherein extracting the first identifier includes parsing the DHCP or other network address lease communication. 18. The system of as recited in claim 11, wherein extracting the first identifier includes parsing DHCP option 82 information. 19. A computer program product for associating a host with a requirement, the computer program product being embodied in a non-transitory computer readable storage medium and comprising computer instructions for: extracting first identifierfrom a DHCP or other network address lease communication associated with a first subscriber host for a first service; and using the first identifier to determine a first requirement that will be applied to the first subscriber host for the firstservice; extracting using a processor a second identifier from a second dynamic host configuration protocol (DHCP) or other network address lease communication associated with the first subscriber host for a second service; determining using aprocessor to determine that a second requirement will be applied to the subscriber host for the second service; extracting using a processor a third identifier from a third dynamic host configuration protocol (DHCP) or other network address leasecommunication associated with a second subscriber host for the first service; and determining using a processor that the first requirement will be applied to the second subscriber host for the first service; wherein the first identifier comprises aDSLAM physical port identifier and wherein determining that the first requirement will be applied to the first subscriber host includes performing a lookup to map the DSLAM physical port identifier to a corresponding subscriber identifier and using thecorresponding subscriber identifier to determine that the first requirement is to be applied to the first subscriber host for the first service. 20. The computer program product as recited in claim 19, wherein extracting the first identifier includes parsing the DHCP or other network address lease communication. 21. The method of claim 19, wherein extracting the first identifier includes parsing DHCP option 82 information. Description BACKGROUND OF THE INVENTION Network service providers (e.g., Internet service providers or ""ISP"") use multi-service edge routing to provide to their subscribers access to a range of network services, such as voice over IP (VoIP), high-speed Internet (HSI), video on demand,etc. Edge routing typically is performed at the edge of the provider's core network. An access network aggregates subscriber lines and carries network traffic to and from one or more multi-service edge routers at the provider network edge. In the caseof subscribers who use digital subscriber line (DSL) connections to access network services, for example, subscriber lines typically are terminated at a digital subscriber line access multiplexer (DSLAM) at the telephone company central office (CO),which multiplexes traffic via a high speed connection to the provider's network via a provider edge router such as a multi-service edge router or other access server. Service providers may undertake certain quality of service (QoS) or other commitments, e.g., through a service level agreement (SLA), and may be required or may agree to enforce subscriber specified or other policies, such as access control list(ACL) based or other security policies or requirements. Some of these commitments and requirements apply to a subscriber or a subscriber's access to a particular service. However, a subscriber may use more than one host to access the network and/or aparticular service. Subscribers vary in terms of the number and type of services to which they subscribe, the number and type of hosts they use to access network services, the number and type of service each host is used to access, whether a residentialgateway (RG) or other gateway is present on the subscriber's site (e.g., in their home), and if so whether the gateway is configured as a bridge (each host visible to the access network) or a router (gateway visible to the access network). Therefore,there is a need for an effective way to associate subscriber hosts that connect to a provider network with subscriber and/or service based policies. BRIEF DESCRIPTION OF THE DRAWINGS Various embodiments of the invention are disclosed in the following detailed description and the accompanying drawings. FIG. 1A is a block diagram illustrating an embodiment of a system for associating a subscriber host with subscriber and/or service based requirements. FIG. 1B is a block diagram illustrating an embodiment of a system for associating a subscriber host with subscriber and/or service based requirements. FIG. 1C is a block diagram illustrating an embodiment of a system for associating a subscriber host with subscriber and/or service based requirements. FIG. 2 is a block diagram illustrating an embodiment of an access server. FIG. 3 is a block diagram illustrating communications associated with configuring a host using the DHCP protocol. FIG. 4 is a block diagram illustrating an embodiment of an access server configured to extract data from DHCP lease communications between a subscriber host and a DHCP server and use the extracted data to associate the subscriber host withsubscriber and/or service based requirements. FIG. 5 is a flow chart illustrating an embodiment of a process for associating a subscriber host with subscriber and/or service based requirements. FIG. 6 is a flow chart illustrating an embodiment of a process for using DHCP lease communication data to associate a subscriber host with subscriber and/or service based requirements. FIG. 7 is a flow chart illustrating an embodiment of a process for associating a subscriber host with subscriber and/or service based requirements. FIG. 8 is a flow chart illustrating an embodiment of a process for enforcing a subscriber and/or service based requirement.DETAILED DESCRIPTION The invention can be implemented in numerous ways, including as a process, an apparatus, a system, a composition of matter, a computer readable medium such as a computer readable storage medium or a computer network wherein program instructionsare sent over optical or electronic communication links. In this specification, these implementations, or any other form that the invention may take, may be referred to as techniques. A component such as a processor or a memory described as beingconfigured to perform a task includes both a general component that is temporarily configured to perform the task at a given time or a specific component that is manufactured to perform the task. In general, the order of the steps of disclosed processesmay be altered within the scope of the invention. A detailed description of one or more embodiments of the invention is provided below along with accompanying figures that illustrate the principles of the invention. The invention is described in connection with such embodiments, but theinvention is not limited to any embodiment. The scope of the invention is limited only by the claims and the invention encompasses numerous alternatives, modifications and equivalents. Numerous specific details are set forth in the followingdescription in order to provide a thorough understanding of the invention. These details are provided for the purpose of example and the invention may be practiced according to the claims without some or all of these specific details. For the purposeof clarity, technical material that is known in the technical fields related to the invention has not been described in detail so that the invention is not unnecessarily obscured. Associating a subscriber host with subscriber and/or service based requirements is disclosed. In some embodiments, dynamic host configuration protocol (DHCP) IP address ""lease"" communications are monitored and parsed to extract an identifierusable to associate a subscriber host with which the lease communication is associated with a subscriber and/or service based requirement. In some embodiments, the identifier comprises a string extracted from ""option 82"" injected into the DHCP leasecommunications by an access network node, such as a DSLAM in the case of DSL access. The string is mapped to a subscriber and/or service based SLA template or other policy applicable to the host. Multiple hosts associated with the same subscriberand/or used by a single subscriber to access the same service are associated together with a single instance, as applicable, of subscriber and/or service based requirements, as applicable. FIG. 1A is a block diagram illustrating an embodiment of a system for associating a subscriber host with subscriber and/or service based requirements. In the example shown, a plurality of subscribers, represented in FIG. 1A by subscribers S1(102), S2 (104), and Sn (106) access network services via respective DSL connections to an access node, in this example DSLAM 108, e.g., located at a local telephone company central office. The DSLAM 108 provides connectivity via an access server 110 tonetwork services provided via a core provider network to which the access server 110 is connected via a connection 112. In various embodiments, access server 110 comprises one or more physical systems and connection 112 represents one or more interfacesand/or connections to the core network. Examples of access server 110 include a multi-service provider edge router, such as the Alcatel.TM. 7750 service router (SR), one or more aggregation nodes such as the Alcatel.TM. 7740 Ethernet service switch(ESS), and/or solutions including both the Alcatel.TM. 7750 SR and the Alcatel.TM. 7740 ESS. In the example shown in FIG. 1A, each subscriber uses one or more hosts to access services via DSLAM 108 and access server 110. Subscriber S1 (102) uses a single host H1, subscriber S2 (104) uses three hosts H2, H3, and H4 connected to DSLAM108 via a residential gateway (RG), and subscriber Sn (106) uses hosts Hm-1 and Hm. The hosts H1 through Hm, represented in FIG. 1A by hosts H1, H2, H3, H4, Hm-1, and Hm, may be configured in any number of ways. For example, each host associated with asubscriber may be configured to access a particular service (e.g., HSI) or a subscriber may use the same host to access two or more types of service. For example, a host that uses high speed Internet service (HSI) for general web access (e.g., browsing)may also be used to access video on demand service or VoIP service. Techniques are known to identify a host that is connecting via an access infrastructure such as the one shown in FIG. 1A, however, to identify and enforce subscriber based and/orservice based policies, service level commitments, and/or other requirements, it is necessary to associate hosts with a subscriber and/or service context, e.g., as described further below. FIG. 1B is a block diagram illustrating an embodiment of a system for associating a subscriber host with subscriber and/or service based requirements. In the example shown in FIG. 1B, a separate virtual circuit (VC) is configured for eachsubscriber to enable the traffic associated with that subscriber to be identified. In the example shown, network traffic to/from subscriber S1 (102), represented in FIG. 1B by the dashed line beginning at host H1, is associated at the DSLAM 108 with afirst virtual circuit VC1. Traffic associated with VC1 is tagged with a virtual circuit tag that enables the traffic to be handled correctly. For example, DSLAM 108 uses the virtual circuit tag for traffic associated with VC1 to route subscriber boundtraffic to the correct subscriber, in this example subscriber S1 (102), and to direct outbound traffic from subscriber S1 to the correct interface/context at access server 110. In the example shown, first virtual circuit VC1 is bound to a first serviceaccess point SAP1. The term ""service access point"" is used herein to refer to virtual port or other virtual interface configured to provide access to one or more network service, e.g., by processing traffic associated with a particular subscriber and/ormultiple subscribers using a particular service. In this example, a separate service access point (SAP) has been configured for each subscriber, and the virtual circuit for each subscriber is bound to the corresponding SAP. Subscriber S2 (104) useshosts H2, H3, and H4 to access network services via an associated residential gateway and a second virtual circuit VC2 bound to SAP2. Traffic associated with second virtual circuit VC2 is indicated by the long-short-long patterned line beginning athosts H2, H3, and H4. Finally, in this example subscriber Sn (106) uses hosts Hm-1 and Hm to access network services via an n-th virtual circuit VCn bound to an n-th service access point SAPn. Traffic associated with n-th virtual circuit VCn isindicated by the dash-dot-dot-dash patterned line beginning at hosts Hm-1 and Hm. In the example shown in FIG. 1B, it is relatively easy to associate subscriber traffic and/or hosts with a subscriber context, e.g., for purposes of enforcing subscriberbased policies, commitments, and/or other requirements; but it may still be necessary to associate hosts with a service context. FIG. 1C is a block diagram illustrating an embodiment of a system for associating a subscriber host with subscriber and/or service based requirements. In this example, a virtual circuit and associated service access point is configured for eachservice, instead of by subscriber as shown in FIG. 1B. Each subscriber that accesses a service uses the same virtual circuit and associated service access point. In the example shown, there are two services (e.g., high speed internet and video ondemand), including a first service for which a first virtual circuit VC1 and a first service access point SAP1 are configured, and a second service for which a second virtual circuit VC2 and a second service access point SAP2 are configured. Trafficassociated with the first service is indicated in FIG. 1C by the dashed lines beginning at hosts H1 and H2, which in this example are used by subscribers S1 (102) and S2 (104), respectively, to access the first service. Traffic associated with thesecond service is indicated in FIG. 1C by the long-short-long patterned lines beginning at hosts H3, H4, Hm-1, and Hm, which in this example are used by subscribers S2 (104) and Sn (106) to access the second service. In the example shown in FIG. 1C, it is likely that traffic to/from multiple subscribers will share the same virtual circuit and service access point. Hosts associated with two different subscribers access the first service via SAP1, forexample, in the example shown in FIG. 1C. Also, for subscribers that use different hosts to access different services, e.g., subscriber S2 in the example shown in FIG. 1C, traffic to/from hosts associated with the same subscriber will be spread acrossmultiple service access points, making it relatively more difficult than in the configuration shown in FIG. 1B to associate such hosts with their common subscriber context, e.g., for purposes of enforcing subscriber based requirements. In addition, asubscriber may use the same host to access two or more services (not shown in FIG. 1C), such that traffic from a single host may be spread across service access points, further complicating the task of associating traffic with the correct subscriberand/or service context for purpose of enforcing subscriber and/or service based requirements. FIGS. 1B and 1C show two examples of how an access server may be configured by a provider to provide access to multiple services via a single provider network, e.g., a single 1P/MPLS provider core network. In the examples shown, service accesspoints configured on a per subscriber (FIG. 1B) or per service (FIG. 1C) basis are shown. However, other configurations may be used, and it is desirable to provide a way to associate traffic with a subscriber and/or service context, as applicable, toenable subscriber and/or service based requirements to be enforced, regardless of how a particular service provider chooses to configure service access points or similar structures to provide access to network services. FIG. 2 is a block diagram illustrating an embodiment of an access server. In the example shown, a first service access point SAP1 is configured to provide access to a first service and a second service access point SAP2 is configured to provideaccess to a second service. In this example, the first and second service access points SAP1 and SAP2 correspond to the first and second service access points of FIG. 1C. Hosts H2, H3, and H4 are shown in this example as being associated with asubscriber context 202 associated with subscriber S2 (106) of FIG. 1C. In this example, the residential gateway (RG) of FIG. 1C is assumed to be configured as a bridge, such that the individual hosts H2, H3, and H4 are visible individually at the accessserver 110. In addition, host H2 is shown as being associated with a first service context (204) for subscriber S2 and hosts H3 and H4 are shown as being associated with a second service context (206) for subscriber S2. Note that traffic and/or hostsacross both service access points SAP1 and SAP2 must be associated together into a single subscriber context 202, e.g., to enable subscriber based requirements such as security policies, aggregate (subscriber level) quality of service commitments, andother subscriber based requirements to be enforced and/or met. In some embodiments, each of subscriber context 202 and service contexts 204 and 206 includes an instance of an associated service level agreement (SLA) template configured to enforcesubscriber and/or service based requirements, as applicable. Examples of subscriber based requirements include security requirements, e.g., whether SNMP traffic may be sent to a subscriber's host or whether port 80 (HTTP) requests downstream will beallowed (which may differ for residential and business subscribers, for example), and subscriber (aggregate) or service based quality of service (e.g., speed/bandwidth) commitments. In some embodiments, one or more of subscriber context 202 and servicecontexts 204 and 206 include one or more filters determined and/or configured to filter traffic associated with one or more subscriber hosts, e.g., by associating one or more IP addresses with the filter instance based on a determination that the host/IPaddress is associated with the subscriber and/or the security policy the filter is configured to enforce. In some embodiments, one or more of subscriber context 202 and service contexts 204 and 206 include one or more queues and associated schedulerpolicy instance(s) configured to enforce a QoS or other SLA requirement. In some embodiments, subscriber context 202 includes a single scheduler policy instance with which traffic for all hosts associated with the subscriber, in this example hosts H2,H3, and H4, is associated, including if applicable across service access points. For flexibility and ease of use, many provider networks use the dynamic host configuration protocol (DHCP) to configure hosts to access the provider's network, e.g., by assigning to each host dynamically, at the time a host seeks to connect tothe network, an IP address to be used to access the network. DHCP, for example, is client/host focused, in the sense that if DHCP or another protocol is used to configure hosts dynamically to access the provider network, host identifying information(e.g., IP address can be determined and used to determine dynamically which host particular traffic is associated with. However, the DHCP protocol does not provide directly a ready way to associated hosts with a subscriber and/or service context. Extracting from DHCP lease communications data usable to associate a host with a subscriber and/or service context is disclosed. FIG. 3 is a block diagram illustrating communications associated with configuring a host using the DHCP protocol. A subscriber host 302 desiring to access services from an IP-based network, such as an IP/MPLS based provider network, first obtains an IP address by sending a DHCP discover message to one or more DHCP servers 304. The DHCP server 304 sends a DHCP offerto the subscriber host 302, offering use of an IP address specified in the DHCP offer communication for a specified lease period. The subscriber host 302 chooses an offer, if multiple offers have been received, e.g., from multiple DHCP servers, andcommunicates a DHCP request to the DHCP server that made the offer desired to be accepted, in this example DHCP server 304. The DHCP server 304 sends a DHCP acknowledgement to the subscriber host 302, notifying the subscriber host 302 that it may beginusing the IP address indicated in the DHCP request and acknowledgement and may continue to do so for the duration of the specified lease period. In a typical provider network environment, an access server such as access server 110 of FIGS. 1A-2, is located in the path of DHCP lease communications between a subscriber host and a DHCP server. In some embodiments, an access server isconfigured to ""snoop"" DHCP lease communications as they pass through the access server, or to act as a relay for such communications, thereby enabling the access server to extract from DHCP lease communications information usable to associate a host witha subscriber and/or service context. FIG. 4 is a block diagram illustrating an embodiment of an access server configured to extract data from DHCP lease communications between a subscriber host and a DHCP server and use the extracted data to associate the subscriber host withsubscriber and/or service based requirements. In the example shown, the access server 110 is configured to monitor DHCP lease communications between subscriber host 302 and DHCP server 304 of FIG. 3. In the example shown in FIG. 4, the DHCPacknowledgement sent by DHCP server 304 to subscriber host 302 is received and parsed by a DHCP lease communication parser 404 to extract from the DHCP acknowledgement data usable to associate the subscriber host with subscriber and/or service basedrequirements. In some embodiments, parser 404 extracts from the DHCP acknowledgement an IP address assigned to the subscriber host 302 and one or more fields of data, which data is used by parser 404 to generate a string that is then used to identifyone or more SLA or other templates indicating subscriber and/or service based requirements to be enforced with respect to the subscriber host 302. In some embodiments, a lookup table 406 is used to map the extracted string to an associated subscriberand/or service based SLA template. The SLA template is stored in a profile template database 408, from which the template is retrieve and used to create and configured data structures associated with the subscriber and/or service based requirement(e.g., one or more ingress queues to be used to process inbound traffic from the subscriber host), and to create and/or associate the subscriber host with an instance of a profile configured to enforce the associated subscriber and/or service basedrequirements (e.g., a scheduler process and/or policy associated with a subscriber with which the subscriber host is associated). In some embodiments, the parser 404 comprises an embedded Python script processing engine configured, e.g., via a user-defined and/or indicated script, to extract from the DHCP lease communications (e.g., the DHCP acknowledgement) data usable toassociate the subscriber host with a subscriber and/or service context. In some embodiments, the script comprises one or more regular expressions configured to identify and extract from the DHCP lease communication the data usable to associate thesubscriber host with a subscriber and/or service context. In some embodiments, the data extracted by parser 404 includes DHCP ""option 82"" data added by a DSLAM or other access node through which the subscriber host sends/receives DHCP leasecommunications. Option 82 is defined by the DHCP standard specification and typically includes a circuit identifier, e.g., indicating the DSLAM port on which the DHCP request was received and a virtual circuit identifier with which the DHCP request isassociated. In some cases, the DHCP server is configured to use option 82 information, e.g., to identify an IP address pool from which to assign an IP address to the requesting host. In some embodiments, DSLAM physical port information is extractedfrom the option 82 data and mapped (either directly or by generating a string based thereon), e.g., using a lookup table such as table 406 of FIG. 4, to a subscriber identifier that in turn is used as a key to find, in a policy template database such asdatabase 408 of FIG. 4, one or more subscriber and/or service based requirements to be enforced with respect to the subscriber host. In some embodiments, the approach described above and shown in FIG. 4 makes it unnecessary to provision the accessserver on a per subscriber basis to enforce subscriber and/or service based requirements. Instead, a set of predefined templates are stored and for each subscriber one or more entries are included in table 406 to map a subscriber identifier and/or oneor more service identifiers extracted from DHCP lease communication to one or more corresponding profiles (e.g., SLA templates) to be applied with respect to the subscriber hosts associated with the subscriber and/or the host(s) used by the subscriber toaccess a particular service. FIG. 5 is a flow chart illustrating an embodiment of a process for associating a subscriber host with subscriber and/or service based requirements. In some embodiments, the process of FIG. 5 is implemented on a multi-service edge router, suchas the access router 110 of FIGS. 1A-2 and 4. In the example shown, a DHCP acknowledgement is received (502). In some embodiments, 502 includes monitoring DHCP lease communications between a subscriber host and a DHCP server. Data usable to associatea subscriber host with which the DHCP acknowledgement is associated with a subscriber and/or service based requirement is extracted from the DHCP acknowledgement (504). In some embodiments, 504 includes parsing the DHCP acknowledgement and generating,based at least in part on option 82 and/or other data comprising the DHCP acknowledgement, a string usable to identify a subscriber and/or service profile usable to associate the subscriber host with a subscriber and/or service based requirement. Insome embodiments, 504 includes using a string extracted from the DHCP acknowledgement to perform a lookup in a table such as table 406, and using a subscriber (or other) identifier read from the table to create an instance of a subscriber and/or servicebased policy and associate the subscriber host with the newly created policy (e.g., by associating the IP address assigned to the subscriber host with the policy instance) and/or to associate the subscriber host with an existing policy instance, e.g., aninstance created and associated previously with one or more other hosts associated with the same subscriber and/or used by a subscriber to access the same service. Applicable subscriber and/or service based policies subsequently are enforced withrespect to the subscriber host (506). FIG. 6 is a flow chart illustrating an embodiment of a process for using DHCP lease communication data to associate a subscriber host with subscriber and/or service based requirements. In some embodiments, 504 of FIG. 5 includes the process ofFIG. 6. A DHCP acknowledgement (or other DHCP lease communication) is parsed (604). In some embodiments, 604 includes parsing type-length-value fields included in the DHCP acknowledgement to extract one or more name-value pairs. One or more policy(e.g., SLA) template identifier strings are extracted from the parsed DHCP acknowledgement data (606). In some embodiments, at least one identifier extracted in 606 comprises a subscriber identifier associated uniquely with a subscriber with which thesubscriber host to which the DHCP acknowledgement pertains. The identifier string is mapped to one or more subscriber and/or service based policies (e.g., profiles and/or templates) to be enforced with respect to the subscriber host to which the DHCPacknowledgement pertains. In some embodiments, 606 includes consulting a lookup table such as table 406 of FIG. 4. In some embodiments, 606 includes using the result of such a lookup to associate the subscriber host with a new and/or previously createdinstance of an applicable policy. FIG. 7 is a flow chart illustrating an embodiment of a process for associating a subscriber host with subscriber and/or service based requirements. In some embodiments, 606 of FIG. 6 includes the process of FIG. 7. A string extracted from aDHCP lease communication (e.g., DHCP acknowledgement) is used to look up one or more policy identifiers (702), e.g., from a lookup table such as table 406 of FIG. 4. The policy identifier(s) is/are used to associate the subscriber host with a new and/orpreviously created instance(s) of one or more applicable policies (704), e.g., by using the identifier determined at 702 to retrieve the applicable policy from a policy database such as database 408 of FIG. 4. In some embodiments, 702 includesassociating the subscriber host with a subscriber profile and 704 includes retrieving the subscriber profile and/or one or more policies associated with the subscriber profile. FIG. 8 is a flow chart illustrating an embodiment of a process for enforcing a subscriber and/or service based requirement. In some embodiments, the process of FIG. 8 is used to enforce an aggregate QoS or other subscriber based requirementwith respect to one or more hosts associated with a particular subscriber. In the example shown, a queue, e.g., an ingress queue, is configured to receive traffic associated with one or more hosts associated with a subscriber (802). In someembodiments, 802 includes binding an IP address assigned to one or more subscriber hosts to an ingress or other queue associated with a subscriber with which the one or more subscriber hosts are associated. A scheduler policy is associated with thequeue (804). In some embodiments, the scheduler policy determines at least in part how/when packets are pulled from the ingress queue configured at 802 and processed. In some embodiments, a single instance of a scheduler policy is configured to enforcean aggregate QoS or other subscriber base SLA commitment and all hosts associated with a particular subscriber are linked to the single scheduler policy instance. In some embodiments, one or more service based requirements may also be required to beenforced, and one or more hosts used by a particular subscriber to access a particular service may be bound to a policy instance configured to enforce the service based requirement. At 806, traffic received from one or more subscriber hosts associatedwith the subscriber for which the queue was configured in 802 is associated with (e.g., place in) the queue configured in 802, e.g., on the basis of assigned IP address, and packets are pulled from the queue and processed in accordance with the aggregatescheduler policy associated with the queue at 804. While the example shown in FIG. 8 involves enforcing an aggregate QoS commitment with respect to all traffic associated with a particular subscriber, across one or more hosts associated with the subscriber, the approaches described herein areused in various embodiments to enforce other subscriber and/or service based requirements across one or more subscriber hosts. Other examples of subscriber and/or service based requirements include, without limitation, using DHCP lease communicationdata to enforce security requirements, e.g., by adding dynamically to an ACL or other filter an M address assigned to a subscriber host, and enforcing per service QoS and/or other SLA commitments applicable to those hosts used by a particular subscriberto access a particular service. In some embodiments, a single host may be configured to access two or more services, or a routed residential gateway may result in multiple hosts each used to access a different network service appearing to the network as a single host (i.e.,the residential gateway) accessing multiple services. In some embodiments, such hosts are associated with more complicated SLA templates that enable any service based requirements, if any, applicable to a particular service to be enforced with respectto traffic associated with that service. Although the foregoing embodiments have been described in some detail for purposes of clarity of understanding, the invention is not limited to the details provided. There are many alternative ways of implementing the invention. The disclosedembodiments are illustrative and not restrictive."
48|http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=61&p=2&f=G&l=50&d=PTXT&S1=(python.CLTX.+or+python.DCTX.)&OS=ACLM/python&RS=ACLM/python|Flow-optimization system and method for cloud computing|"A cloud computing interface includes a high-level compiler uses a modified flow language referred-to as ""Resilient Optimizing Flow Language"" (ROFL) that converts inputs relating to source program and data definitions to generate bytecode objects that can be used by an execution engine to allocate input data to ""processes"" created by the execution engine based on available resources, so as to evaluate or perform particular tasks on the input data."|
49|http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=90&p=2&f=G&l=50&d=PTXT&S1=(python.CLTX.+or+python.DCTX.)&OS=ACLM/python&RS=ACLM/python|Systems and methods for managing a collaboration space having application hosting capabilities|Embodiments relate to systems and methods for managing a collaboration space having application hosting capabilities. A collaboration space, such as a wiki site, can host a set of collaboration tools and resources, including, for example, content tools, communication tools, and other resources for the users of the space. The collaboration space can also incorporate a set of executable application resources, such as application programming tools to permit users to program, invoke, and execute applications directly from the wiki site or other collaboration space. The set of executable application resources can in turn be embedded or incorporated in a Web framework, for instance to permit the set of hosted applications to be served/run to remote clients as Web applications. Applications generated outside the collaboration space can in embodiments be migrated into the collaboration space and hosted and/or executed from within the collaboration space, even if not originally generated there.|"1. A method comprising: hosting, by a collaboration server, in a collaboration space, a set of executable local applications generated in the collaboration space, and a setof executable migrated applications generated remotely from the collaboration space and migrated to the collaboration space; hosting a set of executable application resources in the collaboration space permitting a set of users to execute at least oneapplication in the collaboration space selected from the set of executable local applications and the set of executable migrated applications; accessing the at least one executed application in the collaboration space; and configuring the at least oneexecuted application to be served to at least one user in the set of users via a Web framework. 2. The method of claim 1, wherein the collaboration space comprises a wiki site. 3. The method of claim 1, wherein the set of executable application resources comprises an interpreted execution environment for the at least one application. 4. The method of claim 1, wherein the at least one application comprises at least one of a Python application, a Ruby on Rails application, a PERL application, and a Visual Basic application. 5. The method of claim 1, wherein the set of executable application resources is incorporated in the Web framework within the collaboration space. 6. A system comprising: an interface to a set of users via a network; a collaboration hosting engine, communicating with a set of users via the interface, the collaboration hosting engine being configured to host, in the collaboration space, aset of executable local applications generated in the collaboration space, and a set of executable migrated applications generated remotely from the collaboration space and migrated to the collaboration space, host a set of executable applicationresources in the collaboration space permitting the set of users to execute at least one application in the collaboration space selected from the set of executable local applications and the set of executable migrated applications, access the at leastone executed application in the collaboration space, and configure the at least one executed application to be served to at least one user in the set of users via a Web framework. 7. The system of claim 6, wherein the collaboration space comprises a wiki site. 8. The system of claim 6, wherein the set of executable application resources comprises an interpreted execution environment for the at least one application. 9. The system of claim 6, wherein the at least one application comprises at least one of a Python application, a Ruby on Rails application, a PERL application, and a Visual Basic application. 10. The system of claim 6, wherein the set of executable application resources is incorporated in the Web framework within the collaboration space. 11. An executable software application, the executable software application being generated by a method comprising: hosting, by a collaboration server, in a collaboration space, a set of executable local applications generated in thecollaboration space, and a set of executable migrated applications generated remotely from the collaboration space and migrated to the collaboration space; hosting a set of executable application resources in the collaboration space permitting a set ofusers to execute at least one application in the collaboration space selected from the set of executable local applications and the set of executable migrated applications; accessing the at least one executed application in the collaboration space; andconfiguring the at least one executed application to be served to at least one user in the set of users via a Web framework. 12. The executable software application of claim 11, wherein the collaboration space comprises a wiki site. 13. The executable software application of claim 11, wherein the set of executable application resources comprises an interpreted execution environment for the at least one application. 14. The executable software application of claim 11, wherein the at least one application comprises at least one of a Python application, a Ruby on Rails application, a PERL application, and a Visual Basic application. 15. The executable software application of claim 11, wherein the set of executable application resources is incorporated in the Web framework within the collaboration space. Description FIELD The present teachings relate to systems and methods for managing a collaboration space having application hosting capabilities, and more particularly to platforms and techniques for deploying and managing wiki sites or other collaborationspaces, in which the space or site is equipped with executable application resources to develop and/or run software applications within the collaboration space itself.BACKGROUND OF RELATED ART Community collaboration platforms and websites are known which allow members from a public or private community to contribute to or modify content which is shared on the platforms and websites. One form of these platforms and websites is knownas ""wikis."" In one application, software developers can utilize wikis as a platform for the developers and the community to submit updates, problems, fixes, messages and/or the like with the goal to help develop applications and other software. Openingup the platform to a community often facilitates the development of the software by providing users a platform to easily and freely submit bug fixes, updates and ideas. Existing collaboration platforms and software wikis, however, provide no mechanismto allow users to insert and execute software directly in the wiki site, itself. In other words, software development sites organized as wikis often contain content-management resources to accept source code, comments, email, or other content exchanges. However, those sites do not incorporate resources to permit contributors to the wiki to insert and execute applications within the wiki framework itself. Instead such sites typically present a link to redirect the user to another site or resource toattempt to run programs that may be stored or referenced in the wiki. It may be desirable to provide methods and systems for managing a wiki site or other collaboration space which include application hosting capabilities. DESCRIPTION OF THEDRAWINGS The accompanying drawings, which are incorporated in and constitute a part of this specification, illustrate embodiments of the present teachings and together with the description, serve to explain the principles of the present teachings. Inthe figures: FIG. 1 illustrates an overall system for managing a collaboration space having application hosting capabilities, according to various embodiments; FIG. 2 illustrates an overall system for managing a collaboration space having application hosting capabilities, according to various embodiments in further regards; FIG. 3 illustrates an exemplary hardware configuration of a collaboration server that can be used in systems and methods for managing a collaboration space having application hosting capabilities, according to various embodiments; and FIG. 4 illustrates a flowchart of overall management processing for collaboration spaces having application hosting capabilities, according to various embodiments.DESCRIPTION OF EMBODIMENTS Embodiments of the present teachings relate to systems and methods for managing a collaboration space having application hosting capabilities. More particularly, embodiments relate to platforms and techniques to support a wiki site or othercollaboration space, incorporating a set of content resources or tools which permit a set of users to access the collaboration space, and upload, access and download content to and from the collaboration space. Those content tools can include, forexample, email tools, code archive tools, instant messaging or other messaging tools, calendar or scheduling tools, or other tools or resources to help manage the content of information posted to and maintained by the wiki site or other collaborationspace. In embodiments, the collaboration space can be supported by a collaboration server or other host. In embodiments, the collaboration server or other resources used to support the collaboration space can be extracted or maintained in a cloudcomputing environment. According to embodiments, the collaboration space can likewise be configured to contain a set of executable application resources to permit a user to execute or instantiate one or more applications, from within the collaboration space. The setof executable application resources can include, for example, available application language or other interpreters, compilers, runtime environments, or other application resources to allow applications to be hosted and execute in the collaboration space,itself. In embodiments, the resulting wiki site or other collaboration site or space, can be referred to as a ""piki"" site or space. In embodiments, the set of hosted applications that reside or are instantiated in the collaboration space, can beconfigured as Web applications. The hosted Web applications can be served to one or more of the set of users, directly from the collaboration space. Reference will now be made in detail to exemplary embodiments of the present teachings, which are illustrated in the accompanying drawings Where possible the same reference numbers will be used throughout the drawings to refer to the same orlike parts. FIG. 1 illustrates an overall system 100 consistent with systems and methods for managing a collaboration space having application hosting capabilities, according to various embodiments of the present teachings. In embodiments as shown, acollaboration space 110 can host or contain a set of content 112, as well as a set of applications 114. In embodiments, the collaboration space 110 can be or include a wiki site, space, or community. In embodiments, collaboration space 110 can host orsupport resources related to the development of software, such as applications, operating systems, or other software. The set of content 112 can include, for example, email or other messaging content, code storage or archives, blogs, or other media orcontent. The set of applications 114 can include, for example, applications such as software development applications, for instance, debugging tools, performance metric tools, or other applications. The collaboration space 110 can be generated or supported by a collaboration server 102. Collaboration server 102 can communicate with a data store 116 to store code, content, applications, and/or other resources related to collaboration space110. Collaboration server 102 can likewise comprise a set of content management resources 104, and a set of executable application resources 106. Set of content management resources 104 can comprise software and/or other tools to receive, maintain, andprovide access to messaging, code, and other content or media hosted in collaboration space 110. Set of executable application resources 106 can comprise software and/or other tools to maintain, configure, and/or execute or instantiate applications orother software within collaboration space 110. Set of executable application resources 106 can comprise, for instance, application language frameworks, compilers or interpreters such as, for example, Python, PERL, Java.TM., Ruby on Rails, VisualBasic.TM. available from Microsoft Corp., Struts, or other languages, platforms, and/or other resources. Set of executable application resources 106 can comprise a Web application framework to permit collaboration server 102 to serve applications toone or more users in a set of users 108 via one or more networks 118. One or more networks 118 can be or include the Internet, or other public or private networks. Set of users 108 can include, for instance, anonymous public users, registered orauthenticated users, or other users who wish to access collaboration space 110, for example, to participate in the development of applications or other software. As shown in FIG. 2, in operation the collaboration space 110 can present a set of content 112 and a set of applications 114 to any one or more users in the set of users 108 who access the collaboration space 110. In embodiments, one or moreapplications in the set of applications 114 can be executed or instantiated via the set of executable application resources 106 of collaboration server 102. In embodiments, the one or more executed or instantiated applications can be generated as a Webapplication 120, and transmitted to users in the set of users 108 via one or more networks. In embodiments, the collaboration space 110 can be configured to permit users in the set of users 108 to transmit or upload a set of migrated applications 122directly to the collaboration space 110. The set of migrated applications 122 can comprise remotely generated application code, languages, or other resources that can access the set of executable application resources 106 once received in collaborationspace 110. In embodiments, the set of migrated applications 122 can be stored to data store 116, or other sites or storage. In embodiments, users in the set of users 108 can instead or in addition start and generate applications or other softwareentirely within collaboration space 110. FIG. 3 illustrates an exemplary diagram of hardware and other resources that can be incorporated in collaboration server 102 supporting collaboration space 110, collaboration space 110 in turn being configured to communicate with a set of users108 via one or more networks 118, according to various embodiments. In embodiments as shown, the collaboration server 102 can comprise a processor 124 communicating with memory 126, such as electronic random access memory, operating under control of orin conjunction with operating system 130. Operating system 130 can be, for example, a distribution of the Linux.TM. operating system, the Unix.TM. operating system, or other open-source or proprietary operating system or platform. Processor 124 canalso communicate with the data store 116. Processor 124 further communicates with network interface 128, such as an Ethernet or wireless data connection, which in turn communicates with one or more networks 118, such as the Internet or other public orprivate networks. Processor 124 can also communicate with the memory 126, the network interface 128, and the data store 116 to execute control logic and perform processing to carry out collaboration space management as described herein. Processor 124can further communicate with set of content management resources 104 and/or set of executable application resources 106, to execute management functions in the collaboration space 110. Other configurations of the collaboration server 110, associatednetwork connections, and other hardware and software resources are possible. FIG. 4 illustrates overall processing for application development using a middleware platform, according to embodiments. In 402, processing can begin. In 404, a collaboration space 110, such as a wiki site, can be generated via collaborationserver 102. In 406, the collaboration server 102 can generate and/or access a set of content management resources 104 in the collaboration space 110. In 408, the collaboration server 102 can generate and/or access a set of executable applicationresources 106 in the collaboration space 110. In embodiments, the set of executable application resources 106 can be or include, for example, programming language resources, such as interpreters, compilers, or other tools or platforms to access, modify,and/or execute application code in collaboration space 110. In embodiments, set of executable application resources 106 can include, for example, languages or platforms such as Python, PERL, Ruby on Rails, Visual Basic.TM. available from MicrosoftCorp., or other languages, platforms, and/or other resources to support hosted applications in collaboration space 110. In 410, the collaboration space 110 can receive user-supplied and/or user-selected application code, or other code or resources. For example, collaboration space 110 can receive an upload of application code from one or more of set of users108. In embodiments, the application code can in addition or instead be or include code stored in or retrieved from data store 116. In 412, collaboration server 102 can invoke or interface to set of executable application resources 106 to host,instantiate, and/or execute the user-supplied or user-selected application code in collaboration space 110. For example, set of executable application resources 106 can be invoked to compile or interpret code, and instantiate or execute any resultingexecutable code. In 414, the application hosted by or instantiated in collaboration space 110 can be inserted into a Web framework within the framework of the collaboration space 110. For example, collaboration server 102 can configure network ports and/orother network connections and resources, such as security resources, to transmit or serve the application as a Web application to one or more remote users. In 416, the application hosted by or instantiated in collaboration space 110 can be transmittedor served to one or more recipient users in set of users 108, for example, via a secure channel via network 118. In 418, any updated application code and/or other resources can be stored to data store 116 or other data sites or storage, as appropriate. In 420, as understood by persons skilled in the art, processing can repeat, return to a prior processing point, jump to a further processing point, or end. The foregoing description is illustrative, and variations in configuration and implementation may occur to persons skilled in the art. For example, while embodiments have been described in which one collaboration server supports a collaborationspace and the set of users who participate in that space, in embodiments multiple servers or hosts can support the wiki site or other collaboration environment. Similarly, while embodiments have been described in which one collaboration host supportsone collaboration space, in embodiments, one or more collaboration servers can support multiple wiki sites or other collaboration spaces. Other resources described as singular or integrated can in embodiments be plural or distributed, and resourcesdescribed as multiple or distributed can in embodiments be combined. The scope of the present teachings is accordingly intended to be limited only by the following claims."
